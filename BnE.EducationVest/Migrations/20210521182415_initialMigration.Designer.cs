// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210521182415_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("150e4bde-03f6-41a2-a701-96f9e41be167"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            TextContentId = new Guid("e40be5ba-4f26-4c8c-bef7-24cfdedfb4f0")
                        },
                        new
                        {
                            Id = new Guid("59fa614a-525b-4da4-be38-755000d151f2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            TextContentId = new Guid("579136da-f046-4af1-a80d-a7542e9fc3d2")
                        },
                        new
                        {
                            Id = new Guid("a7d9f891-d1b2-42f5-bf5c-a3dfb3237758"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            TextContentId = new Guid("4a43647e-c993-47f6-b2f8-155f26c95839")
                        },
                        new
                        {
                            Id = new Guid("ab6e012d-0228-4d58-a939-b40a37866ebf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            TextContentId = new Guid("076380e8-0379-42b3-934d-766b5e7d7707")
                        },
                        new
                        {
                            Id = new Guid("439145e7-5f30-457f-a03b-e7b22f25684a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            TextContentId = new Guid("a33fa429-ead0-4b61-b3e7-153a355f392d")
                        },
                        new
                        {
                            Id = new Guid("7ce40664-5e3b-4634-ba16-9b00cb839e82"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            TextContentId = new Guid("c3516ebc-0c19-4862-8f8a-81e12d5680d5")
                        },
                        new
                        {
                            Id = new Guid("2e68e9c5-5eb4-49ee-8016-4eaa1d3ae0dd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            TextContentId = new Guid("96bef00d-efb0-4531-a8d1-fb04e34a6b45")
                        },
                        new
                        {
                            Id = new Guid("153961b6-e433-4980-8a95-70d3d4f7114d"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            TextContentId = new Guid("a77855c9-01b7-4f5a-a93e-f0fe677c258f")
                        },
                        new
                        {
                            Id = new Guid("6108c18f-ce63-415b-b72d-f2802219d601"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            TextContentId = new Guid("aba3c46d-6a71-4dfe-a967-e09b7612cc31")
                        },
                        new
                        {
                            Id = new Guid("cb41610e-e2ba-494c-a9df-086850809205"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            TextContentId = new Guid("e117147d-7ff8-4bf3-8534-db1819fecec9")
                        },
                        new
                        {
                            Id = new Guid("94013c1f-6038-47d5-93a0-7323a7c7cf5a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            TextContentId = new Guid("3ba280f0-1929-4a52-abed-aab0dd020205")
                        },
                        new
                        {
                            Id = new Guid("2e56c44f-b1cd-44e4-a4d3-d6d9cdfafb3f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            TextContentId = new Guid("b05ecef6-95b2-4fac-8e63-c7ed0b7edf73")
                        },
                        new
                        {
                            Id = new Guid("2eb0b21c-76c0-462e-b208-a087a91226f3"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            TextContentId = new Guid("8ace563b-1e49-4810-9dc5-e2a1bf92c62c")
                        },
                        new
                        {
                            Id = new Guid("10f1c539-3c5f-486a-b228-606a0e136b83"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            TextContentId = new Guid("6d491ecb-9333-4031-b89e-733d3e7b4cd3")
                        },
                        new
                        {
                            Id = new Guid("56ec243d-b842-40fe-88e8-ef1dead7416d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            TextContentId = new Guid("f8979a3b-2962-41a2-bb2c-b1fd5dc4c2bd")
                        },
                        new
                        {
                            Id = new Guid("f03f9b1d-28fe-4702-bca1-fea936f67b37"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            TextContentId = new Guid("ffd0bff3-40e4-443f-a625-9cb329fd5b40")
                        },
                        new
                        {
                            Id = new Guid("9dc887f8-574c-4d2b-85f4-78a7a0b6fd02"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            TextContentId = new Guid("b5ee87ea-6f83-448c-a7dc-6720a01060a2")
                        },
                        new
                        {
                            Id = new Guid("615ae0f1-7ead-4e2b-a406-693373148588"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            TextContentId = new Guid("2650d896-bcf6-4608-89bd-18c8c43f9ac9")
                        },
                        new
                        {
                            Id = new Guid("184d07b7-2112-4633-a01e-457907eaabe2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            TextContentId = new Guid("704664e2-12b4-42c8-9c4e-82ec7eac0449")
                        },
                        new
                        {
                            Id = new Guid("9770e6cf-20d9-4055-835a-b62fc78f9e6f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            TextContentId = new Guid("2ccc210b-a607-45f2-96d9-b60ec1929fe6")
                        },
                        new
                        {
                            Id = new Guid("fbe21970-74a3-4495-8198-beb904fa1b5e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            TextContentId = new Guid("c4aeff11-fe3d-4bcc-b590-aa80a1996b4e")
                        },
                        new
                        {
                            Id = new Guid("9bd8b7c8-79ea-498b-a5d3-d4f306cfbe4d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            TextContentId = new Guid("1a0b07b7-b789-45be-a7cd-2581848cdd69")
                        },
                        new
                        {
                            Id = new Guid("bdf45a20-4daa-4427-9b10-8940cdc3cf71"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            TextContentId = new Guid("d08512a2-d3de-4108-9bad-4277df054b37")
                        },
                        new
                        {
                            Id = new Guid("7cae2a91-1519-43fe-8ddd-4470472a4813"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            TextContentId = new Guid("bcb3e2df-0c79-4a3b-933c-1a18098d0d6d")
                        },
                        new
                        {
                            Id = new Guid("8c288fdb-e0d7-40f6-beb3-5981c6eb3738"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            TextContentId = new Guid("c5153cc4-f304-480c-b0f8-acd8752daeef")
                        },
                        new
                        {
                            Id = new Guid("cdd1d6af-dc27-4388-ac28-ac4e901d1e91"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            TextContentId = new Guid("97639e4b-7a86-453b-9e92-5c318ec1d2c7")
                        },
                        new
                        {
                            Id = new Guid("462a1d36-18d2-42ab-b688-0b564f512b96"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            TextContentId = new Guid("f0496687-42aa-42a1-ac7e-a6c76ee44426")
                        },
                        new
                        {
                            Id = new Guid("b6a74c72-a429-4171-b63a-db9b363fd254"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            TextContentId = new Guid("1f453586-7302-4b67-8cc8-062324114408")
                        },
                        new
                        {
                            Id = new Guid("20ea13fa-c2f7-4ec4-aa72-03a12a22b7e6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            TextContentId = new Guid("b1d4f086-1231-4eae-9280-82505e245256")
                        },
                        new
                        {
                            Id = new Guid("319acbe9-6d4e-44a6-b5d3-074a8ac3c9fc"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            TextContentId = new Guid("8aee8ea8-70bd-4424-bdef-9f306af121f9")
                        },
                        new
                        {
                            Id = new Guid("86a98de2-681e-4ee3-9187-d7fb4fa0cd79"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            TextContentId = new Guid("98b62ddb-11fc-486b-916c-8da5834c6c1c")
                        },
                        new
                        {
                            Id = new Guid("d01c91e7-217e-42e8-ba6b-c7a7b38b3fa3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            TextContentId = new Guid("d67e12ab-94f7-46b6-abc6-ea887dcafa4e")
                        },
                        new
                        {
                            Id = new Guid("6ed6a032-09f5-478b-8137-499371251401"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            TextContentId = new Guid("6e595aca-d6fa-45aa-954b-a2b9ab6b7c24")
                        },
                        new
                        {
                            Id = new Guid("57ebf51c-a29b-4512-9a32-bfc893727f65"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            TextContentId = new Guid("6a36a531-6ac3-433a-b368-49f97d5e8179")
                        },
                        new
                        {
                            Id = new Guid("9c3ea0e5-d8a0-46cb-bf93-2af43655f8ce"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            TextContentId = new Guid("0a49b696-f5ae-44b2-b8ce-30a81d381e3c")
                        },
                        new
                        {
                            Id = new Guid("b8d2d72a-cc79-4711-b802-e24444229035"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            TextContentId = new Guid("863e9fba-4869-4855-835b-90cd254b7f7c")
                        },
                        new
                        {
                            Id = new Guid("a2ef69bb-a09b-47ad-b315-2a60ca84b6a8"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            TextContentId = new Guid("ca77f135-5a90-4793-81aa-6e17fbb4e8c3")
                        },
                        new
                        {
                            Id = new Guid("013ba1f5-0cde-4701-9320-b1c3821dca58"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            TextContentId = new Guid("2578e1c4-adbc-48c4-a349-e0c626bf9d36")
                        },
                        new
                        {
                            Id = new Guid("bd491925-9146-4270-b81a-8311154cbada"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            TextContentId = new Guid("dc8c32e3-1174-495a-b9fa-5ee4959adbce")
                        },
                        new
                        {
                            Id = new Guid("d1ac1336-9e47-4014-b734-41ce94c4dbef"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            TextContentId = new Guid("e44b1f61-90eb-44ad-b6ff-84dc2d1eca0c")
                        },
                        new
                        {
                            Id = new Guid("41038f5d-fa16-46dc-88fd-acc6aa3a5f5c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            TextContentId = new Guid("387b1481-c070-44b5-80ef-dafabffd66ac")
                        },
                        new
                        {
                            Id = new Guid("fa5bc323-211c-4d2b-b990-7da0ffc300f4"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            TextContentId = new Guid("ea08de75-de76-43a5-a900-26fa7bdb3a8b")
                        },
                        new
                        {
                            Id = new Guid("0712fea4-33db-429a-bd53-74f0e99b3a3a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            TextContentId = new Guid("0228672e-978f-42b3-b298-fba5e67f2c2f")
                        },
                        new
                        {
                            Id = new Guid("1b133997-da41-4022-848a-a312324b19cf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            TextContentId = new Guid("ee26a392-bf2b-4869-8e33-9e3b5748cb99")
                        },
                        new
                        {
                            Id = new Guid("aefc9487-bb30-4e00-a90f-72e302b20c04"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            TextContentId = new Guid("a22a7551-a513-4039-b5dc-9dbe179c7e61")
                        },
                        new
                        {
                            Id = new Guid("c953a5bf-a57c-493e-b539-a4e0e2979fb0"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            TextContentId = new Guid("d3bb5e76-ee66-4714-ae84-47b2f1d95f71")
                        },
                        new
                        {
                            Id = new Guid("64a19d9c-a92e-4109-9f9f-ad126e192446"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            TextContentId = new Guid("c2b02592-56a4-4bdc-8a1d-d61c4040b245")
                        },
                        new
                        {
                            Id = new Guid("912daff4-5ecc-4e14-934d-fcfd7aa1c158"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            TextContentId = new Guid("37785e1d-fcb0-4113-bdac-99ef7b56f90c")
                        },
                        new
                        {
                            Id = new Guid("c3bdb356-6a93-4765-afe1-6e110659edb3"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            TextContentId = new Guid("c3333419-3209-4d26-9101-812807039a42")
                        },
                        new
                        {
                            Id = new Guid("f5b57441-43e6-4cc0-b58a-937d829f4be9"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            TextContentId = new Guid("bb09dde0-da40-400b-a8b8-5f61c74fdc2b")
                        },
                        new
                        {
                            Id = new Guid("692498d6-1c5a-4946-9d97-cafd82e4074b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            TextContentId = new Guid("bb17d6cb-5d13-4c6f-b441-3ca6e2e3bc71")
                        },
                        new
                        {
                            Id = new Guid("8da08a89-463e-420f-a2f2-0c58717f1ddd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            TextContentId = new Guid("945ac710-77fd-49e8-b80f-13261e33c115")
                        },
                        new
                        {
                            Id = new Guid("e0b25b91-9f6e-40e5-9231-66f533bd5694"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            TextContentId = new Guid("08678161-87ad-4ae7-9cd8-21edec558246")
                        },
                        new
                        {
                            Id = new Guid("c4476e3b-0734-4b15-9d29-e7f377bbf75f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            TextContentId = new Guid("01e86d51-bb0d-458d-8a8b-0add58b661ac")
                        },
                        new
                        {
                            Id = new Guid("2de25189-06e4-4b3a-bb86-2f2b1d8cd78f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            TextContentId = new Guid("31791314-91b2-4394-ab92-6be438829445")
                        },
                        new
                        {
                            Id = new Guid("5347ab0f-8e0f-47a8-9fe4-724904ef82fb"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            TextContentId = new Guid("469e5ed2-2e70-4790-83ad-9af4ef75790f")
                        },
                        new
                        {
                            Id = new Guid("a5085624-34b6-420f-90c2-e9862f12f316"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            TextContentId = new Guid("736b4453-6b1e-4c5a-a455-5c88e47ae5aa")
                        },
                        new
                        {
                            Id = new Guid("d63b7006-c6c5-4555-aa86-d5e8e673295f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            TextContentId = new Guid("1d80f186-7d01-4dfe-b91e-087b537e6d39")
                        },
                        new
                        {
                            Id = new Guid("ce9fa285-fcc6-486e-990c-d1d8183c1988"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            TextContentId = new Guid("ebbe4589-c510-4438-ad21-97bf684908b6")
                        },
                        new
                        {
                            Id = new Guid("c0f01165-2efe-4f8c-a4ab-2d8a5c86e1ea"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            TextContentId = new Guid("f778b369-dfd4-49fb-a0af-ef18fac23de1")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(4397),
                            ExamNumber = 1,
                            ExamType = 2,
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(4403)
                        },
                        new
                        {
                            Id = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8181),
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8183)
                        },
                        new
                        {
                            Id = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8190),
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8191)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb2aefce-f382-4a61-a1fa-083520bcb101"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(3554),
                            EnunciatedId = new Guid("b933168e-415f-401f-b894-7e3ef6e7db85"),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            Index = 0,
                            SubjectId = new Guid("13784a54-2b68-4143-870f-d0003bf6f6c3"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(3559)
                        },
                        new
                        {
                            Id = new Guid("f7b6c90e-4aff-4d58-8965-7f57c43b985a"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6004),
                            EnunciatedId = new Guid("7de5adda-d4ef-46da-840b-01dbed82b7a0"),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            Index = 1,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6009)
                        },
                        new
                        {
                            Id = new Guid("2c5cb800-9d91-448d-85c8-dbcdaa5ed4b6"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6026),
                            EnunciatedId = new Guid("2f62a39c-f197-468a-9760-42901fbb85d8"),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            Index = 2,
                            SubjectId = new Guid("c9e43c59-b2ca-4102-89d6-d703e016706b"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6027)
                        },
                        new
                        {
                            Id = new Guid("92d1724b-23f8-4fb0-9af2-ee846719f133"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6038),
                            EnunciatedId = new Guid("4bd84d0f-99bd-4897-b607-d789da24955e"),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            Index = 3,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6039)
                        },
                        new
                        {
                            Id = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6052),
                            EnunciatedId = new Guid("b7e4daa1-412c-44fb-b74b-ec65c715be03"),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            Index = 0,
                            SubjectId = new Guid("13784a54-2b68-4143-870f-d0003bf6f6c3"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6053)
                        },
                        new
                        {
                            Id = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6069),
                            EnunciatedId = new Guid("c6594c46-d221-4b52-97c7-6fac7528e471"),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            Index = 1,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6070)
                        },
                        new
                        {
                            Id = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6122),
                            EnunciatedId = new Guid("bd59de4f-689a-4e28-9c40-e06ad836c188"),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            Index = 2,
                            SubjectId = new Guid("c9e43c59-b2ca-4102-89d6-d703e016706b"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6123)
                        },
                        new
                        {
                            Id = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6134),
                            EnunciatedId = new Guid("63b05fea-2e37-4ed1-aa24-b1427f25d7f6"),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            Index = 3,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6135)
                        },
                        new
                        {
                            Id = new Guid("80f72574-d373-43f9-896f-0db71b80cccd"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6148),
                            EnunciatedId = new Guid("1d1bdad8-8938-4404-acf7-f080c93d5595"),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            Index = 0,
                            SubjectId = new Guid("13784a54-2b68-4143-870f-d0003bf6f6c3"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6149)
                        },
                        new
                        {
                            Id = new Guid("1cc05206-b35d-46be-9009-4290d2a25270"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6161),
                            EnunciatedId = new Guid("f41835f2-27fa-4b8c-940b-d057d3dace31"),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            Index = 1,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6162)
                        },
                        new
                        {
                            Id = new Guid("4e52de80-11bc-4ce3-9eba-59102dbb6e06"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6176),
                            EnunciatedId = new Guid("d50bc897-cc29-4623-9c06-b700f967d51b"),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            Index = 2,
                            SubjectId = new Guid("c9e43c59-b2ca-4102-89d6-d703e016706b"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6177)
                        },
                        new
                        {
                            Id = new Guid("37c96910-a4f7-4299-9880-d7d39e1a1060"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6188),
                            EnunciatedId = new Guid("6f855e6c-8e7d-4e35-a7df-9dcf8e1905a4"),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            Index = 3,
                            SubjectId = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 268, DateTimeKind.Local).AddTicks(6189)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b53af185-47d3-433b-96e4-e770b78e1564"),
                            ChosenAlternativeId = new Guid("fbe21970-74a3-4495-8198-beb904fa1b5e"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(7510),
                            QuestionId = new Guid("234ec727-daf0-4d6e-afe9-09052d5eb10f"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(7519),
                            UserId = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb")
                        },
                        new
                        {
                            Id = new Guid("994858cc-d060-46b1-b1b6-1afcd036fca0"),
                            ChosenAlternativeId = new Guid("cdd1d6af-dc27-4388-ac28-ac4e901d1e91"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8848),
                            QuestionId = new Guid("cd4dcb4d-4d96-41dc-a78f-64ae4ad1222f"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8852),
                            UserId = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb")
                        },
                        new
                        {
                            Id = new Guid("fb603a97-3574-4932-8b15-ff6aabec8254"),
                            ChosenAlternativeId = new Guid("86a98de2-681e-4ee3-9187-d7fb4fa0cd79"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8864),
                            QuestionId = new Guid("7e3dbc1e-07b2-4ec9-ab9e-392a352ae06c"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8865),
                            UserId = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb")
                        },
                        new
                        {
                            Id = new Guid("226545ee-73ef-4cb5-b515-7536018376ce"),
                            ChosenAlternativeId = new Guid("b8d2d72a-cc79-4711-b802-e24444229035"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8868),
                            QuestionId = new Guid("c6605fc6-2459-4235-950a-8f14a58cb39a"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 282, DateTimeKind.Local).AddTicks(8869),
                            UserId = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13784a54-2b68-4143-870f-d0003bf6f6c3"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(3639),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(4077)
                        },
                        new
                        {
                            Id = new Guid("c9e43c59-b2ca-4102-89d6-d703e016706b"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(4892),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(4896)
                        },
                        new
                        {
                            Id = new Guid("42f2161c-d9a5-4612-91c0-c33406f9c5d1"),
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(4898),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("13784a54-2b68-4143-870f-d0003bf6f6c3"),
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 267, DateTimeKind.Local).AddTicks(4899)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("379ed9d1-e01b-4a65-a82f-9f883d64ec45"),
                            CloseDate = new DateTime(2021, 5, 25, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            OpenDate = new DateTime(2021, 5, 25, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("4338699b-b33f-4cf5-9881-7fbb90ea349a"),
                            CloseDate = new DateTime(2021, 5, 26, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("ba96b5ff-2e7f-4cfd-af1b-02a2acb6a9d4"),
                            OpenDate = new DateTime(2021, 5, 26, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("72e119c6-667d-4750-93ff-b821e5edca0a"),
                            CloseDate = new DateTime(2021, 5, 21, 19, 24, 14, 275, DateTimeKind.Local).AddTicks(8155),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            OpenDate = new DateTime(2021, 5, 21, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8155)
                        },
                        new
                        {
                            Id = new Guid("c0946bca-f4be-40d9-acff-9868165479bc"),
                            CloseDate = new DateTime(2021, 5, 22, 17, 24, 14, 275, DateTimeKind.Local).AddTicks(8155),
                            ExamId = new Guid("c10e97cc-550c-46b6-b5a5-c7f0063b67e5"),
                            OpenDate = new DateTime(2021, 5, 22, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8155)
                        },
                        new
                        {
                            Id = new Guid("864e9d66-d257-4a05-90d6-2e3688977362"),
                            CloseDate = new DateTime(2021, 5, 19, 17, 24, 14, 275, DateTimeKind.Local).AddTicks(8186),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            OpenDate = new DateTime(2021, 5, 19, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8186)
                        },
                        new
                        {
                            Id = new Guid("5d7ec88e-30bb-4427-9791-4d9f4d4ea868"),
                            CloseDate = new DateTime(2021, 5, 20, 17, 24, 14, 275, DateTimeKind.Local).AddTicks(8186),
                            ExamId = new Guid("3cc64121-cd15-4a44-864a-9dddf34dd129"),
                            OpenDate = new DateTime(2021, 5, 20, 15, 24, 14, 275, DateTimeKind.Local).AddTicks(8186)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b933168e-415f-401f-b894-7e3ef6e7db85"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("7de5adda-d4ef-46da-840b-01dbed82b7a0"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("2f62a39c-f197-468a-9760-42901fbb85d8"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("4bd84d0f-99bd-4897-b607-d789da24955e"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b7e4daa1-412c-44fb-b74b-ec65c715be03"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("c6594c46-d221-4b52-97c7-6fac7528e471"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("bd59de4f-689a-4e28-9c40-e06ad836c188"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("63b05fea-2e37-4ed1-aa24-b1427f25d7f6"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1d1bdad8-8938-4404-acf7-f080c93d5595"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("f41835f2-27fa-4b8c-940b-d057d3dace31"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d50bc897-cc29-4623-9c06-b700f967d51b"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("6f855e6c-8e7d-4e35-a7df-9dcf8e1905a4"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("e40be5ba-4f26-4c8c-bef7-24cfdedfb4f0"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("579136da-f046-4af1-a80d-a7542e9fc3d2"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("4a43647e-c993-47f6-b2f8-155f26c95839"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("076380e8-0379-42b3-934d-766b5e7d7707"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("a33fa429-ead0-4b61-b3e7-153a355f392d"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("c3516ebc-0c19-4862-8f8a-81e12d5680d5"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("96bef00d-efb0-4531-a8d1-fb04e34a6b45"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("a77855c9-01b7-4f5a-a93e-f0fe677c258f"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("aba3c46d-6a71-4dfe-a967-e09b7612cc31"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("e117147d-7ff8-4bf3-8534-db1819fecec9"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("3ba280f0-1929-4a52-abed-aab0dd020205"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("b05ecef6-95b2-4fac-8e63-c7ed0b7edf73"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("8ace563b-1e49-4810-9dc5-e2a1bf92c62c"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("6d491ecb-9333-4031-b89e-733d3e7b4cd3"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("f8979a3b-2962-41a2-bb2c-b1fd5dc4c2bd"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("ffd0bff3-40e4-443f-a625-9cb329fd5b40"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("b5ee87ea-6f83-448c-a7dc-6720a01060a2"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("2650d896-bcf6-4608-89bd-18c8c43f9ac9"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("704664e2-12b4-42c8-9c4e-82ec7eac0449"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2ccc210b-a607-45f2-96d9-b60ec1929fe6"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c4aeff11-fe3d-4bcc-b590-aa80a1996b4e"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("1a0b07b7-b789-45be-a7cd-2581848cdd69"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("d08512a2-d3de-4108-9bad-4277df054b37"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("bcb3e2df-0c79-4a3b-933c-1a18098d0d6d"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("c5153cc4-f304-480c-b0f8-acd8752daeef"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("97639e4b-7a86-453b-9e92-5c318ec1d2c7"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("f0496687-42aa-42a1-ac7e-a6c76ee44426"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("1f453586-7302-4b67-8cc8-062324114408"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("b1d4f086-1231-4eae-9280-82505e245256"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("8aee8ea8-70bd-4424-bdef-9f306af121f9"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("98b62ddb-11fc-486b-916c-8da5834c6c1c"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("d67e12ab-94f7-46b6-abc6-ea887dcafa4e"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("6e595aca-d6fa-45aa-954b-a2b9ab6b7c24"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("6a36a531-6ac3-433a-b368-49f97d5e8179"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("0a49b696-f5ae-44b2-b8ce-30a81d381e3c"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("863e9fba-4869-4855-835b-90cd254b7f7c"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("ca77f135-5a90-4793-81aa-6e17fbb4e8c3"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("2578e1c4-adbc-48c4-a349-e0c626bf9d36"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("dc8c32e3-1174-495a-b9fa-5ee4959adbce"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("e44b1f61-90eb-44ad-b6ff-84dc2d1eca0c"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("387b1481-c070-44b5-80ef-dafabffd66ac"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("ea08de75-de76-43a5-a900-26fa7bdb3a8b"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("0228672e-978f-42b3-b298-fba5e67f2c2f"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("ee26a392-bf2b-4869-8e33-9e3b5748cb99"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("a22a7551-a513-4039-b5dc-9dbe179c7e61"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("d3bb5e76-ee66-4714-ae84-47b2f1d95f71"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("c2b02592-56a4-4bdc-8a1d-d61c4040b245"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("37785e1d-fcb0-4113-bdac-99ef7b56f90c"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("c3333419-3209-4d26-9101-812807039a42"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("bb09dde0-da40-400b-a8b8-5f61c74fdc2b"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("bb17d6cb-5d13-4c6f-b441-3ca6e2e3bc71"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("945ac710-77fd-49e8-b80f-13261e33c115"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("08678161-87ad-4ae7-9cd8-21edec558246"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("01e86d51-bb0d-458d-8a8b-0add58b661ac"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("31791314-91b2-4394-ab92-6be438829445"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("469e5ed2-2e70-4790-83ad-9af4ef75790f"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("736b4453-6b1e-4c5a-a455-5c88e47ae5aa"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("1d80f186-7d01-4dfe-b91e-087b537e6d39"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("ebbe4589-c510-4438-ad21-97bf684908b6"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("f778b369-dfd4-49fb-a0af-ef18fac23de1"),
                            Content = "60°"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("CognitoUserId")
                        .HasColumnType("text")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = "6e32ca6c-2a66-4ea6-a0c4-cf655dab5191",
                            CreatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 274, DateTimeKind.Local).AddTicks(8043),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 21, 15, 24, 14, 274, DateTimeKind.Local).AddTicks(8050)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("adress.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("text")
                                .HasColumnName("address_number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("adress.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("d574be54-0eab-448d-8169-7da2367e7ffb"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
