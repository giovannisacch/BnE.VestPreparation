// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210519005419_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("QuestionId", "Index")
                        .HasName("pk_alternative");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("576519aa-93bc-472c-971e-a49a576bed78")
                        },
                        new
                        {
                            QuestionId = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("bbcf3790-cef7-45cf-b31b-d96d7c01428a")
                        },
                        new
                        {
                            QuestionId = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("5599fcac-fedf-45ce-ba6e-a4c2d638f51a")
                        },
                        new
                        {
                            QuestionId = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("9adf8b4c-5d49-4015-a977-2735ec51c4fd")
                        },
                        new
                        {
                            QuestionId = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("fd22dd33-0a96-4632-b2e4-15f064e0e549")
                        },
                        new
                        {
                            QuestionId = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("8858dd68-1fe5-4881-9aeb-da469d1bf7c1")
                        },
                        new
                        {
                            QuestionId = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("37adf8dc-d283-4e14-bf06-f066b685f92c")
                        },
                        new
                        {
                            QuestionId = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("f267d363-7880-43ec-a3a2-0f2691f0f6d9")
                        },
                        new
                        {
                            QuestionId = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("fddfe007-140e-433c-919b-a88f13beee83")
                        },
                        new
                        {
                            QuestionId = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("9f43d6eb-df52-4d1e-9298-40cff13fd1c6")
                        },
                        new
                        {
                            QuestionId = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("b0ebd166-90de-4171-8e33-d9377b92cff1")
                        },
                        new
                        {
                            QuestionId = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("54dcd02d-9189-466e-acd3-481b1e5bd319")
                        },
                        new
                        {
                            QuestionId = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("56d1e34d-4581-40bc-848a-285f00669670")
                        },
                        new
                        {
                            QuestionId = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("a6472904-935a-4aef-aa24-bd284837a359")
                        },
                        new
                        {
                            QuestionId = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("30d3064e-2c57-4780-af68-be25310e0e26")
                        },
                        new
                        {
                            QuestionId = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("738b87eb-472c-4d80-88b1-6c1975bd435c")
                        },
                        new
                        {
                            QuestionId = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("70d23acf-90b0-49cb-8a1b-fc362481fb58")
                        },
                        new
                        {
                            QuestionId = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("649b1cda-57b2-48ac-8972-34055927b95e")
                        },
                        new
                        {
                            QuestionId = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("348a45e4-9c52-4cf3-b605-2daa8f261762")
                        },
                        new
                        {
                            QuestionId = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("35932305-358a-481d-8bfd-7caac98bfad7")
                        },
                        new
                        {
                            QuestionId = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("5743897c-ac4e-4d83-81a7-a83e63b7a65a")
                        },
                        new
                        {
                            QuestionId = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("b053f9de-aa36-4f51-aa22-1fcbdaa0d47d")
                        },
                        new
                        {
                            QuestionId = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("4a5a630e-e086-4047-8c9d-f0b7fa84af81")
                        },
                        new
                        {
                            QuestionId = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("4fc415f7-e6f8-4b0c-95f6-d0ed34d8a3e8")
                        },
                        new
                        {
                            QuestionId = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("e6990ea6-23e1-4bac-bbf6-a1651ae2cde9")
                        },
                        new
                        {
                            QuestionId = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("d40bbbaf-db09-426f-b45e-02c449ab856f")
                        },
                        new
                        {
                            QuestionId = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("d65d3a17-17cc-406e-ba33-4b5cdb37e993")
                        },
                        new
                        {
                            QuestionId = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("0c6a95fd-ddf4-407c-a31c-75f0baeaecdb")
                        },
                        new
                        {
                            QuestionId = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("b7dcd9e8-7fc5-4b6b-a5b2-b9dedd1a2f58")
                        },
                        new
                        {
                            QuestionId = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("bd8803ba-ba25-495c-8c04-3783ff31b233")
                        },
                        new
                        {
                            QuestionId = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("6c08cb1b-6533-4cbe-9465-d0161e54e91b")
                        },
                        new
                        {
                            QuestionId = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("c8f4cd07-1bea-4fd3-84cb-cfa17c50c7b9")
                        },
                        new
                        {
                            QuestionId = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("0315c0ab-3120-453a-9ab4-ffcbc29f90c1")
                        },
                        new
                        {
                            QuestionId = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("41eec0ba-5fab-4620-8f83-c6aec58a686f")
                        },
                        new
                        {
                            QuestionId = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("71dd8b0e-9232-4bd3-bae9-251ca26d523e")
                        },
                        new
                        {
                            QuestionId = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("c3e30d0e-dbb5-4b31-88b6-1816465c0e94")
                        },
                        new
                        {
                            QuestionId = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("6d15c8d2-5c3b-4180-a8e5-599b9a085ff3")
                        },
                        new
                        {
                            QuestionId = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("86cacd23-80e7-4e6d-9169-7a38e4758a79")
                        },
                        new
                        {
                            QuestionId = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("9f0ae8d9-39ce-42d1-a58c-28a04684e6e7")
                        },
                        new
                        {
                            QuestionId = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("7edd21f5-629f-4f5d-b574-fb21db6c17d3")
                        },
                        new
                        {
                            QuestionId = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("7c98f79e-023b-4a43-a7ea-86c6f9574784")
                        },
                        new
                        {
                            QuestionId = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("00e6d697-0dc5-421f-bf95-22af74b4a747")
                        },
                        new
                        {
                            QuestionId = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("eec15771-bef4-4fb2-8038-04199c9a2a12")
                        },
                        new
                        {
                            QuestionId = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("c1b4c4c0-f95a-4682-b0c8-b2a62cd89342")
                        },
                        new
                        {
                            QuestionId = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("ba6b5d4c-45fb-4bb2-a42d-a88663d82406")
                        },
                        new
                        {
                            QuestionId = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("34b29994-1994-45bb-82b0-f6245c364c53")
                        },
                        new
                        {
                            QuestionId = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("9461b339-d713-4369-b920-388a6c05235c")
                        },
                        new
                        {
                            QuestionId = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("d924dae7-8b8c-4f95-8a81-ccfb659a9e55")
                        },
                        new
                        {
                            QuestionId = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("2b3ba25b-60ff-49f1-a45a-d894f05db2a4")
                        },
                        new
                        {
                            QuestionId = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("22091b88-0463-4a72-80b9-b04f29f652a9")
                        },
                        new
                        {
                            QuestionId = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("9939396d-78c5-4bdc-a6a2-82d85a69aa65")
                        },
                        new
                        {
                            QuestionId = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("25bc2496-fbb2-4c12-8e7f-9cfdbdeed26c")
                        },
                        new
                        {
                            QuestionId = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("5af1a9f5-be79-4703-a300-959fa1506299")
                        },
                        new
                        {
                            QuestionId = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("bcc0791c-0f7c-4457-a338-3bba01fb0eb6")
                        },
                        new
                        {
                            QuestionId = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("63126275-8d0f-491f-9433-2bd6063bb7f1")
                        },
                        new
                        {
                            QuestionId = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            Index = 0,
                            IsCorrect = true,
                            TextContentId = new Guid("9a62e495-d936-47be-9776-11bbd565619a")
                        },
                        new
                        {
                            QuestionId = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            Index = 1,
                            IsCorrect = false,
                            TextContentId = new Guid("2c4ed05b-9ba2-4ca5-89a9-1a6059c7a704")
                        },
                        new
                        {
                            QuestionId = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            Index = 2,
                            IsCorrect = false,
                            TextContentId = new Guid("42fa4dc6-5564-409d-9b98-3a8480510452")
                        },
                        new
                        {
                            QuestionId = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            Index = 3,
                            IsCorrect = false,
                            TextContentId = new Guid("15872782-c08b-4b02-939b-f31afd011f4d")
                        },
                        new
                        {
                            QuestionId = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            Index = 4,
                            IsCorrect = false,
                            TextContentId = new Guid("19dfe1fe-a719-48f8-bc4b-4282e1f73a2f")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(2534),
                            ExamNumber = 1,
                            ExamType = 2,
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(2539)
                        },
                        new
                        {
                            Id = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6299),
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6300)
                        },
                        new
                        {
                            Id = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6308),
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6309)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("450e09dd-55b4-41d6-b6a9-680b8d973fe2"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(6916),
                            EnunciatedId = new Guid("d19beaf4-7317-48da-af1c-374d354bfde4"),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            Index = 0,
                            SubjectId = new Guid("2f07b7bd-2519-4a08-a712-de656d82842e"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(6921)
                        },
                        new
                        {
                            Id = new Guid("5e455d9f-a60a-47e8-b71f-852469e0d2e9"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9496),
                            EnunciatedId = new Guid("0a400db7-f045-4350-9c03-7b276450d1f8"),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            Index = 1,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9502)
                        },
                        new
                        {
                            Id = new Guid("f506be00-b7f1-4ec2-9a79-5edb17f11631"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9517),
                            EnunciatedId = new Guid("c945c63c-bdc8-4e68-9d58-6665ef818f11"),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            Index = 2,
                            SubjectId = new Guid("20e7aac6-8a85-4a6f-8e77-b15ff6a47d81"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9518)
                        },
                        new
                        {
                            Id = new Guid("da26c9ed-1425-48a3-9bfe-7675ae3243e7"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9528),
                            EnunciatedId = new Guid("db70a537-3831-41ae-ae44-e50e65ffbe0c"),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            Index = 3,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9529)
                        },
                        new
                        {
                            Id = new Guid("9a36cba4-96fe-4316-9f85-762a8c775eed"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9539),
                            EnunciatedId = new Guid("3232eeba-9830-4204-bc99-c6b19f672b66"),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            Index = 0,
                            SubjectId = new Guid("2f07b7bd-2519-4a08-a712-de656d82842e"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9539)
                        },
                        new
                        {
                            Id = new Guid("31e7a721-34b7-45ae-8eeb-b879582ec8e4"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9547),
                            EnunciatedId = new Guid("69e31e80-8b51-439d-a226-15f590ccc0cb"),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            Index = 1,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9548)
                        },
                        new
                        {
                            Id = new Guid("94f24c40-6aa0-4a88-9eec-d80e276878be"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9557),
                            EnunciatedId = new Guid("815fc0f6-3d51-4e46-b01d-11b9bc24c9fd"),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            Index = 2,
                            SubjectId = new Guid("20e7aac6-8a85-4a6f-8e77-b15ff6a47d81"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9558)
                        },
                        new
                        {
                            Id = new Guid("0d00941e-9cfe-4e46-9132-72a6af7b6639"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9568),
                            EnunciatedId = new Guid("86fc0059-1fd1-4bf3-9807-5f13c64805b1"),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            Index = 3,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9569)
                        },
                        new
                        {
                            Id = new Guid("dbd860c9-520f-4ed9-ab4f-88248e8691fe"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9578),
                            EnunciatedId = new Guid("1585e0ea-b4b7-4064-9d14-36e4117160ee"),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            Index = 0,
                            SubjectId = new Guid("2f07b7bd-2519-4a08-a712-de656d82842e"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9579)
                        },
                        new
                        {
                            Id = new Guid("48586167-2415-41da-8974-f19b66691b16"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9620),
                            EnunciatedId = new Guid("a945303d-83b7-432e-bd97-a5e358df463a"),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            Index = 1,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9621)
                        },
                        new
                        {
                            Id = new Guid("fa11525e-9295-40d3-928e-fba943ada12b"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9630),
                            EnunciatedId = new Guid("3b1b42f9-dd09-4956-b913-043ca727b8c6"),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            Index = 2,
                            SubjectId = new Guid("20e7aac6-8a85-4a6f-8e77-b15ff6a47d81"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9631)
                        },
                        new
                        {
                            Id = new Guid("8634eacc-be4a-4b33-a1cc-e846853b6388"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9640),
                            EnunciatedId = new Guid("f0ffd4b9-7697-4b6d-b310-3ae696dc67b1"),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            Index = 3,
                            SubjectId = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 475, DateTimeKind.Local).AddTicks(9641)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f07b7bd-2519-4a08-a712-de656d82842e"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(7665),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(8127)
                        },
                        new
                        {
                            Id = new Guid("20e7aac6-8a85-4a6f-8e77-b15ff6a47d81"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(8889),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(8893)
                        },
                        new
                        {
                            Id = new Guid("1a8d417d-8de5-496f-aa14-169f85509131"),
                            CreatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(8895),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("2f07b7bd-2519-4a08-a712-de656d82842e"),
                            UpdatedDate = new DateTime(2021, 5, 18, 21, 54, 18, 474, DateTimeKind.Local).AddTicks(8896)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b799e2e8-6087-460d-ae8c-032e0d56694f"),
                            CloseDate = new DateTime(2021, 5, 22, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            OpenDate = new DateTime(2021, 5, 22, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("c30ed310-82f8-468f-9621-7714299c5485"),
                            CloseDate = new DateTime(2021, 5, 23, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("d07485f8-ef2f-4178-85e8-cbe088b0e28d"),
                            OpenDate = new DateTime(2021, 5, 23, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("6dc524e3-3872-4b23-8ad8-49d6589e60eb"),
                            CloseDate = new DateTime(2021, 5, 19, 1, 54, 18, 476, DateTimeKind.Local).AddTicks(6274),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            OpenDate = new DateTime(2021, 5, 18, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6274)
                        },
                        new
                        {
                            Id = new Guid("74fab709-886d-4077-b55c-3d7e1788d339"),
                            CloseDate = new DateTime(2021, 5, 19, 23, 54, 18, 476, DateTimeKind.Local).AddTicks(6274),
                            ExamId = new Guid("df2a0ef3-f26c-4442-acb6-a7a4e2e58f9c"),
                            OpenDate = new DateTime(2021, 5, 19, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6274)
                        },
                        new
                        {
                            Id = new Guid("c2e0578d-5ca8-414f-b662-d84c9481ee05"),
                            CloseDate = new DateTime(2021, 5, 16, 23, 54, 18, 476, DateTimeKind.Local).AddTicks(6303),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            OpenDate = new DateTime(2021, 5, 16, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6303)
                        },
                        new
                        {
                            Id = new Guid("0dd50eb9-472f-4a1f-9e3c-62432ca9cfcb"),
                            CloseDate = new DateTime(2021, 5, 17, 23, 54, 18, 476, DateTimeKind.Local).AddTicks(6303),
                            ExamId = new Guid("8be840e3-be84-44c1-a614-abf9e4d86bf8"),
                            OpenDate = new DateTime(2021, 5, 17, 21, 54, 18, 476, DateTimeKind.Local).AddTicks(6303)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d19beaf4-7317-48da-af1c-374d354bfde4"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("0a400db7-f045-4350-9c03-7b276450d1f8"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("c945c63c-bdc8-4e68-9d58-6665ef818f11"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("db70a537-3831-41ae-ae44-e50e65ffbe0c"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3232eeba-9830-4204-bc99-c6b19f672b66"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("69e31e80-8b51-439d-a226-15f590ccc0cb"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("815fc0f6-3d51-4e46-b01d-11b9bc24c9fd"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("86fc0059-1fd1-4bf3-9807-5f13c64805b1"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1585e0ea-b4b7-4064-9d14-36e4117160ee"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("a945303d-83b7-432e-bd97-a5e358df463a"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3b1b42f9-dd09-4956-b913-043ca727b8c6"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("f0ffd4b9-7697-4b6d-b310-3ae696dc67b1"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("576519aa-93bc-472c-971e-a49a576bed78"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("bbcf3790-cef7-45cf-b31b-d96d7c01428a"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("5599fcac-fedf-45ce-ba6e-a4c2d638f51a"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("9adf8b4c-5d49-4015-a977-2735ec51c4fd"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("fd22dd33-0a96-4632-b2e4-15f064e0e549"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("8858dd68-1fe5-4881-9aeb-da469d1bf7c1"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("37adf8dc-d283-4e14-bf06-f066b685f92c"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("f267d363-7880-43ec-a3a2-0f2691f0f6d9"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("fddfe007-140e-433c-919b-a88f13beee83"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("9f43d6eb-df52-4d1e-9298-40cff13fd1c6"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("b0ebd166-90de-4171-8e33-d9377b92cff1"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("54dcd02d-9189-466e-acd3-481b1e5bd319"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("56d1e34d-4581-40bc-848a-285f00669670"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("a6472904-935a-4aef-aa24-bd284837a359"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("30d3064e-2c57-4780-af68-be25310e0e26"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("738b87eb-472c-4d80-88b1-6c1975bd435c"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("70d23acf-90b0-49cb-8a1b-fc362481fb58"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("649b1cda-57b2-48ac-8972-34055927b95e"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("348a45e4-9c52-4cf3-b605-2daa8f261762"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("35932305-358a-481d-8bfd-7caac98bfad7"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("5743897c-ac4e-4d83-81a7-a83e63b7a65a"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("b053f9de-aa36-4f51-aa22-1fcbdaa0d47d"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("4a5a630e-e086-4047-8c9d-f0b7fa84af81"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("4fc415f7-e6f8-4b0c-95f6-d0ed34d8a3e8"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("e6990ea6-23e1-4bac-bbf6-a1651ae2cde9"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("d40bbbaf-db09-426f-b45e-02c449ab856f"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("d65d3a17-17cc-406e-ba33-4b5cdb37e993"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("0c6a95fd-ddf4-407c-a31c-75f0baeaecdb"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("b7dcd9e8-7fc5-4b6b-a5b2-b9dedd1a2f58"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("bd8803ba-ba25-495c-8c04-3783ff31b233"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("6c08cb1b-6533-4cbe-9465-d0161e54e91b"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("c8f4cd07-1bea-4fd3-84cb-cfa17c50c7b9"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("0315c0ab-3120-453a-9ab4-ffcbc29f90c1"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("41eec0ba-5fab-4620-8f83-c6aec58a686f"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("71dd8b0e-9232-4bd3-bae9-251ca26d523e"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("c3e30d0e-dbb5-4b31-88b6-1816465c0e94"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("6d15c8d2-5c3b-4180-a8e5-599b9a085ff3"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("86cacd23-80e7-4e6d-9169-7a38e4758a79"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("9f0ae8d9-39ce-42d1-a58c-28a04684e6e7"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("7edd21f5-629f-4f5d-b574-fb21db6c17d3"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("7c98f79e-023b-4a43-a7ea-86c6f9574784"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("00e6d697-0dc5-421f-bf95-22af74b4a747"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("eec15771-bef4-4fb2-8038-04199c9a2a12"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("c1b4c4c0-f95a-4682-b0c8-b2a62cd89342"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("ba6b5d4c-45fb-4bb2-a42d-a88663d82406"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("34b29994-1994-45bb-82b0-f6245c364c53"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("9461b339-d713-4369-b920-388a6c05235c"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("d924dae7-8b8c-4f95-8a81-ccfb659a9e55"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("2b3ba25b-60ff-49f1-a45a-d894f05db2a4"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("22091b88-0463-4a72-80b9-b04f29f652a9"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("9939396d-78c5-4bdc-a6a2-82d85a69aa65"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("25bc2496-fbb2-4c12-8e7f-9cfdbdeed26c"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("5af1a9f5-be79-4703-a300-959fa1506299"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("bcc0791c-0f7c-4457-a338-3bba01fb0eb6"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("63126275-8d0f-491f-9433-2bd6063bb7f1"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("9a62e495-d936-47be-9776-11bbd565619a"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("2c4ed05b-9ba2-4ca5-89a9-1a6059c7a704"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("42fa4dc6-5564-409d-9b98-3a8480510452"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("15872782-c08b-4b02-939b-f31afd011f4d"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("19dfe1fe-a719-48f8-bc4b-4282e1f73a2f"),
                            Content = "60°"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
