// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    partial class EducationVestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2af36916-41df-4f08-b204-619b1ec8a29a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            TextContentId = new Guid("ed803340-dcd7-4ef1-89df-0a463570de2a")
                        },
                        new
                        {
                            Id = new Guid("2b6464e0-9c0c-4a01-9031-1d5b43f9d2ec"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            TextContentId = new Guid("a50c5b90-4796-4aae-96b8-bc4f810b8c7a")
                        },
                        new
                        {
                            Id = new Guid("9208c0a9-5de9-4437-8bff-30068dd40059"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            TextContentId = new Guid("41793612-5dad-4819-854a-8e9d7a258d55")
                        },
                        new
                        {
                            Id = new Guid("c601d2fe-5f77-4ac2-9088-3701dfc25cb0"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            TextContentId = new Guid("dc35735c-1b52-4a3e-8702-d3df6e7423e3")
                        },
                        new
                        {
                            Id = new Guid("83efbed7-6e5c-449b-8f58-7be243f0ab66"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            TextContentId = new Guid("c76fa30b-428a-4990-a201-8e8362507f2f")
                        },
                        new
                        {
                            Id = new Guid("6b18a709-5096-46da-9716-eef86340be65"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            TextContentId = new Guid("3ae998f6-35d1-4894-bce8-5adf5a4e6643")
                        },
                        new
                        {
                            Id = new Guid("11a8fad6-d4e5-4086-bd90-60613942daaa"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            TextContentId = new Guid("06bc6e27-e8cc-489f-b938-ce4a62daf32e")
                        },
                        new
                        {
                            Id = new Guid("ffdc195e-1f1e-4093-88f3-e021221b86f2"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            TextContentId = new Guid("a5b036ff-4400-4ad4-aba0-e3769d160ccc")
                        },
                        new
                        {
                            Id = new Guid("1337e8e8-1c54-4190-aae9-e9da56138bbb"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            TextContentId = new Guid("bce6f353-79d2-4a45-bd69-3e9b628dcd3b")
                        },
                        new
                        {
                            Id = new Guid("3fb4c4c5-965a-45c6-8c0f-fb5b20ede240"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            TextContentId = new Guid("a9145e8c-4d77-4860-a7d5-2bc46770ec67")
                        },
                        new
                        {
                            Id = new Guid("eabd9a41-4963-4ad9-918b-e59e237564f9"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            TextContentId = new Guid("b061ac1f-fd15-4230-a90e-4586f70e3c35")
                        },
                        new
                        {
                            Id = new Guid("e34409dc-af44-4de3-9d65-249d78523a0b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            TextContentId = new Guid("4a33e538-7c62-4ae7-8162-334b37c0e257")
                        },
                        new
                        {
                            Id = new Guid("5802337e-542c-4faa-93f9-f150a18cfcfe"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            TextContentId = new Guid("a0912b7a-1b6f-4e2f-9986-c90cc16d03ea")
                        },
                        new
                        {
                            Id = new Guid("489a5e2a-c09b-47c1-98a8-b18e63777018"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            TextContentId = new Guid("b5fa6980-ca54-4632-bcd0-7aceba3efe2b")
                        },
                        new
                        {
                            Id = new Guid("c82075de-71e6-4234-9fb7-2531d57844f4"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            TextContentId = new Guid("886c768a-8979-45c3-af8e-44fbf7177b3f")
                        },
                        new
                        {
                            Id = new Guid("be031634-dabb-4d9e-ab8d-b3f1347a9fd6"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            TextContentId = new Guid("e7bd8893-6224-41cd-85b9-44da321b486a")
                        },
                        new
                        {
                            Id = new Guid("341e47e3-9070-4dbd-aae7-8555ef1f1608"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            TextContentId = new Guid("9d2b6aa5-1be8-4a0f-b938-585070b25c64")
                        },
                        new
                        {
                            Id = new Guid("319c775e-dfc5-4318-aae5-800da6e24d7a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            TextContentId = new Guid("58b4fff4-47c0-4a4a-b4ee-4363f2269a17")
                        },
                        new
                        {
                            Id = new Guid("b6bed543-db4c-49cd-9ac5-2c1d33348f66"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            TextContentId = new Guid("cec2682c-05e0-46c8-86eb-c0fb91a0981e")
                        },
                        new
                        {
                            Id = new Guid("bc03cecb-b139-4707-842b-7eb72a751e51"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            TextContentId = new Guid("e613ebfd-b8e9-47ad-8c9c-03afd1765e49")
                        },
                        new
                        {
                            Id = new Guid("d36697b8-f28e-4b8c-9f1c-0016ee69a443"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            TextContentId = new Guid("98db651c-cca1-465c-a19c-c07fc7fe020b")
                        },
                        new
                        {
                            Id = new Guid("44fa41bc-be85-4546-85a5-e01e22d212bf"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            TextContentId = new Guid("dcf71aaa-01f7-4db0-a45e-b15baef1c52e")
                        },
                        new
                        {
                            Id = new Guid("fab94f10-c99b-47b9-8fcf-5ba1d43f04aa"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            TextContentId = new Guid("4d4621be-ac40-49f4-88bb-05e2c697a48a")
                        },
                        new
                        {
                            Id = new Guid("1dd8b922-7eb4-4280-b83f-bcdf6e864df4"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            TextContentId = new Guid("67a63bd5-f566-44dc-adf6-393268c35b3e")
                        },
                        new
                        {
                            Id = new Guid("b9df44ff-b58d-46e5-88a2-85d55cc0fca0"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            TextContentId = new Guid("4922b1cf-4898-4334-8b13-fdde2d12bbb8")
                        },
                        new
                        {
                            Id = new Guid("db92431a-4f15-46b1-806c-c335008a73cf"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            TextContentId = new Guid("90a56a33-e4c3-48dd-ac0c-d321d6db9dc9")
                        },
                        new
                        {
                            Id = new Guid("0bf93ac5-e670-4b3a-b08e-3bb001e8a13b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            TextContentId = new Guid("92e2247b-308d-477e-aeaf-6fb2a54b5367")
                        },
                        new
                        {
                            Id = new Guid("cad3541a-9f1d-4451-9f66-cbfcb807d4f6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            TextContentId = new Guid("93785566-68eb-4b4f-a789-dbe3ecc78a63")
                        },
                        new
                        {
                            Id = new Guid("90d2884f-89fc-4842-a04e-53094163c168"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            TextContentId = new Guid("58062c16-6c23-43a9-84c0-8d2569fdab6b")
                        },
                        new
                        {
                            Id = new Guid("eb958ec6-e498-43bd-b544-420fbe1fc8da"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            TextContentId = new Guid("3af96568-7b31-49f4-814a-1f0740bb1a08")
                        },
                        new
                        {
                            Id = new Guid("85c052a9-de87-4009-9e4b-fd82a68fedac"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            TextContentId = new Guid("755a0284-e567-49c0-a355-5a84be5c0e4c")
                        },
                        new
                        {
                            Id = new Guid("8d1432c4-221a-4a6b-9f5f-a7b4a700de0a"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            TextContentId = new Guid("63fdf9d4-e821-4795-8e12-4721acd70c42")
                        },
                        new
                        {
                            Id = new Guid("50d9124b-9fdc-4675-8d19-76b3be05a620"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            TextContentId = new Guid("336179f6-7076-454e-9e2a-04c3290a598a")
                        },
                        new
                        {
                            Id = new Guid("a30f143f-fdd8-4215-a7ba-e2be6ef67cc0"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            TextContentId = new Guid("37f7bff8-536e-4da7-a0c3-0b40a39ac24e")
                        },
                        new
                        {
                            Id = new Guid("e5abc012-5be8-4820-be44-482b5bca0934"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            TextContentId = new Guid("6aea269f-e6ec-4329-822a-eb7b88a5df85")
                        },
                        new
                        {
                            Id = new Guid("68d3f6b8-d290-4565-8dce-4b3d797a8523"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            TextContentId = new Guid("da0d0b06-7631-4238-b8ff-4305e74e84ca")
                        },
                        new
                        {
                            Id = new Guid("29e440f0-91bd-4645-9648-ffe9b93c17d6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            TextContentId = new Guid("86677fe9-774d-416f-9c4c-005c83770952")
                        },
                        new
                        {
                            Id = new Guid("a7300e0e-0151-4c88-8f87-4450296d069e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            TextContentId = new Guid("2d61858e-a017-4283-a515-efbb98e8056b")
                        },
                        new
                        {
                            Id = new Guid("fb34cd67-27a1-4ff4-8603-c0dc7189c96c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            TextContentId = new Guid("aecc275b-1c3e-4cfa-abe3-289fd0165a3f")
                        },
                        new
                        {
                            Id = new Guid("55eca8fd-fec9-40f4-a6a9-61503facfc9a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            TextContentId = new Guid("b08eb7d1-8cf8-4b06-a01b-65e9cd549ada")
                        },
                        new
                        {
                            Id = new Guid("2a924617-b363-411f-be82-3800d067600e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            TextContentId = new Guid("d192f6ae-1293-4a2e-b315-fe892b6e7fa9")
                        },
                        new
                        {
                            Id = new Guid("ea87b757-5aa6-45f2-b0b7-4157573da16d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            TextContentId = new Guid("151328e0-b0f3-4b95-afc1-834c9808c1a7")
                        },
                        new
                        {
                            Id = new Guid("4e0b7f13-0961-48ec-97ba-0ae654de2b74"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            TextContentId = new Guid("9526bf44-80c2-4caa-8a67-e8fe17ab0b8d")
                        },
                        new
                        {
                            Id = new Guid("11508755-d3d2-460b-9599-01aefdfd45e2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            TextContentId = new Guid("c65c6d51-d7a7-48c7-8902-46ed67f30a0a")
                        },
                        new
                        {
                            Id = new Guid("34a3e089-4f99-40b9-9c31-bbc605a9a95a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            TextContentId = new Guid("91c46238-0b3a-441f-8913-d63db690811e")
                        },
                        new
                        {
                            Id = new Guid("4e856ff0-4690-4629-a49c-8a38a355ac63"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            TextContentId = new Guid("b5ac5cb2-8ddc-4e91-bb9f-fbc4b44bda23")
                        },
                        new
                        {
                            Id = new Guid("68afb253-a774-4005-b57f-709be9d04529"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            TextContentId = new Guid("c203a24c-377c-412c-997a-21d4acb13924")
                        },
                        new
                        {
                            Id = new Guid("856ee462-65a9-46fa-a5ea-e8bcaa95c342"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            TextContentId = new Guid("25fa0ca1-a3df-4078-aa6f-1709de7b8b51")
                        },
                        new
                        {
                            Id = new Guid("ab68a6a8-1df1-43f8-bd09-6f6dd58ff897"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            TextContentId = new Guid("1cb574ec-2571-4daf-a662-5af9fe3f508b")
                        },
                        new
                        {
                            Id = new Guid("c72b8e6b-f561-407c-9570-941b707b728b"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            TextContentId = new Guid("3932a938-8dcf-45b1-84de-ffe18a95308f")
                        },
                        new
                        {
                            Id = new Guid("257d72a3-becd-47d3-a8d0-49445c3e8fed"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            TextContentId = new Guid("48263d81-a784-45fe-9eae-57e97cfa9c0b")
                        },
                        new
                        {
                            Id = new Guid("170b66b7-b45d-4053-8a8b-c2446fd92683"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            TextContentId = new Guid("2a74bfc8-39d3-4073-8095-94ab266239fd")
                        },
                        new
                        {
                            Id = new Guid("139eb1aa-eacf-4c8e-8927-fe8de5b755fb"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            TextContentId = new Guid("0f3bd82f-bb96-43c5-b497-3b295d7d1ce6")
                        },
                        new
                        {
                            Id = new Guid("f986b5b0-d075-45ef-a795-19b33f252b54"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            TextContentId = new Guid("e5cf2b82-a953-445e-90df-87195cf5f56a")
                        },
                        new
                        {
                            Id = new Guid("64185bbc-4975-426b-91f3-27a7ccd428be"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            TextContentId = new Guid("488e500f-403b-4ff3-8f0e-7486e318479a")
                        },
                        new
                        {
                            Id = new Guid("9a6b22b2-3a8f-4c77-be97-91dc390bb1c0"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            TextContentId = new Guid("1c535693-8b38-4061-9c38-7270fa2b934c")
                        },
                        new
                        {
                            Id = new Guid("915e630c-fc1d-44e7-a1bb-9d2e107322bb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            TextContentId = new Guid("753cf316-3508-44b8-a0d5-65c361b7bd20")
                        },
                        new
                        {
                            Id = new Guid("3c9fbff0-06d3-4318-8c07-cc5ae4dd3b54"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            TextContentId = new Guid("f501864c-b0de-451c-bdc9-2e1187d4409f")
                        },
                        new
                        {
                            Id = new Guid("5b764eb0-63b1-4596-8634-98d88022b8ac"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            TextContentId = new Guid("b88c80fd-61b4-423a-9fbb-cb13d0eeb7f7")
                        },
                        new
                        {
                            Id = new Guid("439830a9-e2ab-410e-a669-ddf87f95fd6e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            TextContentId = new Guid("4af16ecd-c5e1-4e70-81de-942b39fe3ecb")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 533, DateTimeKind.Local).AddTicks(9745),
                            ExamNumber = 1,
                            ExamType = 2,
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 533, DateTimeKind.Local).AddTicks(9754)
                        },
                        new
                        {
                            Id = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3778),
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3780)
                        },
                        new
                        {
                            Id = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3788),
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3789)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7653b46-303a-4f29-853a-171852129c6b"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(6259),
                            EnunciatedId = new Guid("03039ee2-368c-461b-b886-21849f52403c"),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            Index = 0,
                            SubjectId = new Guid("8a53f376-b123-42aa-a454-9d8eb53a8912"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(6265)
                        },
                        new
                        {
                            Id = new Guid("0244bb6c-4ae0-43d5-a630-5eb07c843ed7"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8857),
                            EnunciatedId = new Guid("858ee0e8-2bd9-4946-ac4f-b39a16bd2665"),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            Index = 1,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8862)
                        },
                        new
                        {
                            Id = new Guid("5385fcaa-3d87-4e6e-a003-7c4a9b3ff496"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8880),
                            EnunciatedId = new Guid("5ecc6019-2c21-4697-a6d8-ed2269b36804"),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            Index = 2,
                            SubjectId = new Guid("4347dd12-7802-4daa-a0ec-3363d615783e"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8881)
                        },
                        new
                        {
                            Id = new Guid("1b954b4d-0733-4ab8-b85a-79532d12b1fb"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8894),
                            EnunciatedId = new Guid("12d88cf6-24e6-4d54-957e-4e122e68223f"),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            Index = 3,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8894)
                        },
                        new
                        {
                            Id = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8959),
                            EnunciatedId = new Guid("8733649f-56b9-4cbe-8573-d8036445afad"),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            Index = 0,
                            SubjectId = new Guid("8a53f376-b123-42aa-a454-9d8eb53a8912"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8961)
                        },
                        new
                        {
                            Id = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8975),
                            EnunciatedId = new Guid("3d814d32-d8c3-4588-b7f5-4eb076a23bc0"),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            Index = 1,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8976)
                        },
                        new
                        {
                            Id = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8989),
                            EnunciatedId = new Guid("4d73cee0-128e-457d-9d8f-41e2aa53d848"),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            Index = 2,
                            SubjectId = new Guid("4347dd12-7802-4daa-a0ec-3363d615783e"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(8990)
                        },
                        new
                        {
                            Id = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9002),
                            EnunciatedId = new Guid("a5dd6bfc-9be5-497e-bd0b-845244fe11b8"),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            Index = 3,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9003)
                        },
                        new
                        {
                            Id = new Guid("e1d785ad-339f-494e-8bd3-3020db419aaf"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9017),
                            EnunciatedId = new Guid("2a40a266-9bdb-49e8-8d64-826e2c2ea7b3"),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            Index = 0,
                            SubjectId = new Guid("8a53f376-b123-42aa-a454-9d8eb53a8912"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9018)
                        },
                        new
                        {
                            Id = new Guid("29bb9c83-fb13-4883-9995-e701f4d05fb5"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9030),
                            EnunciatedId = new Guid("c50c0197-63f5-4981-8bbe-9d5d6a15110c"),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            Index = 1,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9031)
                        },
                        new
                        {
                            Id = new Guid("217a3067-4d5f-45d7-ad35-678eb9b0367c"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9045),
                            EnunciatedId = new Guid("46c24ece-b49c-4dfa-8a7d-2a13c72f180d"),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            Index = 2,
                            SubjectId = new Guid("4347dd12-7802-4daa-a0ec-3363d615783e"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9046)
                        },
                        new
                        {
                            Id = new Guid("d0264f1a-051a-4704-ae6d-c6b8c5f7a04a"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9091),
                            EnunciatedId = new Guid("86e28e5a-e625-4a47-a0a0-c76f70401ff1"),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            Index = 3,
                            SubjectId = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 525, DateTimeKind.Local).AddTicks(9092)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55dbab28-495c-4499-bb50-94046be16040"),
                            ChosenAlternativeId = new Guid("d36697b8-f28e-4b8c-9f1c-0016ee69a443"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(7061),
                            QuestionId = new Guid("d689513c-4d22-41fb-9f46-f1c0ee889978"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(7076),
                            UserId = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d")
                        },
                        new
                        {
                            Id = new Guid("7593c84d-dd6c-4249-b468-127f1ced893f"),
                            ChosenAlternativeId = new Guid("db92431a-4f15-46b1-806c-c335008a73cf"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8480),
                            QuestionId = new Guid("2482ff14-c029-4cbb-a8b3-e8ace94b6e85"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8486),
                            UserId = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d")
                        },
                        new
                        {
                            Id = new Guid("e7a0aef5-1a18-4ae6-b034-5b868a23a339"),
                            ChosenAlternativeId = new Guid("85c052a9-de87-4009-9e4b-fd82a68fedac"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8501),
                            QuestionId = new Guid("b8cf34cc-aa69-45a2-9c7a-63f1e8734145"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8502),
                            UserId = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d")
                        },
                        new
                        {
                            Id = new Guid("715b8acc-e7f2-4fd5-87c0-0b917bb73968"),
                            ChosenAlternativeId = new Guid("68d3f6b8-d290-4565-8dce-4b3d797a8523"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8505),
                            QuestionId = new Guid("193f5127-3df9-4abe-a1db-e90cb99d9467"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 541, DateTimeKind.Local).AddTicks(8506),
                            UserId = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a53f376-b123-42aa-a454-9d8eb53a8912"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(5682),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(6143)
                        },
                        new
                        {
                            Id = new Guid("4347dd12-7802-4daa-a0ec-3363d615783e"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(7005),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(7009)
                        },
                        new
                        {
                            Id = new Guid("8bcfe5bd-5fb1-4098-8792-af2109fb5829"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(7012),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("8a53f376-b123-42aa-a454-9d8eb53a8912"),
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 524, DateTimeKind.Local).AddTicks(7013)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a1eaa66-ada9-4627-8023-5ceebb22d3d1"),
                            CloseDate = new DateTime(2021, 5, 30, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            OpenDate = new DateTime(2021, 5, 30, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("6ea4cf99-2fb3-414b-89d2-c19c9b07a3e5"),
                            CloseDate = new DateTime(2021, 5, 31, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("a0248834-cb91-47ad-8ebf-c297a43b83da"),
                            OpenDate = new DateTime(2021, 5, 31, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("a3c9550d-da20-4294-96ff-8ba923a42061"),
                            CloseDate = new DateTime(2021, 5, 26, 8, 47, 30, 534, DateTimeKind.Local).AddTicks(3746),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            OpenDate = new DateTime(2021, 5, 26, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3746)
                        },
                        new
                        {
                            Id = new Guid("fdb2dd59-500e-4abc-8cd8-dcc2e33b3dd5"),
                            CloseDate = new DateTime(2021, 5, 27, 6, 47, 30, 534, DateTimeKind.Local).AddTicks(3746),
                            ExamId = new Guid("68c0dc0e-b2a8-42d2-84ee-9bd67935442a"),
                            OpenDate = new DateTime(2021, 5, 27, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3746)
                        },
                        new
                        {
                            Id = new Guid("fd6e2189-0a6b-44f8-a406-f7b3783d6b33"),
                            CloseDate = new DateTime(2021, 5, 24, 6, 47, 30, 534, DateTimeKind.Local).AddTicks(3783),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            OpenDate = new DateTime(2021, 5, 24, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3783)
                        },
                        new
                        {
                            Id = new Guid("cc84b322-6282-4462-a357-d56509c92fda"),
                            CloseDate = new DateTime(2021, 5, 25, 6, 47, 30, 534, DateTimeKind.Local).AddTicks(3783),
                            ExamId = new Guid("974ec3e7-820e-4c93-8baa-9a0e6afe1869"),
                            OpenDate = new DateTime(2021, 5, 25, 4, 47, 30, 534, DateTimeKind.Local).AddTicks(3783)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03039ee2-368c-461b-b886-21849f52403c"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("858ee0e8-2bd9-4946-ac4f-b39a16bd2665"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("5ecc6019-2c21-4697-a6d8-ed2269b36804"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("12d88cf6-24e6-4d54-957e-4e122e68223f"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("8733649f-56b9-4cbe-8573-d8036445afad"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3d814d32-d8c3-4588-b7f5-4eb076a23bc0"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4d73cee0-128e-457d-9d8f-41e2aa53d848"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("a5dd6bfc-9be5-497e-bd0b-845244fe11b8"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("2a40a266-9bdb-49e8-8d64-826e2c2ea7b3"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("c50c0197-63f5-4981-8bbe-9d5d6a15110c"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("46c24ece-b49c-4dfa-8a7d-2a13c72f180d"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("86e28e5a-e625-4a47-a0a0-c76f70401ff1"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("ed803340-dcd7-4ef1-89df-0a463570de2a"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("a50c5b90-4796-4aae-96b8-bc4f810b8c7a"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("41793612-5dad-4819-854a-8e9d7a258d55"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("dc35735c-1b52-4a3e-8702-d3df6e7423e3"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("c76fa30b-428a-4990-a201-8e8362507f2f"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("3ae998f6-35d1-4894-bce8-5adf5a4e6643"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("06bc6e27-e8cc-489f-b938-ce4a62daf32e"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("a5b036ff-4400-4ad4-aba0-e3769d160ccc"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("bce6f353-79d2-4a45-bd69-3e9b628dcd3b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("a9145e8c-4d77-4860-a7d5-2bc46770ec67"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("b061ac1f-fd15-4230-a90e-4586f70e3c35"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("4a33e538-7c62-4ae7-8162-334b37c0e257"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("a0912b7a-1b6f-4e2f-9986-c90cc16d03ea"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("b5fa6980-ca54-4632-bcd0-7aceba3efe2b"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("886c768a-8979-45c3-af8e-44fbf7177b3f"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("e7bd8893-6224-41cd-85b9-44da321b486a"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("9d2b6aa5-1be8-4a0f-b938-585070b25c64"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("58b4fff4-47c0-4a4a-b4ee-4363f2269a17"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("cec2682c-05e0-46c8-86eb-c0fb91a0981e"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("e613ebfd-b8e9-47ad-8c9c-03afd1765e49"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("98db651c-cca1-465c-a19c-c07fc7fe020b"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("dcf71aaa-01f7-4db0-a45e-b15baef1c52e"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("4d4621be-ac40-49f4-88bb-05e2c697a48a"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("67a63bd5-f566-44dc-adf6-393268c35b3e"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("4922b1cf-4898-4334-8b13-fdde2d12bbb8"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("90a56a33-e4c3-48dd-ac0c-d321d6db9dc9"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("92e2247b-308d-477e-aeaf-6fb2a54b5367"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("93785566-68eb-4b4f-a789-dbe3ecc78a63"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("58062c16-6c23-43a9-84c0-8d2569fdab6b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("3af96568-7b31-49f4-814a-1f0740bb1a08"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("755a0284-e567-49c0-a355-5a84be5c0e4c"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("63fdf9d4-e821-4795-8e12-4721acd70c42"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("336179f6-7076-454e-9e2a-04c3290a598a"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("37f7bff8-536e-4da7-a0c3-0b40a39ac24e"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("6aea269f-e6ec-4329-822a-eb7b88a5df85"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("da0d0b06-7631-4238-b8ff-4305e74e84ca"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("86677fe9-774d-416f-9c4c-005c83770952"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("2d61858e-a017-4283-a515-efbb98e8056b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("aecc275b-1c3e-4cfa-abe3-289fd0165a3f"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("b08eb7d1-8cf8-4b06-a01b-65e9cd549ada"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("d192f6ae-1293-4a2e-b315-fe892b6e7fa9"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("151328e0-b0f3-4b95-afc1-834c9808c1a7"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("9526bf44-80c2-4caa-8a67-e8fe17ab0b8d"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("c65c6d51-d7a7-48c7-8902-46ed67f30a0a"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("91c46238-0b3a-441f-8913-d63db690811e"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("b5ac5cb2-8ddc-4e91-bb9f-fbc4b44bda23"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("c203a24c-377c-412c-997a-21d4acb13924"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("25fa0ca1-a3df-4078-aa6f-1709de7b8b51"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("1cb574ec-2571-4daf-a662-5af9fe3f508b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("3932a938-8dcf-45b1-84de-ffe18a95308f"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("48263d81-a784-45fe-9eae-57e97cfa9c0b"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("2a74bfc8-39d3-4073-8095-94ab266239fd"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("0f3bd82f-bb96-43c5-b497-3b295d7d1ce6"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("e5cf2b82-a953-445e-90df-87195cf5f56a"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("488e500f-403b-4ff3-8f0e-7486e318479a"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("1c535693-8b38-4061-9c38-7270fa2b934c"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("753cf316-3508-44b8-a0d5-65c361b7bd20"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("f501864c-b0de-451c-bdc9-2e1187d4409f"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("b88c80fd-61b4-423a-9fbb-cb13d0eeb7f7"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("4af16ecd-c5e1-4e70-81de-942b39fe3ecb"),
                            Content = "60°"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 533, DateTimeKind.Local).AddTicks(2612),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 26, 4, 47, 30, 533, DateTimeKind.Local).AddTicks(2628)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("char(7)")
                                .HasColumnName("address.number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("cef7157f-38f0-4b0d-bf04-bcce3550a40d"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
