// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210824221944_examFatherModule")]
    partial class examFatherModule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a967d9f0-00af-4e29-9590-3e88e6814b22"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            TextContentId = new Guid("20536bdf-8f81-477d-84c4-4b68e30964b4")
                        },
                        new
                        {
                            Id = new Guid("c0f1974c-f444-47dd-a7f4-c8c8c91e4a51"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            TextContentId = new Guid("c346d4c7-9416-44f0-9b81-c802f2192d0d")
                        },
                        new
                        {
                            Id = new Guid("454d70cf-2862-40d0-93d3-87c28430b6c5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            TextContentId = new Guid("6535c1f4-8edc-4676-89f5-091b23beeaf0")
                        },
                        new
                        {
                            Id = new Guid("8cb5db6a-0442-4155-9d1b-e5e95176ceb1"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            TextContentId = new Guid("d03b7c91-e4aa-48c6-8972-efd8cdf25476")
                        },
                        new
                        {
                            Id = new Guid("797c74ab-4252-4396-98be-831d5e27c661"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            TextContentId = new Guid("381b97c0-ef39-4b9f-a83e-1864f8326f6a")
                        },
                        new
                        {
                            Id = new Guid("378494a1-d650-4d44-b24b-7f19eabff388"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            TextContentId = new Guid("c042d1dc-1cfb-49e7-8ee1-037f485f8920")
                        },
                        new
                        {
                            Id = new Guid("09747ea5-8ad1-4c29-8073-2b0c073ba730"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            TextContentId = new Guid("ce627606-b41f-4896-a311-6783f8c27340")
                        },
                        new
                        {
                            Id = new Guid("7fb87752-aef1-4c2b-8409-3d83b574f7e5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            TextContentId = new Guid("d6abb460-4201-4d4f-8fe0-ecaed255f35c")
                        },
                        new
                        {
                            Id = new Guid("0645a8d4-083e-40f0-b43a-90f5a63e5559"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            TextContentId = new Guid("51a11976-7e6d-48c6-bd0a-54e3787d43bf")
                        },
                        new
                        {
                            Id = new Guid("e2a4d9b6-e649-4e33-ae65-47122c9fccf8"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            TextContentId = new Guid("f2e1c5ba-2fd7-438d-941a-4b306098b32d")
                        },
                        new
                        {
                            Id = new Guid("2f309afb-68ac-403e-a18a-daea73960f40"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            TextContentId = new Guid("0096f9d7-74ce-4aa7-8a2f-3d6a3f7dde1e")
                        },
                        new
                        {
                            Id = new Guid("76494bc6-e642-44ad-9f18-77ce61aab096"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            TextContentId = new Guid("dc095436-10a0-4994-b62a-2d40cce52921")
                        },
                        new
                        {
                            Id = new Guid("d85ab6fb-70f0-4974-b506-402fcb1a10a5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            TextContentId = new Guid("82a599ac-c3c2-475f-9f9b-279546d7ccbf")
                        },
                        new
                        {
                            Id = new Guid("e12da43e-87ac-49e7-9de9-a3bdd610ab50"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            TextContentId = new Guid("bb05ca6a-f303-41ec-b4c8-b44536c23575")
                        },
                        new
                        {
                            Id = new Guid("415530ea-ee2c-43d7-9527-819a7e727c66"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            TextContentId = new Guid("b8031b9d-bda3-45fb-b4fa-108c116fecd4")
                        },
                        new
                        {
                            Id = new Guid("5977ac25-fd2c-4a88-9b56-658af982ef41"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            TextContentId = new Guid("f4b2b8fa-6317-4bb6-8810-4808a5fb1bc5")
                        },
                        new
                        {
                            Id = new Guid("564e5d77-eeb4-4f33-a17b-602772b81cbc"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            TextContentId = new Guid("49c623cb-29e5-4f7e-bf8d-962db0fa14bc")
                        },
                        new
                        {
                            Id = new Guid("b6845666-db8a-411c-957b-418578fbd9f0"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            TextContentId = new Guid("91173c7c-aabb-4887-a567-3a666d0302a2")
                        },
                        new
                        {
                            Id = new Guid("70bae2ac-d6b5-40a4-b2b1-07f3884c4c96"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            TextContentId = new Guid("c5db1648-1e0c-48d5-bed1-c7e68256a627")
                        },
                        new
                        {
                            Id = new Guid("913e1c1e-858e-415f-9335-e7f7d868dfb6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            TextContentId = new Guid("97dac685-3477-4875-a33b-6e8c349e9083")
                        },
                        new
                        {
                            Id = new Guid("caf47ca8-0d13-4d12-ba24-13d57d5ed2bd"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            TextContentId = new Guid("993e21b7-50e0-4efe-b136-cc3885c46858")
                        },
                        new
                        {
                            Id = new Guid("b2b1c61a-db61-4a88-8577-2902d42d3ec4"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            TextContentId = new Guid("74f78f61-7fad-4755-82e2-8a368b275cc7")
                        },
                        new
                        {
                            Id = new Guid("82b74127-5353-4ee6-bb54-21b6b31918f8"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            TextContentId = new Guid("352a4af7-1ef8-464e-84ca-775e9a4d0039")
                        },
                        new
                        {
                            Id = new Guid("7e4921a1-380b-44ac-a703-f0017607c7e7"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            TextContentId = new Guid("c4eb295a-290f-41af-a698-d693654ee8d4")
                        },
                        new
                        {
                            Id = new Guid("4cd84e7c-8a34-4859-a706-cfa11c89902f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            TextContentId = new Guid("6b21c0cd-1db9-48b8-ad59-42f8adad9ac2")
                        },
                        new
                        {
                            Id = new Guid("38f1adb5-2c77-4790-bdf1-d0167e3763cc"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            TextContentId = new Guid("e137ed45-89c6-43e8-9bf9-cffab21fcd72")
                        },
                        new
                        {
                            Id = new Guid("318b68e9-8b11-4165-9fc6-307e8fe387ed"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            TextContentId = new Guid("73adf393-0430-4c2c-a151-e1054d0b2a81")
                        },
                        new
                        {
                            Id = new Guid("0aa5ffb8-c55a-48f2-af11-1ba6875bf70a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            TextContentId = new Guid("43ce1afb-92dd-4080-9c82-a123689c13cb")
                        },
                        new
                        {
                            Id = new Guid("dacc8008-9930-4261-a460-2f0c2e4a182c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            TextContentId = new Guid("ff17e4be-5b28-45dc-bcad-611c3fce7c74")
                        },
                        new
                        {
                            Id = new Guid("d5ed1616-fcee-4797-89da-e9bdce289f63"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            TextContentId = new Guid("47fcae00-5bb9-4bc5-8594-db07833f88e4")
                        },
                        new
                        {
                            Id = new Guid("58f8db34-df67-42d5-ad17-9f9f744537b2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            TextContentId = new Guid("ee1a5d29-920b-44bf-a986-baa5182651cb")
                        },
                        new
                        {
                            Id = new Guid("9ccfbf94-5cd5-43b5-9eae-0e5194cbf920"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            TextContentId = new Guid("191fc247-df3f-45cc-90dd-1a6b1ea37a14")
                        },
                        new
                        {
                            Id = new Guid("0f80a1af-1156-45a3-a1df-989685c1403f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            TextContentId = new Guid("812def4d-5a00-46e2-b0d4-8820676f65fd")
                        },
                        new
                        {
                            Id = new Guid("a7a6f9df-47d5-455a-8656-2ac6ab478183"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            TextContentId = new Guid("a0c1f048-f0b6-455e-a5ec-0a7fa8d7cab9")
                        },
                        new
                        {
                            Id = new Guid("bc7722aa-5340-4f67-9b34-311542b55214"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            TextContentId = new Guid("85fb3f46-1200-4119-b0fb-4d305aee946b")
                        },
                        new
                        {
                            Id = new Guid("afd076a9-1259-4e79-8f10-c5235e8abe28"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            TextContentId = new Guid("109144c7-bf60-41a7-823c-5d49dbe50fd7")
                        },
                        new
                        {
                            Id = new Guid("a9a2b0b5-a1ba-4a22-a44d-fd61100d7247"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            TextContentId = new Guid("f2aee079-2fc8-4249-931a-8fa9eb56c0b6")
                        },
                        new
                        {
                            Id = new Guid("7b20e11c-f204-43f9-b4c9-9ee083c4411e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            TextContentId = new Guid("c3aa9184-f2b3-462e-bea3-26a7e9898682")
                        },
                        new
                        {
                            Id = new Guid("af8df48a-ffea-4f26-bf9b-cdd6c33844d6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            TextContentId = new Guid("b1675914-b577-42df-ac5d-c25ae5f37d69")
                        },
                        new
                        {
                            Id = new Guid("37c96d05-5c96-4244-b21f-97d559fcc5f4"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            TextContentId = new Guid("9b125ae2-e56c-45d8-8bfa-5699f70dd09c")
                        },
                        new
                        {
                            Id = new Guid("ac66f2fe-ffa9-4a58-8438-9513048ad321"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            TextContentId = new Guid("65d0632e-a28b-4f3d-b648-1605da2eaf27")
                        },
                        new
                        {
                            Id = new Guid("033f8fe2-906c-41be-b261-2e872537885c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            TextContentId = new Guid("2be9fe46-c453-45a7-96f2-fbf2ddb61f74")
                        },
                        new
                        {
                            Id = new Guid("7671463d-a2e6-46d9-8a03-53064a9eb90b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            TextContentId = new Guid("418f331a-5bf6-45b7-a39b-36363583402d")
                        },
                        new
                        {
                            Id = new Guid("7ab68517-19b8-4d5b-8411-c62372be3bd0"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            TextContentId = new Guid("8f4423d4-cc3a-43e0-b3fa-c2abb605aa30")
                        },
                        new
                        {
                            Id = new Guid("605d5cd6-7483-45eb-a2da-165fd0f7bbc2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            TextContentId = new Guid("b85e2a6c-5110-46a0-8512-0b7845deac73")
                        },
                        new
                        {
                            Id = new Guid("2be94c11-3696-4756-87f1-defaa33b40a4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            TextContentId = new Guid("ca8a53d6-82da-489c-bd64-ca6730429681")
                        },
                        new
                        {
                            Id = new Guid("711e4d66-aa38-446e-9069-adb4a9a903fb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            TextContentId = new Guid("c79e3108-3c81-4de8-9578-baf91981f1f4")
                        },
                        new
                        {
                            Id = new Guid("9c193b1f-2f40-46d9-b19c-71d368dc1fdd"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            TextContentId = new Guid("36f66b67-b31f-4d98-8e82-8e246273fbb7")
                        },
                        new
                        {
                            Id = new Guid("d0d6638d-95e0-451c-a96b-5f47a17302bf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            TextContentId = new Guid("a43352af-c21b-43b3-8270-a354249a6948")
                        },
                        new
                        {
                            Id = new Guid("76698ba0-b8ba-4db7-aafc-2cab86071416"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            TextContentId = new Guid("9da93404-c7fa-4a5c-867b-7c63528cb31d")
                        },
                        new
                        {
                            Id = new Guid("415f01db-507b-44ab-854b-6b47895a0ce8"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            TextContentId = new Guid("14f05f80-89ee-4331-b6b2-7a0f3c425855")
                        },
                        new
                        {
                            Id = new Guid("e57c2fe8-e2d7-4b08-8a0a-af3913191506"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            TextContentId = new Guid("7301483a-cafd-4197-ade4-1af383bae080")
                        },
                        new
                        {
                            Id = new Guid("3ab018e8-5d73-4464-b865-93034a521d39"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            TextContentId = new Guid("c6a59263-16f6-4e2a-9508-6b584d8075d9")
                        },
                        new
                        {
                            Id = new Guid("ac1e7795-1c0e-4a4e-96b0-d5031f120aa1"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            TextContentId = new Guid("657151f5-2625-49ef-bfc5-8b505394952d")
                        },
                        new
                        {
                            Id = new Guid("6322a5a0-90d4-4cd4-adca-e5e02fa20b7d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            TextContentId = new Guid("e93702e1-d8a1-4783-9313-fb7dbd63d2aa")
                        },
                        new
                        {
                            Id = new Guid("bd9d380c-fcc1-43b8-ad84-13c132f3760c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            TextContentId = new Guid("4009b1d1-9765-4a94-a50c-6269a0adeef3")
                        },
                        new
                        {
                            Id = new Guid("2d368d3b-65f6-4dc1-9fbd-b35547b43633"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            TextContentId = new Guid("d67d3f86-5461-4e06-9921-11d3a9d88072")
                        },
                        new
                        {
                            Id = new Guid("0dbc299f-d541-4973-8095-3bb235485c12"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            TextContentId = new Guid("cfd8f659-42b7-41ca-a329-3bfe5056dafc")
                        },
                        new
                        {
                            Id = new Guid("b44adc57-485b-443d-9f5a-b97bad5f5580"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            TextContentId = new Guid("976ff0c9-5736-4957-b730-372ef45564bd")
                        },
                        new
                        {
                            Id = new Guid("24eddcf7-dfc4-40c1-ba44-36850632b1b4"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            TextContentId = new Guid("e8edc645-e5f1-4aab-9ce9-36dac1e470de")
                        },
                        new
                        {
                            Id = new Guid("46441540-aa2c-40f4-9312-20ab49fffec7"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            TextContentId = new Guid("614a5e35-aeb4-474c-9989-a81f76fc1259")
                        },
                        new
                        {
                            Id = new Guid("0c889389-92ea-42b1-954d-eba83d0fbc36"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            TextContentId = new Guid("80910323-ecae-414f-9417-12286ab923ea")
                        },
                        new
                        {
                            Id = new Guid("24fd4a9c-1a9f-4b3f-a790-ddb1790190aa"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            TextContentId = new Guid("9e097f71-96ae-4325-acc1-5dc84ef2b18a")
                        },
                        new
                        {
                            Id = new Guid("3b432b20-3eb8-489e-80f9-f52ac62109a6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            TextContentId = new Guid("7d11008d-b0c2-4021-98d8-261518c6ff7b")
                        },
                        new
                        {
                            Id = new Guid("bfe3a305-0bbf-4997-9483-385fcf1e400f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            TextContentId = new Guid("7106ba6c-f0cb-4510-b8cb-0419d41a27d5")
                        },
                        new
                        {
                            Id = new Guid("1248908d-1b01-4757-b55b-08afab2efe95"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            TextContentId = new Guid("98a7148b-6bb5-4795-b067-a5740a15be24")
                        },
                        new
                        {
                            Id = new Guid("0bda1b5b-9cb3-4aa2-a472-f2ab196988e2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            TextContentId = new Guid("f3baca77-d4ac-4f98-a186-28ac524182e3")
                        },
                        new
                        {
                            Id = new Guid("49677620-112a-41fe-ab8c-191b5154b60f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            TextContentId = new Guid("028b49ab-ff8d-4151-afec-38e1e659c584")
                        },
                        new
                        {
                            Id = new Guid("3410ab0c-ff3a-48c0-9f37-011b2fe8a934"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            TextContentId = new Guid("fecc3c4f-83bb-480e-8ce3-639d8cbaa600")
                        },
                        new
                        {
                            Id = new Guid("89d42166-781d-4c6f-bf68-ccbde0ba43bf"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            TextContentId = new Guid("10648921-532c-41ba-bee0-b4a0975e56bb")
                        },
                        new
                        {
                            Id = new Guid("fdc74669-41d8-4cbb-a974-5b760965b37b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            TextContentId = new Guid("037974ac-58e4-4a1c-80d9-686caefbf614")
                        },
                        new
                        {
                            Id = new Guid("0956be28-45f2-4748-a4b9-333a733b3c0c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            TextContentId = new Guid("eee25dd0-14c4-43ba-8b50-ead27fe08b22")
                        },
                        new
                        {
                            Id = new Guid("a0359eb9-6a7a-43b2-bff4-baf38a21fdb4"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            TextContentId = new Guid("350d29a8-90de-4869-9e94-ed07c2083825")
                        },
                        new
                        {
                            Id = new Guid("c71b7028-63f1-4034-b2a0-5fbef1ace034"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            TextContentId = new Guid("052395e0-195d-4fd6-90df-8bb80dd61959")
                        },
                        new
                        {
                            Id = new Guid("30401158-612c-4a98-a011-f7ed5df85e2a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            TextContentId = new Guid("79334c4a-cee6-4328-8258-97b984520729")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ChildExamModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_exam_module_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamTopic")
                        .HasColumnType("integer")
                        .HasColumnName("exam_topic");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<Guid?>("FatherExamModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("father_exam_module_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.HasIndex("ChildExamModuleId")
                        .HasDatabaseName("ix_exam_child_exam_module_id");

                    b.HasIndex("FatherExamModuleId")
                        .IsUnique()
                        .HasDatabaseName("ix_exam_father_exam_module_id");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(5178),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamTopic = 3,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8832),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamTopic = 3,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8833)
                        },
                        new
                        {
                            Id = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8851),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamTopic = 3,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8852)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c99e014-6aec-4c1a-ad56-af72af4b8870"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(2721),
                            EnunciatedId = new Guid("e9111dc3-3be6-4ade-b3c3-71cbc9e663ea"),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            Index = 0,
                            SubjectId = new Guid("255c114c-0542-45a1-8bd4-7da73f56075d"),
                            SupportingTextId = new Guid("6cc46676-399a-44ad-90c9-cc445fc18242"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(2727)
                        },
                        new
                        {
                            Id = new Guid("55a650b4-aede-4e66-b74e-0765b1d55847"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5858),
                            EnunciatedId = new Guid("524a49aa-d2f3-45f8-be49-82e253466c67"),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            Index = 1,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("73deb30c-8d71-4aba-b7ea-5a749f741b64"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5864)
                        },
                        new
                        {
                            Id = new Guid("634ef7a8-451b-4e9c-9d4e-3fe453115e83"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5879),
                            EnunciatedId = new Guid("ebb3cc67-2bda-4d13-89e0-a7f57abf9cdd"),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            Index = 2,
                            SubjectId = new Guid("0c38ec1e-ba98-4542-bcd0-8746b3c2b831"),
                            SupportingTextId = new Guid("4e5bb375-1a43-4b89-b12c-161da8563c39"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5879)
                        },
                        new
                        {
                            Id = new Guid("ce66fa6d-8554-4f0e-8219-77de48985bfc"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5938),
                            EnunciatedId = new Guid("5fc46a97-9abe-4a7c-afac-0a63de219c3b"),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            Index = 3,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("73deb30c-8d71-4aba-b7ea-5a749f741b64"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5939)
                        },
                        new
                        {
                            Id = new Guid("3b54aad1-f948-4b51-8382-bde3050bee4b"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5952),
                            EnunciatedId = new Guid("6ac67cd7-a320-466d-b215-36c9d808d9e2"),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            Index = 4,
                            SubjectId = new Guid("271fed33-f461-4445-aa6d-960cf69d69b5"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5953)
                        },
                        new
                        {
                            Id = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5967),
                            EnunciatedId = new Guid("5c0b58fd-c7b0-4330-81ea-2ab552549c4c"),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            Index = 0,
                            SubjectId = new Guid("255c114c-0542-45a1-8bd4-7da73f56075d"),
                            SupportingTextId = new Guid("745ff9b2-280f-43a1-bbfe-5dc2fbcc6d88"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5967)
                        },
                        new
                        {
                            Id = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5982),
                            EnunciatedId = new Guid("26b57fba-4c70-4cc7-8f5d-3a90399f27ee"),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            Index = 1,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("ae04d6b9-937a-4e2c-9913-6b22a29efe3d"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5983)
                        },
                        new
                        {
                            Id = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5995),
                            EnunciatedId = new Guid("fbb45eae-3d55-436f-976a-03d7d33774b0"),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            Index = 2,
                            SubjectId = new Guid("0c38ec1e-ba98-4542-bcd0-8746b3c2b831"),
                            SupportingTextId = new Guid("ecc47b98-fc2b-4e2e-8bb7-71736303b1f0"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(5996)
                        },
                        new
                        {
                            Id = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6008),
                            EnunciatedId = new Guid("09c0d02a-cf74-4d04-bed0-2a4051e4b53b"),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            Index = 3,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("ae04d6b9-937a-4e2c-9913-6b22a29efe3d"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6009)
                        },
                        new
                        {
                            Id = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6023),
                            EnunciatedId = new Guid("eb386291-41c9-4f11-b3f0-3b0d0fd91a2f"),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            Index = 4,
                            SubjectId = new Guid("271fed33-f461-4445-aa6d-960cf69d69b5"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6024)
                        },
                        new
                        {
                            Id = new Guid("fee1b3fa-30f6-4f80-8b2a-1be58a055afd"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6072),
                            EnunciatedId = new Guid("e510394e-bdef-4b9e-9b2a-375ae3dfe19d"),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            Index = 0,
                            SubjectId = new Guid("255c114c-0542-45a1-8bd4-7da73f56075d"),
                            SupportingTextId = new Guid("a7a1267b-e97c-43e6-aab7-b1dcdaf2b29b"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6072)
                        },
                        new
                        {
                            Id = new Guid("f255c080-acb5-4416-ab91-19344a69e7d9"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6087),
                            EnunciatedId = new Guid("7df1a7f6-a717-4ef0-8e14-2c9d51850419"),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            Index = 1,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("a7a1267b-e97c-43e6-aab7-b1dcdaf2b29b"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6088)
                        },
                        new
                        {
                            Id = new Guid("f6b88984-2e9e-4b1d-9ca6-b1baa6ebf001"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6100),
                            EnunciatedId = new Guid("b5c568ea-4fd7-465e-84a4-a78d582476f9"),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            Index = 2,
                            SubjectId = new Guid("0c38ec1e-ba98-4542-bcd0-8746b3c2b831"),
                            SupportingTextId = new Guid("a7a1267b-e97c-43e6-aab7-b1dcdaf2b29b"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6101)
                        },
                        new
                        {
                            Id = new Guid("2988c2f8-f0a3-4379-9f44-2473716560b5"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6113),
                            EnunciatedId = new Guid("7530c676-0ddb-4d46-9826-f4c99a78c244"),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            Index = 3,
                            SubjectId = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            SupportingTextId = new Guid("a7a1267b-e97c-43e6-aab7-b1dcdaf2b29b"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6114)
                        },
                        new
                        {
                            Id = new Guid("51def46d-4554-4ea8-86f0-bf6878c1465e"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6127),
                            EnunciatedId = new Guid("d1e85694-d789-4bfb-9f00-7efd62a41125"),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            Index = 4,
                            SubjectId = new Guid("271fed33-f461-4445-aa6d-960cf69d69b5"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 441, DateTimeKind.Local).AddTicks(6128)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c54ec65-50ab-4034-990c-3264da070cd0"),
                            ChosenAlternativeId = new Guid("38f1adb5-2c77-4790-bdf1-d0167e3763cc"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 457, DateTimeKind.Local).AddTicks(9646),
                            QuestionId = new Guid("655d9837-8c96-4637-aba1-3bd950b9538d"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 457, DateTimeKind.Local).AddTicks(9670),
                            UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480")
                        },
                        new
                        {
                            Id = new Guid("aa5eab55-643f-446a-92fb-074cd1e5a9c9"),
                            ChosenAlternativeId = new Guid("58f8db34-df67-42d5-ad17-9f9f744537b2"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1132),
                            QuestionId = new Guid("66755edb-dc2e-4204-99eb-abd34c0bbae0"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1140),
                            UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480")
                        },
                        new
                        {
                            Id = new Guid("38beff73-7120-4919-98b8-c005d6e4d55a"),
                            ChosenAlternativeId = new Guid("afd076a9-1259-4e79-8f10-c5235e8abe28"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1146),
                            QuestionId = new Guid("f3b19f35-b868-4993-b6af-c6b8c3eec55e"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1147),
                            UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480")
                        },
                        new
                        {
                            Id = new Guid("a098cac3-6c68-4be9-8a94-76fe1ad31fc2"),
                            ChosenAlternativeId = new Guid("ac66f2fe-ffa9-4a58-8438-9513048ad321"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1150),
                            QuestionId = new Guid("ac8e2eda-a856-48d5-a824-61cc951d3e86"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1151),
                            UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480")
                        },
                        new
                        {
                            Id = new Guid("701e3613-4eb5-4fb0-8f7b-64981745eab8"),
                            ChosenAlternativeId = new Guid("2be94c11-3696-4756-87f1-defaa33b40a4"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1161),
                            QuestionId = new Guid("f4ee07b8-71a5-404d-b796-62b47eb83fa2"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 458, DateTimeKind.Local).AddTicks(1162),
                            UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("255c114c-0542-45a1-8bd4-7da73f56075d"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 439, DateTimeKind.Local).AddTicks(9559),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(41)
                        },
                        new
                        {
                            Id = new Guid("0c38ec1e-ba98-4542-bcd0-8746b3c2b831"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(879),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(884)
                        },
                        new
                        {
                            Id = new Guid("bb7c03f7-5f68-4f09-a7af-821492ccfef4"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(886),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("255c114c-0542-45a1-8bd4-7da73f56075d"),
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(887)
                        },
                        new
                        {
                            Id = new Guid("271fed33-f461-4445-aa6d-960cf69d69b5"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(889),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 440, DateTimeKind.Local).AddTicks(890)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cc46676-399a-44ad-90c9-cc445fc18242"),
                            ContentId = new Guid("c4681e37-e3cb-4de5-888d-fa333782022d")
                        },
                        new
                        {
                            Id = new Guid("4e5bb375-1a43-4b89-b12c-161da8563c39"),
                            ContentId = new Guid("fa14a1e1-4626-4c02-af13-e5b8d90118e2")
                        },
                        new
                        {
                            Id = new Guid("73deb30c-8d71-4aba-b7ea-5a749f741b64"),
                            ContentId = new Guid("76bcb2f0-060d-4513-a5b8-934098434412")
                        },
                        new
                        {
                            Id = new Guid("745ff9b2-280f-43a1-bbfe-5dc2fbcc6d88"),
                            ContentId = new Guid("dac1fa55-dbda-4ea0-ad0e-44c8a85f2976")
                        },
                        new
                        {
                            Id = new Guid("ecc47b98-fc2b-4e2e-8bb7-71736303b1f0"),
                            ContentId = new Guid("b426c1c5-b0c9-49b5-b28f-200fe814558f")
                        },
                        new
                        {
                            Id = new Guid("ae04d6b9-937a-4e2c-9913-6b22a29efe3d"),
                            ContentId = new Guid("793a0130-0195-4087-ba0c-4d5f4a6166dd")
                        },
                        new
                        {
                            Id = new Guid("b0a3dd57-7047-4668-83ea-88c1235ea1ae"),
                            ContentId = new Guid("5fb2967f-bb49-4a75-9942-ab615f920d0c")
                        },
                        new
                        {
                            Id = new Guid("3c9b0829-487a-4401-8f51-22e7d8383b8c"),
                            ContentId = new Guid("ab349696-1ed8-4d9a-93ca-4428576142c8")
                        },
                        new
                        {
                            Id = new Guid("a7a1267b-e97c-43e6-aab7-b1dcdaf2b29b"),
                            ContentId = new Guid("6d7f7788-04ec-474a-a54c-b121da11038a")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("FinalizedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finalized_date");

                    b.HasKey("UserId", "ExamId")
                        .HasName("pk_finalized_exams");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_finalized_exams_exam_id");

                    b.ToTable("finalized_exams");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acd74f68-96bd-4478-973b-16b1ba36e59e"),
                            CloseDate = new DateTime(2021, 8, 28, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            OpenDate = new DateTime(2021, 8, 28, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("f25f3472-e199-48b6-8a10-f54a5334df70"),
                            CloseDate = new DateTime(2021, 8, 29, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("292e0d58-73c2-4d0c-a38f-695c455a427e"),
                            OpenDate = new DateTime(2021, 8, 29, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("9e2b3121-d2f5-4b1d-8c51-767e01202e4b"),
                            CloseDate = new DateTime(2021, 8, 24, 23, 19, 43, 449, DateTimeKind.Local).AddTicks(8790),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            OpenDate = new DateTime(2021, 8, 24, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8790)
                        },
                        new
                        {
                            Id = new Guid("98350749-7032-4bfa-9ba8-058966533544"),
                            CloseDate = new DateTime(2021, 8, 25, 21, 19, 43, 449, DateTimeKind.Local).AddTicks(8790),
                            ExamId = new Guid("3c883c88-efd7-4344-961c-89bc61d78839"),
                            OpenDate = new DateTime(2021, 8, 25, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8790)
                        },
                        new
                        {
                            Id = new Guid("16206306-a4bc-47bd-a1a2-925a528d1728"),
                            CloseDate = new DateTime(2021, 8, 22, 21, 19, 43, 449, DateTimeKind.Local).AddTicks(8836),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            OpenDate = new DateTime(2021, 8, 22, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8836)
                        },
                        new
                        {
                            Id = new Guid("7207a822-1c99-47ee-86c5-ea618d2a844d"),
                            CloseDate = new DateTime(2021, 8, 23, 21, 19, 43, 449, DateTimeKind.Local).AddTicks(8836),
                            ExamId = new Guid("0c39038e-2331-44b5-a4d6-c6ea8b31265c"),
                            OpenDate = new DateTime(2021, 8, 23, 19, 19, 43, 449, DateTimeKind.Local).AddTicks(8836)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9111dc3-3be6-4ade-b3c3-71cbc9e663ea"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("524a49aa-d2f3-45f8-be49-82e253466c67"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("ebb3cc67-2bda-4d13-89e0-a7f57abf9cdd"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("5fc46a97-9abe-4a7c-afac-0a63de219c3b"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("6ac67cd7-a320-466d-b215-36c9d808d9e2"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("5c0b58fd-c7b0-4330-81ea-2ab552549c4c"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("26b57fba-4c70-4cc7-8f5d-3a90399f27ee"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("fbb45eae-3d55-436f-976a-03d7d33774b0"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("09c0d02a-cf74-4d04-bed0-2a4051e4b53b"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("eb386291-41c9-4f11-b3f0-3b0d0fd91a2f"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("e510394e-bdef-4b9e-9b2a-375ae3dfe19d"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("7df1a7f6-a717-4ef0-8e14-2c9d51850419"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b5c568ea-4fd7-465e-84a4-a78d582476f9"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("7530c676-0ddb-4d46-9826-f4c99a78c244"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d1e85694-d789-4bfb-9f00-7efd62a41125"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("20536bdf-8f81-477d-84c4-4b68e30964b4"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("c346d4c7-9416-44f0-9b81-c802f2192d0d"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("6535c1f4-8edc-4676-89f5-091b23beeaf0"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("d03b7c91-e4aa-48c6-8972-efd8cdf25476"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("381b97c0-ef39-4b9f-a83e-1864f8326f6a"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("c042d1dc-1cfb-49e7-8ee1-037f485f8920"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("ce627606-b41f-4896-a311-6783f8c27340"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("d6abb460-4201-4d4f-8fe0-ecaed255f35c"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("51a11976-7e6d-48c6-bd0a-54e3787d43bf"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("f2e1c5ba-2fd7-438d-941a-4b306098b32d"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("0096f9d7-74ce-4aa7-8a2f-3d6a3f7dde1e"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("dc095436-10a0-4994-b62a-2d40cce52921"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("82a599ac-c3c2-475f-9f9b-279546d7ccbf"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("bb05ca6a-f303-41ec-b4c8-b44536c23575"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("b8031b9d-bda3-45fb-b4fa-108c116fecd4"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("f4b2b8fa-6317-4bb6-8810-4808a5fb1bc5"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("49c623cb-29e5-4f7e-bf8d-962db0fa14bc"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("91173c7c-aabb-4887-a567-3a666d0302a2"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("c5db1648-1e0c-48d5-bed1-c7e68256a627"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("97dac685-3477-4875-a33b-6e8c349e9083"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("993e21b7-50e0-4efe-b136-cc3885c46858"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("74f78f61-7fad-4755-82e2-8a368b275cc7"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("352a4af7-1ef8-464e-84ca-775e9a4d0039"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("c4eb295a-290f-41af-a698-d693654ee8d4"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("6b21c0cd-1db9-48b8-ad59-42f8adad9ac2"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("e137ed45-89c6-43e8-9bf9-cffab21fcd72"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("73adf393-0430-4c2c-a151-e1054d0b2a81"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("43ce1afb-92dd-4080-9c82-a123689c13cb"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("ff17e4be-5b28-45dc-bcad-611c3fce7c74"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("47fcae00-5bb9-4bc5-8594-db07833f88e4"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("ee1a5d29-920b-44bf-a986-baa5182651cb"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("191fc247-df3f-45cc-90dd-1a6b1ea37a14"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("812def4d-5a00-46e2-b0d4-8820676f65fd"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("a0c1f048-f0b6-455e-a5ec-0a7fa8d7cab9"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("85fb3f46-1200-4119-b0fb-4d305aee946b"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("109144c7-bf60-41a7-823c-5d49dbe50fd7"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("f2aee079-2fc8-4249-931a-8fa9eb56c0b6"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("c3aa9184-f2b3-462e-bea3-26a7e9898682"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("b1675914-b577-42df-ac5d-c25ae5f37d69"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("9b125ae2-e56c-45d8-8bfa-5699f70dd09c"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("65d0632e-a28b-4f3d-b648-1605da2eaf27"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("2be9fe46-c453-45a7-96f2-fbf2ddb61f74"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("418f331a-5bf6-45b7-a39b-36363583402d"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("8f4423d4-cc3a-43e0-b3fa-c2abb605aa30"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("b85e2a6c-5110-46a0-8512-0b7845deac73"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("ca8a53d6-82da-489c-bd64-ca6730429681"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("c79e3108-3c81-4de8-9578-baf91981f1f4"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("36f66b67-b31f-4d98-8e82-8e246273fbb7"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("a43352af-c21b-43b3-8270-a354249a6948"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("9da93404-c7fa-4a5c-867b-7c63528cb31d"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("14f05f80-89ee-4331-b6b2-7a0f3c425855"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("7301483a-cafd-4197-ade4-1af383bae080"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("c6a59263-16f6-4e2a-9508-6b584d8075d9"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("657151f5-2625-49ef-bfc5-8b505394952d"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("e93702e1-d8a1-4783-9313-fb7dbd63d2aa"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("4009b1d1-9765-4a94-a50c-6269a0adeef3"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("d67d3f86-5461-4e06-9921-11d3a9d88072"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("cfd8f659-42b7-41ca-a329-3bfe5056dafc"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("976ff0c9-5736-4957-b730-372ef45564bd"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("e8edc645-e5f1-4aab-9ce9-36dac1e470de"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("614a5e35-aeb4-474c-9989-a81f76fc1259"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("80910323-ecae-414f-9417-12286ab923ea"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("9e097f71-96ae-4325-acc1-5dc84ef2b18a"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("7d11008d-b0c2-4021-98d8-261518c6ff7b"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("7106ba6c-f0cb-4510-b8cb-0419d41a27d5"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("98a7148b-6bb5-4795-b067-a5740a15be24"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("f3baca77-d4ac-4f98-a186-28ac524182e3"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("028b49ab-ff8d-4151-afec-38e1e659c584"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("fecc3c4f-83bb-480e-8ce3-639d8cbaa600"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("10648921-532c-41ba-bee0-b4a0975e56bb"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("037974ac-58e4-4a1c-80d9-686caefbf614"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("eee25dd0-14c4-43ba-8b50-ead27fe08b22"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("350d29a8-90de-4869-9e94-ed07c2083825"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("052395e0-195d-4fd6-90df-8bb80dd61959"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("79334c4a-cee6-4328-8258-97b984520729"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c4681e37-e3cb-4de5-888d-fa333782022d"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("dac1fa55-dbda-4ea0-ad0e-44c8a85f2976"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("5fb2967f-bb49-4a75-9942-ab615f920d0c"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("fa14a1e1-4626-4c02-af13-e5b8d90118e2"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("b426c1c5-b0c9-49b5-b28f-200fe814558f"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("ab349696-1ed8-4d9a-93ca-4428576142c8"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("76bcb2f0-060d-4513-a5b8-934098434412"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("793a0130-0195-4087-ba0c-4d5f4a6166dd"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("6d7f7788-04ec-474a-a54c-b121da11038a"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCollege")
                        .HasColumnType("text")
                        .HasColumnName("actual_college");

                    b.Property<string>("ActualOccupation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actual_occupation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExpectedCollege")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expected_college");

                    b.Property<string>("ExpectedCourse")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expected_course");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_user_profile_user_id");

                    b.ToTable("external_user_profile");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_optins");

                    b.ToTable("optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.Property<bool>("WasAcceptedTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("was_accepted_terms");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 448, DateTimeKind.Local).AddTicks(5296),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 8, 24, 19, 19, 43, 448, DateTimeKind.Local).AddTicks(5314),
                            UserType = 0,
                            WasAcceptedTerms = false
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("OptinId")
                        .HasColumnType("integer")
                        .HasColumnName("optin_id");

                    b.Property<DateTime>("AcceptedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accepted_date");

                    b.HasKey("UserId", "OptinId")
                        .HasName("pk_user_optins");

                    b.HasIndex("OptinId")
                        .HasDatabaseName("ix_user_optins_optin_id");

                    b.ToTable("user_optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "ChildExamModule")
                        .WithMany()
                        .HasForeignKey("ChildExamModuleId")
                        .HasConstraintName("fk_exam_exam_child_exam_module_id");

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "FatherExamModule")
                        .WithOne()
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Exam", "FatherExamModuleId")
                        .HasConstraintName("fk_exam_exam_father_exam_module_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChildExamModule");

                    b.Navigation("FatherExamModule");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChilds")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Finalizeds")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_finalized_exams_exams_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("FinalizedExams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_finalized_exams_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithOne("ExternalUserProfile")
                        .HasForeignKey("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", "UserId")
                        .HasConstraintName("fk_external_user_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("2fd5f106-fc04-492a-b052-f5ab05feb480"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.Optin", "Optin")
                        .WithMany("UsersAccepted")
                        .HasForeignKey("OptinId")
                        .HasConstraintName("fk_user_optins_optins_optin_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("Optins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_optins_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Optin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Finalizeds");

                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChilds");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Navigation("UsersAccepted");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("ExternalUserProfile");

                    b.Navigation("FinalizedExams");

                    b.Navigation("Optins");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
