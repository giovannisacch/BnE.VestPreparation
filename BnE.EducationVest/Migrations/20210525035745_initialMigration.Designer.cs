// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210525035745_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9e38739-143b-4ddc-8ac5-8af6dd3f8d1f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            TextContentId = new Guid("4a85ed33-05ea-45db-8f09-df6b660ebd31")
                        },
                        new
                        {
                            Id = new Guid("1b245c8c-8e7a-4276-9e81-517d1f741557"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            TextContentId = new Guid("a2e800e0-b02a-4fab-b9d5-27e359dab4ea")
                        },
                        new
                        {
                            Id = new Guid("1e6f4cc3-1563-4ac6-8295-870d742f9758"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            TextContentId = new Guid("a1f567ee-fca7-48cd-8efb-a0b8c8492470")
                        },
                        new
                        {
                            Id = new Guid("ff3b2281-661b-49d3-b239-1519d9591a22"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            TextContentId = new Guid("37540030-513b-4d13-8b7f-8b148e3e8c28")
                        },
                        new
                        {
                            Id = new Guid("06fc6e40-fb8d-42bf-96b6-b876d541cac6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            TextContentId = new Guid("0978a600-ae6a-4058-9687-7cfdf9d318cb")
                        },
                        new
                        {
                            Id = new Guid("5bea2636-14e0-495d-9781-91a15ed64c3e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            TextContentId = new Guid("ae032386-bac4-437e-9d4a-b5e0d424e074")
                        },
                        new
                        {
                            Id = new Guid("7f6436c0-cb33-4116-b504-1c85886a2810"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            TextContentId = new Guid("ea5c02c5-e98a-4b28-9497-758c0b0e4290")
                        },
                        new
                        {
                            Id = new Guid("b7f84d7e-3d25-4432-a295-6d1f94af0e71"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            TextContentId = new Guid("de79fa7a-819e-4eac-991a-4c1e828fb957")
                        },
                        new
                        {
                            Id = new Guid("50f13847-ed21-4964-8488-b45947aa7b0c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            TextContentId = new Guid("f90548fc-79ad-4ac5-b4b8-3356ebc1ba5b")
                        },
                        new
                        {
                            Id = new Guid("46cf1ade-fd0d-4f6c-a729-f683f627f1da"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            TextContentId = new Guid("7a73a81b-7e6c-4089-acd8-0c4eb2faa348")
                        },
                        new
                        {
                            Id = new Guid("27b47fef-97a3-46c7-952e-9118ff79b1b2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            TextContentId = new Guid("867635e3-1718-4b34-aca4-92785cf543f3")
                        },
                        new
                        {
                            Id = new Guid("2d3d0b1d-5aa8-4bac-acaf-dc8834cafed3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            TextContentId = new Guid("65a04495-5c1d-4593-8bf0-646bcfe4b449")
                        },
                        new
                        {
                            Id = new Guid("0a3983fd-8f4e-4536-b7ca-1ae500224199"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            TextContentId = new Guid("72744b88-394a-45a8-b36d-6bf3d9bb24b5")
                        },
                        new
                        {
                            Id = new Guid("87826f3d-40c0-4651-a6f3-3c039bfd851f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            TextContentId = new Guid("68936374-5ab7-4b4c-9d34-8265ccff1454")
                        },
                        new
                        {
                            Id = new Guid("0606ce8a-d30b-497d-a852-59559441f77f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            TextContentId = new Guid("0040ec71-ff3a-4cb7-be4f-876b664716d9")
                        },
                        new
                        {
                            Id = new Guid("4e0059e5-01c1-4708-9a91-508201f13791"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            TextContentId = new Guid("2c1e4b36-ad95-4aea-833d-58cb25b2e5c1")
                        },
                        new
                        {
                            Id = new Guid("aa1e0d6a-e671-42e6-aaa7-49bf79a2cf49"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            TextContentId = new Guid("f7abf2bb-e873-403e-bc09-060c245b2fc7")
                        },
                        new
                        {
                            Id = new Guid("4676dde7-dfa6-4044-a635-b6270ae2c352"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            TextContentId = new Guid("ba7a6d10-99c1-406b-8c7e-fcb01de770d6")
                        },
                        new
                        {
                            Id = new Guid("c9984f57-8324-4d23-ad1f-f4e0261c4d0a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            TextContentId = new Guid("15aec200-9909-489d-8a7d-3e4aca90e894")
                        },
                        new
                        {
                            Id = new Guid("f2fc4ea8-dc19-4452-9e4a-b337d3622d40"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            TextContentId = new Guid("540e43cb-e960-4a63-88c3-b8671488928f")
                        },
                        new
                        {
                            Id = new Guid("31aee890-3d61-4933-8604-fd6f9324590f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            TextContentId = new Guid("cbd3bf01-4e41-45ea-bc2b-30857524e5c5")
                        },
                        new
                        {
                            Id = new Guid("4b007227-8981-413f-b9d3-7e534ecdc79b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            TextContentId = new Guid("e31c5178-4eab-422c-a29b-528b29c5ba53")
                        },
                        new
                        {
                            Id = new Guid("ead84342-f5a5-4060-9c90-f5801aef3ded"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            TextContentId = new Guid("67429d66-1e40-4e57-ad83-0bd525048a00")
                        },
                        new
                        {
                            Id = new Guid("4fec59e7-cc05-4a3a-b7cd-fcc377903cfe"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            TextContentId = new Guid("837a91ea-d1ba-44ec-bd08-296e4247d09b")
                        },
                        new
                        {
                            Id = new Guid("886be759-1ae8-477b-945c-19630427f5eb"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            TextContentId = new Guid("d2600c24-76d6-4885-8d24-a889c39805d0")
                        },
                        new
                        {
                            Id = new Guid("1336c69d-4af8-4b10-9b16-700019017acf"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            TextContentId = new Guid("a0f961c5-7335-4a1c-acae-05d59762b6f0")
                        },
                        new
                        {
                            Id = new Guid("be388052-5b96-4252-a8af-c92bf4ec4422"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            TextContentId = new Guid("0e6b4196-117c-407c-90db-fc7c381aa743")
                        },
                        new
                        {
                            Id = new Guid("54621536-9bee-4f98-a3f6-1b8598048c7b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            TextContentId = new Guid("51fd6eb8-4a17-4e52-b0fa-c650f8c94f21")
                        },
                        new
                        {
                            Id = new Guid("b2db1a65-51f4-4b5d-b69f-06e7d51e5547"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            TextContentId = new Guid("9d510a3e-fc07-445b-993a-91a44364bb66")
                        },
                        new
                        {
                            Id = new Guid("afcff988-b20e-408c-bb05-7b2e4b92f519"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            TextContentId = new Guid("72808da9-282b-4931-9acf-427dfdbaa545")
                        },
                        new
                        {
                            Id = new Guid("c14d9e43-c684-4e80-b0bd-e166d61d619c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            TextContentId = new Guid("d885ded8-3007-48e5-b7cf-daca9ad0cf11")
                        },
                        new
                        {
                            Id = new Guid("1e14dada-eda3-4e59-86ab-7c9861e9c0f6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            TextContentId = new Guid("722e6d52-520e-468d-a78e-1032178a5b6e")
                        },
                        new
                        {
                            Id = new Guid("150ff2bd-14be-46fe-a87d-109d401dbd12"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            TextContentId = new Guid("f768205e-59ad-409b-9441-79a4385e3b9a")
                        },
                        new
                        {
                            Id = new Guid("4d16012d-b179-4106-b2ca-5a6dc612a57c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            TextContentId = new Guid("f1615972-713f-4b36-8509-3923dfcf0bd1")
                        },
                        new
                        {
                            Id = new Guid("660bb5a6-cac7-4cd4-a60a-9e1460e84038"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            TextContentId = new Guid("9a9463e9-f16d-4329-ade8-7f91264bd8d4")
                        },
                        new
                        {
                            Id = new Guid("fde78064-6fa6-4d6c-8e90-24ddcde3012b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            TextContentId = new Guid("99fcf509-87a4-4b63-9d22-600df113b45e")
                        },
                        new
                        {
                            Id = new Guid("45a5346c-d004-4b4c-8833-80ed0b2bc49b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            TextContentId = new Guid("3f94c1d4-5373-4cdd-8516-d8b2bba13efb")
                        },
                        new
                        {
                            Id = new Guid("16fe7ad9-7b81-403d-bbf1-97544b7b1e38"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            TextContentId = new Guid("60d3f916-3300-44dd-9686-4745cfcb098e")
                        },
                        new
                        {
                            Id = new Guid("4ad0a30e-e2b9-4ff2-b152-d9850426d348"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            TextContentId = new Guid("6e8e98b5-958d-4f91-abb6-8734af975acb")
                        },
                        new
                        {
                            Id = new Guid("320b5b94-2a29-4e5e-9ca6-d272a50cb055"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            TextContentId = new Guid("5e320bd2-c02f-433b-82fd-31e2436f3b82")
                        },
                        new
                        {
                            Id = new Guid("433df528-020a-4935-9531-7fd671c05c98"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            TextContentId = new Guid("2397ef27-b048-4702-9fe7-d9fba6f33293")
                        },
                        new
                        {
                            Id = new Guid("de5d5feb-f043-46fe-a2af-98ef8a17f800"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            TextContentId = new Guid("7d3deb5c-35e2-4044-88ed-87cf6479db43")
                        },
                        new
                        {
                            Id = new Guid("ae41b6a6-b679-4ee2-af4d-31037054d11e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            TextContentId = new Guid("c72d65e3-4463-4b14-951c-3f6985f74f60")
                        },
                        new
                        {
                            Id = new Guid("6d6e2b3e-1512-4caa-81dc-06f665312a32"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            TextContentId = new Guid("d2191e68-1f8c-4b1c-ab09-0fb5b90a3b9f")
                        },
                        new
                        {
                            Id = new Guid("68eca955-2e50-4f7a-a5b0-9c9be96e560d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            TextContentId = new Guid("10521945-1579-4cdd-a585-8eb711350f6d")
                        },
                        new
                        {
                            Id = new Guid("af776378-657c-4d30-a64b-685cbf8b83f2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            TextContentId = new Guid("b940cc5d-684b-4789-b4f0-3def2b031a38")
                        },
                        new
                        {
                            Id = new Guid("354a8f4a-acd5-49e8-827a-596aed144b8f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            TextContentId = new Guid("4fee2f7a-27f1-4875-bd50-56beca5e69b9")
                        },
                        new
                        {
                            Id = new Guid("dc464046-4878-4651-b87f-24184a23666c"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            TextContentId = new Guid("e48df4dc-baf6-44c4-ae39-9802bed894ee")
                        },
                        new
                        {
                            Id = new Guid("6dea11b3-6bc4-4776-9361-e784d864cf0f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            TextContentId = new Guid("42deee22-d27b-49fb-a280-d96b42666097")
                        },
                        new
                        {
                            Id = new Guid("09d84256-125a-4d6b-af7c-0b3593ca027c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            TextContentId = new Guid("5a30da59-3e71-4f99-9023-06c2edb1fd78")
                        },
                        new
                        {
                            Id = new Guid("d777f247-7583-4d8a-8fbb-f06750a316c1"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            TextContentId = new Guid("7959a06b-9b4d-4238-8428-e80b4270004d")
                        },
                        new
                        {
                            Id = new Guid("25b558d7-8370-4b3b-9358-461a1f04ee4b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            TextContentId = new Guid("ecdfbda5-f06f-4cd1-851f-50c6b2180b41")
                        },
                        new
                        {
                            Id = new Guid("2ccf246b-4dd2-4361-a6af-aee652e33bb3"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            TextContentId = new Guid("ee8e306c-f208-49dc-9d57-22025221017c")
                        },
                        new
                        {
                            Id = new Guid("123f5bff-f1a8-443d-9092-6568768f8ec3"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            TextContentId = new Guid("f4eeb0d1-3e2f-414a-8592-9db022f735b7")
                        },
                        new
                        {
                            Id = new Guid("8dccf9c2-d6ca-4245-a958-e3d7dcf08596"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            TextContentId = new Guid("e2f0a211-a823-4e2a-81f5-0c90b9bfaa79")
                        },
                        new
                        {
                            Id = new Guid("dbc30466-2874-4a1a-9250-fbc390f67ff4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            TextContentId = new Guid("ea6406a7-cbdf-49bb-a63c-1cae8001e3d9")
                        },
                        new
                        {
                            Id = new Guid("b6bedc49-e099-442c-9248-09d9262781b3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            TextContentId = new Guid("27d4e750-d749-41df-84a0-52421e86b129")
                        },
                        new
                        {
                            Id = new Guid("3bd01a8a-5266-4e56-80a5-38f300ba4e49"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            TextContentId = new Guid("33f33807-f2a2-4fde-964c-ae5f2248654f")
                        },
                        new
                        {
                            Id = new Guid("d9c8b115-689f-453f-8559-2983c2cddab6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            TextContentId = new Guid("00c9ca9c-433b-4b7d-8d96-5f9398bf1436")
                        },
                        new
                        {
                            Id = new Guid("b8896c7e-6048-490f-9703-48068a041975"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            TextContentId = new Guid("194c904f-b4c4-4adc-9b85-daaaebe42b21")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 632, DateTimeKind.Local).AddTicks(7680),
                            ExamNumber = 1,
                            ExamType = 2,
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 632, DateTimeKind.Local).AddTicks(7688)
                        },
                        new
                        {
                            Id = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1693),
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1694)
                        },
                        new
                        {
                            Id = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1701),
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1702)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b0e8f0d-410e-44d7-b0dc-999d7c90208c"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(240),
                            EnunciatedId = new Guid("67025350-84c4-4739-9b1b-e20f2e37ae7d"),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            Index = 0,
                            SubjectId = new Guid("2ebff993-475d-4e07-9c31-b3f2c07c36b8"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(246)
                        },
                        new
                        {
                            Id = new Guid("abed963d-1cb9-45c7-8715-90ac1d1e5b6f"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(2977),
                            EnunciatedId = new Guid("f073300e-3551-463a-b979-74a526c6aebe"),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            Index = 1,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(2982)
                        },
                        new
                        {
                            Id = new Guid("a0217705-d9e7-4eb4-ad65-4961ea1fecba"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(2996),
                            EnunciatedId = new Guid("c70f9540-aef1-4585-b0a9-80feef67a4d4"),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            Index = 2,
                            SubjectId = new Guid("2eaea1d4-1215-4707-8ebb-4d7f8fa78a51"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(2997)
                        },
                        new
                        {
                            Id = new Guid("d909bfa4-abbe-4ca0-8a01-1389564d4af9"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3011),
                            EnunciatedId = new Guid("cfc89fdf-b0ff-4ae5-8eb2-454a98b4a0fb"),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            Index = 3,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3012)
                        },
                        new
                        {
                            Id = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3024),
                            EnunciatedId = new Guid("bdd066fe-3de0-43bc-a560-2104fdf378ad"),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            Index = 0,
                            SubjectId = new Guid("2ebff993-475d-4e07-9c31-b3f2c07c36b8"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3025)
                        },
                        new
                        {
                            Id = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3040),
                            EnunciatedId = new Guid("b30bc3d5-b97c-4a04-93f9-71fd6c693d3f"),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            Index = 1,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3040)
                        },
                        new
                        {
                            Id = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3052),
                            EnunciatedId = new Guid("7c2a684b-6e1c-49a0-a725-f0bcaf6cc09e"),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            Index = 2,
                            SubjectId = new Guid("2eaea1d4-1215-4707-8ebb-4d7f8fa78a51"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3053)
                        },
                        new
                        {
                            Id = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3065),
                            EnunciatedId = new Guid("72570327-7346-47e9-a066-67cd6a733c0e"),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            Index = 3,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3066)
                        },
                        new
                        {
                            Id = new Guid("8e6ec2fb-3a8d-4500-9ff1-fffcf6dbecf3"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3111),
                            EnunciatedId = new Guid("27f02250-5aca-4259-b313-35e54d7649ec"),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            Index = 0,
                            SubjectId = new Guid("2ebff993-475d-4e07-9c31-b3f2c07c36b8"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3112)
                        },
                        new
                        {
                            Id = new Guid("ab554581-baaa-4656-af70-076b150b7e96"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3124),
                            EnunciatedId = new Guid("d7e2dd98-d0bd-4466-b5b2-5107cc9a0019"),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            Index = 1,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3125)
                        },
                        new
                        {
                            Id = new Guid("9154a6f7-7622-4d09-b502-1f4ae7a05fd5"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3136),
                            EnunciatedId = new Guid("246955cc-9f53-41c5-9500-d0931be54061"),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            Index = 2,
                            SubjectId = new Guid("2eaea1d4-1215-4707-8ebb-4d7f8fa78a51"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3137)
                        },
                        new
                        {
                            Id = new Guid("94e69004-8da0-4075-aa9f-c99937335f11"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3151),
                            EnunciatedId = new Guid("c151b00b-af48-406d-a486-38c339357e99"),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            Index = 3,
                            SubjectId = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 625, DateTimeKind.Local).AddTicks(3151)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19444af2-74e2-42b6-a76a-c0ac62e54d57"),
                            ChosenAlternativeId = new Guid("31aee890-3d61-4933-8604-fd6f9324590f"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(6455),
                            QuestionId = new Guid("8ba5cd31-6d47-4939-8e63-1e1d592eba5b"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(6474),
                            UserId = new Guid("579cb650-65e2-4798-be78-19cb27794a6d")
                        },
                        new
                        {
                            Id = new Guid("6520f0a5-4ce2-4018-a94f-436bf4b95ced"),
                            ChosenAlternativeId = new Guid("1336c69d-4af8-4b10-9b16-700019017acf"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7849),
                            QuestionId = new Guid("0cc54ab8-adeb-4a63-948e-d5e65cad8ef4"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7854),
                            UserId = new Guid("579cb650-65e2-4798-be78-19cb27794a6d")
                        },
                        new
                        {
                            Id = new Guid("49dd62d6-2efc-4c81-a12b-fe42cd60c3f9"),
                            ChosenAlternativeId = new Guid("c14d9e43-c684-4e80-b0bd-e166d61d619c"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7859),
                            QuestionId = new Guid("e0b18dcf-48e7-4319-a93c-ff24e5f79d0f"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7860),
                            UserId = new Guid("579cb650-65e2-4798-be78-19cb27794a6d")
                        },
                        new
                        {
                            Id = new Guid("8faddfbc-25d1-4764-820d-0f9513449837"),
                            ChosenAlternativeId = new Guid("fde78064-6fa6-4d6c-8e90-24ddcde3012b"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7873),
                            QuestionId = new Guid("c5a46c5f-9a81-4ae6-8df3-9da959ddaaa9"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 640, DateTimeKind.Local).AddTicks(7874),
                            UserId = new Guid("579cb650-65e2-4798-be78-19cb27794a6d")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ebff993-475d-4e07-9c31-b3f2c07c36b8"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 623, DateTimeKind.Local).AddTicks(9924),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 624, DateTimeKind.Local).AddTicks(381)
                        },
                        new
                        {
                            Id = new Guid("2eaea1d4-1215-4707-8ebb-4d7f8fa78a51"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 624, DateTimeKind.Local).AddTicks(1188),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 624, DateTimeKind.Local).AddTicks(1193)
                        },
                        new
                        {
                            Id = new Guid("b1f10595-07f3-4c3a-8a6f-0334755c95f6"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 624, DateTimeKind.Local).AddTicks(1196),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("2ebff993-475d-4e07-9c31-b3f2c07c36b8"),
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 624, DateTimeKind.Local).AddTicks(1197)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbe0ad3c-1163-4dd4-90df-9e60c25516ff"),
                            CloseDate = new DateTime(2021, 5, 29, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            OpenDate = new DateTime(2021, 5, 29, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("0e9d0a4e-42ae-4808-aaa3-c46d1cf18183"),
                            CloseDate = new DateTime(2021, 5, 30, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("461b735b-e7fa-488b-a647-b2d8c0093928"),
                            OpenDate = new DateTime(2021, 5, 30, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("6a72f478-3d00-4d5e-8510-eb36e1351c15"),
                            CloseDate = new DateTime(2021, 5, 25, 4, 57, 44, 633, DateTimeKind.Local).AddTicks(1664),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            OpenDate = new DateTime(2021, 5, 25, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1664)
                        },
                        new
                        {
                            Id = new Guid("625400bd-2cc3-46d3-80ed-f83ac73628fe"),
                            CloseDate = new DateTime(2021, 5, 26, 2, 57, 44, 633, DateTimeKind.Local).AddTicks(1664),
                            ExamId = new Guid("91c96b2f-fd2d-4ee9-ab00-e0e375e75f00"),
                            OpenDate = new DateTime(2021, 5, 26, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1664)
                        },
                        new
                        {
                            Id = new Guid("2e3a3bce-3f02-41fc-8f26-1c787767e13c"),
                            CloseDate = new DateTime(2021, 5, 23, 2, 57, 44, 633, DateTimeKind.Local).AddTicks(1696),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            OpenDate = new DateTime(2021, 5, 23, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1696)
                        },
                        new
                        {
                            Id = new Guid("7e9c7810-0649-4645-8a25-2d899b4a1e8c"),
                            CloseDate = new DateTime(2021, 5, 24, 2, 57, 44, 633, DateTimeKind.Local).AddTicks(1696),
                            ExamId = new Guid("11d3c757-fd68-4231-830a-502e7945f628"),
                            OpenDate = new DateTime(2021, 5, 24, 0, 57, 44, 633, DateTimeKind.Local).AddTicks(1696)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67025350-84c4-4739-9b1b-e20f2e37ae7d"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("f073300e-3551-463a-b979-74a526c6aebe"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("c70f9540-aef1-4585-b0a9-80feef67a4d4"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("cfc89fdf-b0ff-4ae5-8eb2-454a98b4a0fb"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("bdd066fe-3de0-43bc-a560-2104fdf378ad"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b30bc3d5-b97c-4a04-93f9-71fd6c693d3f"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("7c2a684b-6e1c-49a0-a725-f0bcaf6cc09e"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("72570327-7346-47e9-a066-67cd6a733c0e"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("27f02250-5aca-4259-b313-35e54d7649ec"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d7e2dd98-d0bd-4466-b5b2-5107cc9a0019"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("246955cc-9f53-41c5-9500-d0931be54061"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("c151b00b-af48-406d-a486-38c339357e99"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4a85ed33-05ea-45db-8f09-df6b660ebd31"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("a2e800e0-b02a-4fab-b9d5-27e359dab4ea"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("a1f567ee-fca7-48cd-8efb-a0b8c8492470"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("37540030-513b-4d13-8b7f-8b148e3e8c28"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("0978a600-ae6a-4058-9687-7cfdf9d318cb"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("ae032386-bac4-437e-9d4a-b5e0d424e074"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("ea5c02c5-e98a-4b28-9497-758c0b0e4290"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("de79fa7a-819e-4eac-991a-4c1e828fb957"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("f90548fc-79ad-4ac5-b4b8-3356ebc1ba5b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("7a73a81b-7e6c-4089-acd8-0c4eb2faa348"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("867635e3-1718-4b34-aca4-92785cf543f3"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("65a04495-5c1d-4593-8bf0-646bcfe4b449"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("72744b88-394a-45a8-b36d-6bf3d9bb24b5"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("68936374-5ab7-4b4c-9d34-8265ccff1454"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("0040ec71-ff3a-4cb7-be4f-876b664716d9"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("2c1e4b36-ad95-4aea-833d-58cb25b2e5c1"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("f7abf2bb-e873-403e-bc09-060c245b2fc7"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("ba7a6d10-99c1-406b-8c7e-fcb01de770d6"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("15aec200-9909-489d-8a7d-3e4aca90e894"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("540e43cb-e960-4a63-88c3-b8671488928f"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("cbd3bf01-4e41-45ea-bc2b-30857524e5c5"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("e31c5178-4eab-422c-a29b-528b29c5ba53"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("67429d66-1e40-4e57-ad83-0bd525048a00"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("837a91ea-d1ba-44ec-bd08-296e4247d09b"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("d2600c24-76d6-4885-8d24-a889c39805d0"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("a0f961c5-7335-4a1c-acae-05d59762b6f0"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("0e6b4196-117c-407c-90db-fc7c381aa743"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("51fd6eb8-4a17-4e52-b0fa-c650f8c94f21"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("9d510a3e-fc07-445b-993a-91a44364bb66"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("72808da9-282b-4931-9acf-427dfdbaa545"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("d885ded8-3007-48e5-b7cf-daca9ad0cf11"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("722e6d52-520e-468d-a78e-1032178a5b6e"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("f768205e-59ad-409b-9441-79a4385e3b9a"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("f1615972-713f-4b36-8509-3923dfcf0bd1"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("9a9463e9-f16d-4329-ade8-7f91264bd8d4"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("99fcf509-87a4-4b63-9d22-600df113b45e"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("3f94c1d4-5373-4cdd-8516-d8b2bba13efb"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("60d3f916-3300-44dd-9686-4745cfcb098e"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("6e8e98b5-958d-4f91-abb6-8734af975acb"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("5e320bd2-c02f-433b-82fd-31e2436f3b82"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("2397ef27-b048-4702-9fe7-d9fba6f33293"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("7d3deb5c-35e2-4044-88ed-87cf6479db43"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("c72d65e3-4463-4b14-951c-3f6985f74f60"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("d2191e68-1f8c-4b1c-ab09-0fb5b90a3b9f"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("10521945-1579-4cdd-a585-8eb711350f6d"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("b940cc5d-684b-4789-b4f0-3def2b031a38"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("4fee2f7a-27f1-4875-bd50-56beca5e69b9"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("e48df4dc-baf6-44c4-ae39-9802bed894ee"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("42deee22-d27b-49fb-a280-d96b42666097"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("5a30da59-3e71-4f99-9023-06c2edb1fd78"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("7959a06b-9b4d-4238-8428-e80b4270004d"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("ecdfbda5-f06f-4cd1-851f-50c6b2180b41"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("ee8e306c-f208-49dc-9d57-22025221017c"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("f4eeb0d1-3e2f-414a-8592-9db022f735b7"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("e2f0a211-a823-4e2a-81f5-0c90b9bfaa79"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("ea6406a7-cbdf-49bb-a63c-1cae8001e3d9"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("27d4e750-d749-41df-84a0-52421e86b129"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("33f33807-f2a2-4fde-964c-ae5f2248654f"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("00c9ca9c-433b-4b7d-8d96-5f9398bf1436"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("194c904f-b4c4-4adc-9b85-daaaebe42b21"),
                            Content = "60°"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("579cb650-65e2-4798-be78-19cb27794a6d"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 632, DateTimeKind.Local).AddTicks(445),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 25, 0, 57, 44, 632, DateTimeKind.Local).AddTicks(459)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("char(7)")
                                .HasColumnName("address.number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("579cb650-65e2-4798-be78-19cb27794a6d"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
