// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210602070005_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c5a565b-9e5e-4fb6-b702-c9b8eabf1b49"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            TextContentId = new Guid("186aa60f-cae8-4915-9d97-f3e4ae1ad268")
                        },
                        new
                        {
                            Id = new Guid("e9659245-70e1-477b-8dc2-614dcd6c1951"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            TextContentId = new Guid("9fbca7be-1808-49dc-ae42-bcc2c2617808")
                        },
                        new
                        {
                            Id = new Guid("0cf82fe9-7ca2-47c5-989c-dfebe23d9ef8"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            TextContentId = new Guid("7c59e70e-40f0-4de7-9ef1-c5231041de2b")
                        },
                        new
                        {
                            Id = new Guid("3c6f64d0-3936-4ac4-968f-3e15f9b20167"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            TextContentId = new Guid("69e868f6-aed1-4dd0-9d75-f33a03df4d91")
                        },
                        new
                        {
                            Id = new Guid("a1c93a34-1c1f-487a-9eaa-58849e3eabae"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            TextContentId = new Guid("b807c4c3-15c9-4a0c-a784-390b32932c3f")
                        },
                        new
                        {
                            Id = new Guid("0682ee81-7473-4ef1-9f74-425b7e27d188"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            TextContentId = new Guid("eed7fd55-abe3-49ee-9079-d869d7096bc2")
                        },
                        new
                        {
                            Id = new Guid("3d7df103-4924-49a5-b814-f4bfce6e0a8c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            TextContentId = new Guid("1ca5e685-08a0-4e22-8573-a7271d7c2639")
                        },
                        new
                        {
                            Id = new Guid("d063f48e-0674-40d4-8b9c-f8a0f8142f60"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            TextContentId = new Guid("4e5d4da6-057b-4d40-8c98-931a94d25a7e")
                        },
                        new
                        {
                            Id = new Guid("cd25166e-641f-4eef-9c1a-3920a6a7d9ec"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            TextContentId = new Guid("9fcc0550-7bb5-4325-a5cc-5daa0659acf6")
                        },
                        new
                        {
                            Id = new Guid("59f16a3f-5c5c-419e-8848-f59c143e45d2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            TextContentId = new Guid("6de18948-4d3c-4ac5-b546-8b542e35ea28")
                        },
                        new
                        {
                            Id = new Guid("41272f91-4c1a-4431-b525-cb36657536fe"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            TextContentId = new Guid("f9522545-d7d5-4428-91e3-613a6e02acc0")
                        },
                        new
                        {
                            Id = new Guid("f1e7259b-c486-4a34-8585-343c735a45dd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            TextContentId = new Guid("ec856314-2737-43f3-bc75-0947cea6943f")
                        },
                        new
                        {
                            Id = new Guid("16aaec3f-1e56-43db-86d5-0afb990b61c0"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            TextContentId = new Guid("438d4822-926e-4782-bfdf-9c78c6f1969c")
                        },
                        new
                        {
                            Id = new Guid("361f6f97-f92f-4b36-8919-066cd0a2c42b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            TextContentId = new Guid("c7ecc798-2df4-46db-ad87-984c475b3e57")
                        },
                        new
                        {
                            Id = new Guid("3fb16208-acc0-46a8-8ce3-ea7a5bb7ddfe"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            TextContentId = new Guid("989ade4f-7d7a-4c98-8838-c65f83a6d8f0")
                        },
                        new
                        {
                            Id = new Guid("097693ad-65a7-4a9c-b38b-514763a460ca"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            TextContentId = new Guid("8f4098cc-37d4-4d02-962c-2b5056ba508d")
                        },
                        new
                        {
                            Id = new Guid("4b2c5977-7923-4211-9f27-570b42837ad5"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            TextContentId = new Guid("04454e34-cb66-4aa3-ac39-b270011092bc")
                        },
                        new
                        {
                            Id = new Guid("c8841f5b-7333-4fc0-9a5d-baf88c39ea4d"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            TextContentId = new Guid("c73a60bc-4ea5-43b2-9b13-406e9e3d447b")
                        },
                        new
                        {
                            Id = new Guid("93935f05-ca32-4798-a7a3-b3f886846c87"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            TextContentId = new Guid("50ae137b-df3e-47d7-baac-11f0f7294244")
                        },
                        new
                        {
                            Id = new Guid("634dc5e4-94f6-415d-887d-ae46042e3679"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            TextContentId = new Guid("996417e0-c5b4-4a56-9b80-82d53836eedc")
                        },
                        new
                        {
                            Id = new Guid("130b9b93-7b6a-46b8-9f96-74ba11e81fc4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            TextContentId = new Guid("f5e7efe5-97ec-45ca-9052-45f6373941a5")
                        },
                        new
                        {
                            Id = new Guid("454102c4-3a0a-4aed-9a6d-6774653601dd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            TextContentId = new Guid("0cdc9f25-c035-4c5e-96fa-fec903a716cf")
                        },
                        new
                        {
                            Id = new Guid("9dd72882-ee6a-4c09-be6e-e0ec6af2bb9b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            TextContentId = new Guid("f8c652b6-4dd9-495d-8439-f72c0217c610")
                        },
                        new
                        {
                            Id = new Guid("788f47d3-9205-4231-97dd-246af7be885b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            TextContentId = new Guid("5ddb384f-4562-433f-aba5-2e4a0a6e5cb2")
                        },
                        new
                        {
                            Id = new Guid("00fba0c4-ebd8-438c-ad72-8ad0878a0bb7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            TextContentId = new Guid("bc6094f8-60f0-4cd2-b43e-550f8e8aa9de")
                        },
                        new
                        {
                            Id = new Guid("cf4d1a7b-1cfa-4fb7-8b49-98ef7b7681c5"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            TextContentId = new Guid("80c0165e-29cf-446a-b03b-8220f36d6c7c")
                        },
                        new
                        {
                            Id = new Guid("a24b5775-742e-4931-8a99-9c36a5505bff"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            TextContentId = new Guid("24548991-e563-4a1f-a4d2-a65e53f218e3")
                        },
                        new
                        {
                            Id = new Guid("347cf567-3314-4bab-98f0-4f35a4e5a7a5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            TextContentId = new Guid("a171f801-f1d6-4af7-877d-b712dcf77380")
                        },
                        new
                        {
                            Id = new Guid("813e7561-d2d3-4f1f-a9ad-2d9acdc7f78c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            TextContentId = new Guid("3397ce40-1855-4706-a602-9aa7bbb4d0c2")
                        },
                        new
                        {
                            Id = new Guid("9c8733e4-735b-4b3c-84e5-00e386ac5fc4"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            TextContentId = new Guid("baf772a2-c599-4a65-9f0a-35b3223d89fe")
                        },
                        new
                        {
                            Id = new Guid("62ecd8c2-2a0a-405c-999f-edc1376e16f3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            TextContentId = new Guid("204925de-ddb2-441c-93af-78e17792bd7c")
                        },
                        new
                        {
                            Id = new Guid("f0e5c7fc-5eb7-4c43-bb0a-08fde8ba34d0"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            TextContentId = new Guid("0f6842a1-bb29-474f-a83e-9158687fdd55")
                        },
                        new
                        {
                            Id = new Guid("2d03716d-e77b-44db-9438-d8187d90b1e2"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            TextContentId = new Guid("9a9fdf21-53e5-4c9f-910a-0162677cee0d")
                        },
                        new
                        {
                            Id = new Guid("b9549e8e-d8be-4b7c-b282-eb084bfbc921"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            TextContentId = new Guid("fc35abaf-00c0-4272-8020-671365a6310f")
                        },
                        new
                        {
                            Id = new Guid("32dca55c-ae6d-4358-bbc7-984dc9c900f7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            TextContentId = new Guid("47471283-2f44-4713-bac8-2092749d1b5a")
                        },
                        new
                        {
                            Id = new Guid("112af349-e2d9-4caf-924a-007d2ac7bee0"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            TextContentId = new Guid("80db8ef3-dddf-42f8-ad17-0daacb5595bd")
                        },
                        new
                        {
                            Id = new Guid("85346ef0-9d84-45c4-9ecf-48d7c4ca199e"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            TextContentId = new Guid("d5656b57-1138-4fb4-bfb0-b10c7f1c0a36")
                        },
                        new
                        {
                            Id = new Guid("6115dcbc-ac71-441f-a79d-f0cefb388004"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            TextContentId = new Guid("0e717910-6574-4737-b539-470c09effe04")
                        },
                        new
                        {
                            Id = new Guid("46b8f454-098a-4e85-a8b1-e2c1280e054b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            TextContentId = new Guid("e6797bb4-d1f2-4e8e-ab25-7bdef9eda5e0")
                        },
                        new
                        {
                            Id = new Guid("4bbe52a8-862e-47a4-8216-0bea4dc25a07"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            TextContentId = new Guid("d5c71fcc-7595-4eed-b023-1eef0d219b8b")
                        },
                        new
                        {
                            Id = new Guid("26c5905c-b313-4d6e-8f94-2a91ea4aaa7f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            TextContentId = new Guid("44a5f6c8-1d84-40d0-ac6e-5a4bac966d0a")
                        },
                        new
                        {
                            Id = new Guid("7bd52f99-248c-4eee-ac41-57c7fa6f6dd1"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            TextContentId = new Guid("5d7445b7-bfbb-4d76-851a-994ba93cdb7d")
                        },
                        new
                        {
                            Id = new Guid("3b52c28e-8ff9-4f8d-9596-3d4db8c731c2"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            TextContentId = new Guid("71a20f8f-9c29-4b9b-b83d-63bf6e6f14dc")
                        },
                        new
                        {
                            Id = new Guid("282f46bd-97ce-4fae-b134-73222a3bff2d"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            TextContentId = new Guid("63ef1b9e-f4b7-4d49-a563-9c94aaa65461")
                        },
                        new
                        {
                            Id = new Guid("671b15d7-7f70-4c42-ad24-fa7d144e7747"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            TextContentId = new Guid("8d420653-ba07-4266-944f-2323cffea4b2")
                        },
                        new
                        {
                            Id = new Guid("473c0534-e605-4293-90e8-80c145df5f98"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            TextContentId = new Guid("12ec7c9f-29d1-4861-a14f-49fa2fcd87aa")
                        },
                        new
                        {
                            Id = new Guid("fdc30685-d53b-4640-9a9b-2f033660cf4d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            TextContentId = new Guid("42648fbf-b7ba-4a67-8a0b-68332c136d15")
                        },
                        new
                        {
                            Id = new Guid("661b622e-2fb4-463c-8bfc-3c0a0abdb397"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            TextContentId = new Guid("aabfc6cc-79af-46b1-94fc-177e9d455e23")
                        },
                        new
                        {
                            Id = new Guid("b8f1d92f-a188-44f3-b452-30bf0c92ddad"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            TextContentId = new Guid("8ff80225-fa4b-4113-afe1-5ffb2f64000f")
                        },
                        new
                        {
                            Id = new Guid("af7800aa-6670-41da-9139-5d6e56a89909"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            TextContentId = new Guid("c1b529a6-01b1-4362-8b30-2a77694dac5e")
                        },
                        new
                        {
                            Id = new Guid("17670054-c693-457a-a7d3-696258f8c158"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            TextContentId = new Guid("46777885-c09c-4cc8-b78a-f2dab121d85a")
                        },
                        new
                        {
                            Id = new Guid("9bcb687f-d2a9-4450-9630-58bca553a47f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            TextContentId = new Guid("81679a7b-823a-4fc5-bea6-0c51c3945941")
                        },
                        new
                        {
                            Id = new Guid("8c1634c6-5000-4436-aa53-4840574d73cc"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            TextContentId = new Guid("48de392b-cbe3-4c4a-9501-d33a7c362d4b")
                        },
                        new
                        {
                            Id = new Guid("f08ed24c-c3b9-41de-88ef-8e7a955efbf2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            TextContentId = new Guid("866c9c62-8863-476a-b88c-57341f2ff87f")
                        },
                        new
                        {
                            Id = new Guid("faaecb54-7e83-43ba-9a60-e359adc2ec97"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            TextContentId = new Guid("7356e067-b4a8-4cce-a33d-7c8b31697b2b")
                        },
                        new
                        {
                            Id = new Guid("50e955d9-9a34-4cbf-9b69-13ab1d8653bd"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            TextContentId = new Guid("5e7a2729-d079-47b2-88bf-28af1f4d46da")
                        },
                        new
                        {
                            Id = new Guid("478b2ecc-f402-484a-8d1a-339a0239a316"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            TextContentId = new Guid("e30e13dc-2a53-4d7e-bb1e-2c3d6ef647a7")
                        },
                        new
                        {
                            Id = new Guid("23cb7955-24c7-483f-9ff6-21e941ab6528"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            TextContentId = new Guid("763fefb7-defe-4df6-bf02-0ca3128b05be")
                        },
                        new
                        {
                            Id = new Guid("8481af6f-7165-4af7-b43d-5bd840e22104"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            TextContentId = new Guid("bf7d1904-f468-442c-816e-069c7bac6211")
                        },
                        new
                        {
                            Id = new Guid("6a19999d-2bd6-472b-8aa9-f05487f029f4"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            TextContentId = new Guid("d95cb5fe-2759-4bae-bca5-9558db27671e")
                        },
                        new
                        {
                            Id = new Guid("7a2707a7-1198-43de-80f6-ff4d34970dd4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            TextContentId = new Guid("09674527-54c1-4da9-8f84-d783f7ce3157")
                        },
                        new
                        {
                            Id = new Guid("414e88fb-37a6-426b-8b76-8102489fd1cb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            TextContentId = new Guid("8cd8aee0-d921-44dd-a5c7-9335b4ad99f8")
                        },
                        new
                        {
                            Id = new Guid("5cae5093-e083-4bdc-bc2d-8abb9cda68c3"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            TextContentId = new Guid("e0832360-6da9-4b67-beb4-670bc59326ba")
                        },
                        new
                        {
                            Id = new Guid("6359e5a9-2bc5-4d28-91e6-44e6a129cb9c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            TextContentId = new Guid("f0507a87-4242-49c3-b93c-7785e5a04a55")
                        },
                        new
                        {
                            Id = new Guid("1d8aa3ac-0379-4e65-8855-01de6fc96822"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            TextContentId = new Guid("a12e0bbd-c6e1-4fa4-9f51-96a87f2bc454")
                        },
                        new
                        {
                            Id = new Guid("b2b95350-aa96-4905-9804-3e8573f400e6"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            TextContentId = new Guid("ac7cd3b2-75a0-4f8b-8f60-c543ecd1ce7c")
                        },
                        new
                        {
                            Id = new Guid("92edfca9-335d-436d-9a3f-a5ef6746878e"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            TextContentId = new Guid("e0930762-2cf6-490f-b8f9-23feb5e5f09f")
                        },
                        new
                        {
                            Id = new Guid("22669f42-6528-429f-9ffb-1497cf97111f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            TextContentId = new Guid("e9f5cec3-5f5a-4302-a714-fcec98ab7f91")
                        },
                        new
                        {
                            Id = new Guid("ef66be2b-be3a-4bcd-bc8c-32d42af1719e"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            TextContentId = new Guid("66293c79-9cda-447d-845b-632d13f47c7c")
                        },
                        new
                        {
                            Id = new Guid("36d8a9b1-b157-4359-99a8-a74924cf4341"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            TextContentId = new Guid("ad13ce8d-70d2-4f47-ae68-83d7fffa4335")
                        },
                        new
                        {
                            Id = new Guid("515ba07c-fdb9-47cc-859f-4b8794be04f4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            TextContentId = new Guid("f7641635-a1e7-4822-bc00-eb6510e2204e")
                        },
                        new
                        {
                            Id = new Guid("642cd140-71d5-4e7d-aee9-402d7dbaefa9"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            TextContentId = new Guid("37347f59-def7-4c57-ad85-fb80395a1355")
                        },
                        new
                        {
                            Id = new Guid("4401aacb-b2b2-44b2-a658-6dab2e1c2d82"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            TextContentId = new Guid("c7f58e2f-95d8-4439-8b22-a8a3f9b3f9f8")
                        },
                        new
                        {
                            Id = new Guid("46d50daf-fc9e-4414-bf93-b02d16bfe666"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            TextContentId = new Guid("e18c5829-d07c-4d08-9679-4fedb7396445")
                        },
                        new
                        {
                            Id = new Guid("0bb73dda-1d0c-4317-aaad-74a460af84e1"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            TextContentId = new Guid("4e0fefeb-cef3-4888-acdc-429b7032c9eb")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(5318),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(5326)
                        },
                        new
                        {
                            Id = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8665),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8667)
                        },
                        new
                        {
                            Id = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8693),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8694)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce779e2c-0946-4623-9abf-e9ff9f30cdb1"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(4807),
                            EnunciatedId = new Guid("e21fdd35-5933-4494-adbe-71d864828566"),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            Index = 0,
                            SubjectId = new Guid("8c1830ed-d266-4063-b37d-030fe357755c"),
                            SupportingTextId = new Guid("c4d41ef0-aebe-48d9-8bf1-62a4ef9b0674"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(4812)
                        },
                        new
                        {
                            Id = new Guid("2aedc973-05ba-4012-be59-e2b2c564e093"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7462),
                            EnunciatedId = new Guid("b9b4a14a-5952-4984-a1da-cb33c90314c5"),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            Index = 1,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("c4994594-f5e3-48b4-9a1c-40d149f62259"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7467)
                        },
                        new
                        {
                            Id = new Guid("bd1ad17e-fa41-4fff-8549-d316aa1f4419"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7483),
                            EnunciatedId = new Guid("d496ca53-8ad0-4c55-b465-0ae0af6e1cff"),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            Index = 2,
                            SubjectId = new Guid("6d20cf15-db3d-46a7-af5b-2e3be6d66b82"),
                            SupportingTextId = new Guid("823d3ba8-8bb2-4bb3-9513-ed7f923599dd"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7484)
                        },
                        new
                        {
                            Id = new Guid("9e663260-aee7-489c-8ca3-b5ac576d1520"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7498),
                            EnunciatedId = new Guid("9cb1cf9c-e58b-491e-9ef6-ba3123221f1f"),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            Index = 3,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("c4994594-f5e3-48b4-9a1c-40d149f62259"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7499)
                        },
                        new
                        {
                            Id = new Guid("f805d0ad-072e-4d23-9905-d82f068ab320"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7512),
                            EnunciatedId = new Guid("79d51f9f-1190-44b7-ad96-25e78eae797d"),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            Index = 4,
                            SubjectId = new Guid("b0bc0acc-5e66-44a7-8ff7-ebfcee7b84e3"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7513)
                        },
                        new
                        {
                            Id = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7530),
                            EnunciatedId = new Guid("8f1ae030-1f68-402f-be1f-5b0296d98070"),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            Index = 0,
                            SubjectId = new Guid("8c1830ed-d266-4063-b37d-030fe357755c"),
                            SupportingTextId = new Guid("eddccb1a-50fa-4bf0-9c2d-e2a760a9113c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7531)
                        },
                        new
                        {
                            Id = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7584),
                            EnunciatedId = new Guid("b2f7669b-c6cf-48af-a546-1e44e24bc67f"),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            Index = 1,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("eed3d8da-1740-4ab3-82bf-746cbe776b9e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7586)
                        },
                        new
                        {
                            Id = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7599),
                            EnunciatedId = new Guid("b3ad3bc2-3afa-4e1a-b489-5ebf4fffc07a"),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            Index = 2,
                            SubjectId = new Guid("6d20cf15-db3d-46a7-af5b-2e3be6d66b82"),
                            SupportingTextId = new Guid("4f0082be-c93e-4467-8e6e-6a19cc8cf20a"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7600)
                        },
                        new
                        {
                            Id = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7613),
                            EnunciatedId = new Guid("cfe939ea-3adb-4263-b3dc-c7b7d869aaef"),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            Index = 3,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("eed3d8da-1740-4ab3-82bf-746cbe776b9e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7614)
                        },
                        new
                        {
                            Id = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7626),
                            EnunciatedId = new Guid("5b2c703e-0585-401c-b8dc-7b04c062f812"),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            Index = 4,
                            SubjectId = new Guid("b0bc0acc-5e66-44a7-8ff7-ebfcee7b84e3"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7627)
                        },
                        new
                        {
                            Id = new Guid("118d4574-a027-4f8b-8466-41aac758b0d9"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7640),
                            EnunciatedId = new Guid("164ad745-cc07-4d7c-bb33-98e2ec884aeb"),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            Index = 0,
                            SubjectId = new Guid("8c1830ed-d266-4063-b37d-030fe357755c"),
                            SupportingTextId = new Guid("82cbfeb4-6478-4235-b0d5-14aa107dbf0e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7641)
                        },
                        new
                        {
                            Id = new Guid("45595653-f4c8-4479-a0c6-e54d1e5dd5ec"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7656),
                            EnunciatedId = new Guid("ee608d93-488a-4338-b60d-a60e6e697dc4"),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            Index = 1,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("82cbfeb4-6478-4235-b0d5-14aa107dbf0e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7657)
                        },
                        new
                        {
                            Id = new Guid("35d0626a-3ad4-476b-bb93-22d562cd2ed1"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7668),
                            EnunciatedId = new Guid("4da3e0f7-ff4d-4697-80f2-a038d72d2b38"),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            Index = 2,
                            SubjectId = new Guid("6d20cf15-db3d-46a7-af5b-2e3be6d66b82"),
                            SupportingTextId = new Guid("82cbfeb4-6478-4235-b0d5-14aa107dbf0e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7669)
                        },
                        new
                        {
                            Id = new Guid("1dab7c28-c1d9-4c47-86a6-54993e48856f"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7776),
                            EnunciatedId = new Guid("3ea9c671-9ed9-479c-ae10-4dd5a6fa44ae"),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            Index = 3,
                            SubjectId = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            SupportingTextId = new Guid("82cbfeb4-6478-4235-b0d5-14aa107dbf0e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7778)
                        },
                        new
                        {
                            Id = new Guid("1ec91b63-b754-4dd1-afb3-e1facf6f8c8e"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7790),
                            EnunciatedId = new Guid("e896ddbb-5660-4abc-9b72-e412be12a828"),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            Index = 4,
                            SubjectId = new Guid("b0bc0acc-5e66-44a7-8ff7-ebfcee7b84e3"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 871, DateTimeKind.Local).AddTicks(7791)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67c71e97-24a4-4760-b02f-897a7b8cc0a8"),
                            ChosenAlternativeId = new Guid("cf4d1a7b-1cfa-4fb7-8b49-98ef7b7681c5"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(5894),
                            QuestionId = new Guid("f74d433e-d650-4d02-bfa4-3ea1970afe0f"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(5911),
                            UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5")
                        },
                        new
                        {
                            Id = new Guid("5b4879c0-7074-4ec4-85ae-21bc31f912b2"),
                            ChosenAlternativeId = new Guid("62ecd8c2-2a0a-405c-999f-edc1376e16f3"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7350),
                            QuestionId = new Guid("dfdfadf1-24d4-42e5-a58e-1b09f31e47cc"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7356),
                            UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5")
                        },
                        new
                        {
                            Id = new Guid("d6fe1708-4a2b-424e-b800-d091944a60cd"),
                            ChosenAlternativeId = new Guid("112af349-e2d9-4caf-924a-007d2ac7bee0"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7363),
                            QuestionId = new Guid("58275251-b6d9-4933-9ad8-b7124b0b457a"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7364),
                            UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5")
                        },
                        new
                        {
                            Id = new Guid("c81fa0e4-ddf6-47f8-a9f1-2a8c02cd3d5e"),
                            ChosenAlternativeId = new Guid("26c5905c-b313-4d6e-8f94-2a91ea4aaa7f"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7366),
                            QuestionId = new Guid("3ff49be4-576a-492f-932e-8d106a9aed2b"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7367),
                            UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5")
                        },
                        new
                        {
                            Id = new Guid("1c6344ac-9456-47ba-865d-0159773d65a5"),
                            ChosenAlternativeId = new Guid("473c0534-e605-4293-90e8-80c145df5f98"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7370),
                            QuestionId = new Guid("e7dff455-1e0e-4468-a2d5-8c109b46895e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 888, DateTimeKind.Local).AddTicks(7371),
                            UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c1830ed-d266-4063-b37d-030fe357755c"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(2140),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(2611)
                        },
                        new
                        {
                            Id = new Guid("6d20cf15-db3d-46a7-af5b-2e3be6d66b82"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3472),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3476)
                        },
                        new
                        {
                            Id = new Guid("0c44280a-5a46-4cb5-872c-a697be71e0f6"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3479),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("8c1830ed-d266-4063-b37d-030fe357755c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3480)
                        },
                        new
                        {
                            Id = new Guid("b0bc0acc-5e66-44a7-8ff7-ebfcee7b84e3"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3482),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 870, DateTimeKind.Local).AddTicks(3483)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4d41ef0-aebe-48d9-8bf1-62a4ef9b0674"),
                            ContentId = new Guid("c5df9feb-3f7e-4155-a932-3428908063ec")
                        },
                        new
                        {
                            Id = new Guid("823d3ba8-8bb2-4bb3-9513-ed7f923599dd"),
                            ContentId = new Guid("30b2e062-75b4-4802-867b-61a10f24d8af")
                        },
                        new
                        {
                            Id = new Guid("c4994594-f5e3-48b4-9a1c-40d149f62259"),
                            ContentId = new Guid("00c22dbe-1e66-44ee-9208-afdb9dc8cd64")
                        },
                        new
                        {
                            Id = new Guid("eddccb1a-50fa-4bf0-9c2d-e2a760a9113c"),
                            ContentId = new Guid("7c23e341-f979-4139-ba6f-9a05b5155e12")
                        },
                        new
                        {
                            Id = new Guid("4f0082be-c93e-4467-8e6e-6a19cc8cf20a"),
                            ContentId = new Guid("fba62d4f-f02b-4dc4-841e-75f2536f2301")
                        },
                        new
                        {
                            Id = new Guid("eed3d8da-1740-4ab3-82bf-746cbe776b9e"),
                            ContentId = new Guid("e5d2897f-b5ae-4063-9d7b-0eb6956f887f")
                        },
                        new
                        {
                            Id = new Guid("f6ad9e3b-8fac-43a9-b8d2-2a5b0e9219f8"),
                            ContentId = new Guid("f8d7c69a-30df-4e0d-8ebd-906ef699dabc")
                        },
                        new
                        {
                            Id = new Guid("9f6294a3-b61c-4557-8191-3a95e74f04bd"),
                            ContentId = new Guid("bf482ae5-657b-458d-8616-80608e7f3764")
                        },
                        new
                        {
                            Id = new Guid("82cbfeb4-6478-4235-b0d5-14aa107dbf0e"),
                            ContentId = new Guid("d46ba576-2449-47cd-bdc1-753ce26340bd")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfb70065-dbd0-4649-87e9-e9c5f39971ff"),
                            CloseDate = new DateTime(2021, 6, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            OpenDate = new DateTime(2021, 6, 6, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("0506a502-1a23-4ca8-af49-13afccde505b"),
                            CloseDate = new DateTime(2021, 6, 7, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2044520f-1f88-464d-840e-af51ab9b0a22"),
                            OpenDate = new DateTime(2021, 6, 7, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("9621f4d9-edd5-4f86-a5d2-994481657e45"),
                            CloseDate = new DateTime(2021, 6, 2, 8, 0, 4, 880, DateTimeKind.Local).AddTicks(8631),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            OpenDate = new DateTime(2021, 6, 2, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8631)
                        },
                        new
                        {
                            Id = new Guid("83552556-e30d-44ef-bc0b-09645c083265"),
                            CloseDate = new DateTime(2021, 6, 3, 6, 0, 4, 880, DateTimeKind.Local).AddTicks(8631),
                            ExamId = new Guid("438fa0cd-85f3-4e53-9973-dac65030690e"),
                            OpenDate = new DateTime(2021, 6, 3, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8631)
                        },
                        new
                        {
                            Id = new Guid("9c2be7ef-e099-4f8d-9ddb-00f7a786d5fb"),
                            CloseDate = new DateTime(2021, 5, 31, 6, 0, 4, 880, DateTimeKind.Local).AddTicks(8669),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            OpenDate = new DateTime(2021, 5, 31, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8669)
                        },
                        new
                        {
                            Id = new Guid("9d6d8b9e-4787-40c8-8e70-c086c7f536fe"),
                            CloseDate = new DateTime(2021, 6, 1, 6, 0, 4, 880, DateTimeKind.Local).AddTicks(8669),
                            ExamId = new Guid("57bc14e2-3754-415a-922f-73f5adefd75a"),
                            OpenDate = new DateTime(2021, 6, 1, 4, 0, 4, 880, DateTimeKind.Local).AddTicks(8669)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e21fdd35-5933-4494-adbe-71d864828566"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b9b4a14a-5952-4984-a1da-cb33c90314c5"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d496ca53-8ad0-4c55-b465-0ae0af6e1cff"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("9cb1cf9c-e58b-491e-9ef6-ba3123221f1f"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("79d51f9f-1190-44b7-ad96-25e78eae797d"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("8f1ae030-1f68-402f-be1f-5b0296d98070"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b2f7669b-c6cf-48af-a546-1e44e24bc67f"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b3ad3bc2-3afa-4e1a-b489-5ebf4fffc07a"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("cfe939ea-3adb-4263-b3dc-c7b7d869aaef"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("5b2c703e-0585-401c-b8dc-7b04c062f812"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("164ad745-cc07-4d7c-bb33-98e2ec884aeb"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("ee608d93-488a-4338-b60d-a60e6e697dc4"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4da3e0f7-ff4d-4697-80f2-a038d72d2b38"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("3ea9c671-9ed9-479c-ae10-4dd5a6fa44ae"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("e896ddbb-5660-4abc-9b72-e412be12a828"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("186aa60f-cae8-4915-9d97-f3e4ae1ad268"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("9fbca7be-1808-49dc-ae42-bcc2c2617808"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("7c59e70e-40f0-4de7-9ef1-c5231041de2b"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("69e868f6-aed1-4dd0-9d75-f33a03df4d91"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("b807c4c3-15c9-4a0c-a784-390b32932c3f"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("eed7fd55-abe3-49ee-9079-d869d7096bc2"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("1ca5e685-08a0-4e22-8573-a7271d7c2639"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("4e5d4da6-057b-4d40-8c98-931a94d25a7e"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("9fcc0550-7bb5-4325-a5cc-5daa0659acf6"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("6de18948-4d3c-4ac5-b546-8b542e35ea28"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("f9522545-d7d5-4428-91e3-613a6e02acc0"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("ec856314-2737-43f3-bc75-0947cea6943f"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("438d4822-926e-4782-bfdf-9c78c6f1969c"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("c7ecc798-2df4-46db-ad87-984c475b3e57"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("989ade4f-7d7a-4c98-8838-c65f83a6d8f0"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("8f4098cc-37d4-4d02-962c-2b5056ba508d"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("04454e34-cb66-4aa3-ac39-b270011092bc"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("c73a60bc-4ea5-43b2-9b13-406e9e3d447b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("50ae137b-df3e-47d7-baac-11f0f7294244"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("996417e0-c5b4-4a56-9b80-82d53836eedc"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("f5e7efe5-97ec-45ca-9052-45f6373941a5"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("0cdc9f25-c035-4c5e-96fa-fec903a716cf"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("f8c652b6-4dd9-495d-8439-f72c0217c610"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("5ddb384f-4562-433f-aba5-2e4a0a6e5cb2"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("bc6094f8-60f0-4cd2-b43e-550f8e8aa9de"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("80c0165e-29cf-446a-b03b-8220f36d6c7c"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("24548991-e563-4a1f-a4d2-a65e53f218e3"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("a171f801-f1d6-4af7-877d-b712dcf77380"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("3397ce40-1855-4706-a602-9aa7bbb4d0c2"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("baf772a2-c599-4a65-9f0a-35b3223d89fe"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("204925de-ddb2-441c-93af-78e17792bd7c"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("0f6842a1-bb29-474f-a83e-9158687fdd55"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("9a9fdf21-53e5-4c9f-910a-0162677cee0d"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("fc35abaf-00c0-4272-8020-671365a6310f"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("47471283-2f44-4713-bac8-2092749d1b5a"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("80db8ef3-dddf-42f8-ad17-0daacb5595bd"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("d5656b57-1138-4fb4-bfb0-b10c7f1c0a36"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("0e717910-6574-4737-b539-470c09effe04"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("e6797bb4-d1f2-4e8e-ab25-7bdef9eda5e0"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("d5c71fcc-7595-4eed-b023-1eef0d219b8b"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("44a5f6c8-1d84-40d0-ac6e-5a4bac966d0a"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("5d7445b7-bfbb-4d76-851a-994ba93cdb7d"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("71a20f8f-9c29-4b9b-b83d-63bf6e6f14dc"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("63ef1b9e-f4b7-4d49-a563-9c94aaa65461"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("8d420653-ba07-4266-944f-2323cffea4b2"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("12ec7c9f-29d1-4861-a14f-49fa2fcd87aa"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("42648fbf-b7ba-4a67-8a0b-68332c136d15"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("aabfc6cc-79af-46b1-94fc-177e9d455e23"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("8ff80225-fa4b-4113-afe1-5ffb2f64000f"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("c1b529a6-01b1-4362-8b30-2a77694dac5e"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("46777885-c09c-4cc8-b78a-f2dab121d85a"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("81679a7b-823a-4fc5-bea6-0c51c3945941"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("48de392b-cbe3-4c4a-9501-d33a7c362d4b"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("866c9c62-8863-476a-b88c-57341f2ff87f"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("7356e067-b4a8-4cce-a33d-7c8b31697b2b"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("5e7a2729-d079-47b2-88bf-28af1f4d46da"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("e30e13dc-2a53-4d7e-bb1e-2c3d6ef647a7"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("763fefb7-defe-4df6-bf02-0ca3128b05be"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("bf7d1904-f468-442c-816e-069c7bac6211"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("d95cb5fe-2759-4bae-bca5-9558db27671e"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("09674527-54c1-4da9-8f84-d783f7ce3157"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("8cd8aee0-d921-44dd-a5c7-9335b4ad99f8"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("e0832360-6da9-4b67-beb4-670bc59326ba"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("f0507a87-4242-49c3-b93c-7785e5a04a55"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("a12e0bbd-c6e1-4fa4-9f51-96a87f2bc454"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("ac7cd3b2-75a0-4f8b-8f60-c543ecd1ce7c"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("e0930762-2cf6-490f-b8f9-23feb5e5f09f"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("e9f5cec3-5f5a-4302-a714-fcec98ab7f91"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("66293c79-9cda-447d-845b-632d13f47c7c"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("ad13ce8d-70d2-4f47-ae68-83d7fffa4335"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("f7641635-a1e7-4822-bc00-eb6510e2204e"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("37347f59-def7-4c57-ad85-fb80395a1355"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("c7f58e2f-95d8-4439-8b22-a8a3f9b3f9f8"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("e18c5829-d07c-4d08-9679-4fedb7396445"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("4e0fefeb-cef3-4888-acdc-429b7032c9eb"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c5df9feb-3f7e-4155-a932-3428908063ec"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("7c23e341-f979-4139-ba6f-9a05b5155e12"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("f8d7c69a-30df-4e0d-8ebd-906ef699dabc"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("30b2e062-75b4-4802-867b-61a10f24d8af"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("fba62d4f-f02b-4dc4-841e-75f2536f2301"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("bf482ae5-657b-458d-8616-80608e7f3764"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("00c22dbe-1e66-44ee-9208-afdb9dc8cd64"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("e5d2897f-b5ae-4063-9d7b-0eb6956f887f"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("d46ba576-2449-47cd-bdc1-753ce26340bd"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCollege")
                        .HasColumnType("text")
                        .HasColumnName("actual_college");

                    b.Property<string>("ActualOccupation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actual_occupation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExpectedCollege")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expected_college");

                    b.Property<string>("ExpectedCourse")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expected_course");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_user_profile_user_id");

                    b.ToTable("external_user_profile");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 879, DateTimeKind.Local).AddTicks(6288),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 0, 4, 879, DateTimeKind.Local).AddTicks(6315),
                            UserType = 0
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithOne("ExternalUserProfile")
                        .HasForeignKey("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", "UserId")
                        .HasConstraintName("fk_external_user_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("a517dc0c-a7ba-493d-ae81-9d988333f9d5"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("ExternalUserProfile");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
