// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210603204240_termsAndOptin")]
    partial class termsAndOptin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22e9e79a-b3e5-4da0-a15d-3a8ae3b2e6f8"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            TextContentId = new Guid("509a35fb-6f9a-48e8-a797-fa7e548945f6")
                        },
                        new
                        {
                            Id = new Guid("f3a82dc6-035b-4fbd-a4e6-dc93746447a2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            TextContentId = new Guid("799b5ff7-9a4d-410e-9b52-6d6cf6aee1bd")
                        },
                        new
                        {
                            Id = new Guid("afdb08ca-306c-4258-8ac1-4d1ea16a128e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            TextContentId = new Guid("9ee0902e-d911-4e6f-ab22-7ef9bc2e04f1")
                        },
                        new
                        {
                            Id = new Guid("280c31a0-8a62-411a-be4e-938cc1848678"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            TextContentId = new Guid("37549b95-6fae-44d4-b8db-4cf95fa74425")
                        },
                        new
                        {
                            Id = new Guid("161e81e3-768d-4ba6-a40f-d2b329eeba82"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            TextContentId = new Guid("01a217ba-24f1-4663-8e4a-be088b6a827e")
                        },
                        new
                        {
                            Id = new Guid("8a5327bf-c9ec-4262-829c-a643441b42b1"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            TextContentId = new Guid("434516ee-b475-4dc7-b134-345726328dd4")
                        },
                        new
                        {
                            Id = new Guid("c7c3961f-38db-4fd0-abd0-b5742f4bc24c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            TextContentId = new Guid("7c83ad17-3c03-4ef7-8bf6-3a456051fd47")
                        },
                        new
                        {
                            Id = new Guid("11e99a43-3304-4b0a-992c-415e280424f8"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            TextContentId = new Guid("163447dd-70b0-4121-ad7f-d4bcc75fc6a8")
                        },
                        new
                        {
                            Id = new Guid("aef2f37f-dc0b-4a45-b770-dbd0925e90ea"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            TextContentId = new Guid("122c0d77-6802-4cee-bd64-ee09497bb18b")
                        },
                        new
                        {
                            Id = new Guid("d7949ea0-97b9-4ef9-9b45-3f7962202d12"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            TextContentId = new Guid("40832c79-9ea7-4c50-bae6-32a442a9cb67")
                        },
                        new
                        {
                            Id = new Guid("501755e7-b4c9-44fb-aceb-8ef3c753792e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            TextContentId = new Guid("bbe46342-943e-4267-9ca3-4b54869263eb")
                        },
                        new
                        {
                            Id = new Guid("d1c43d5c-d57d-46fa-b9d4-dd1e573cbbe4"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            TextContentId = new Guid("f0bff2d6-9b39-430f-bb2b-e1ed4ca880f4")
                        },
                        new
                        {
                            Id = new Guid("28799215-4fc1-4e84-b183-28159e634215"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            TextContentId = new Guid("c461bb95-631d-4f18-992c-17c22a7d99c1")
                        },
                        new
                        {
                            Id = new Guid("5163ceab-0929-4da9-87fd-c3f5f1f890e3"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            TextContentId = new Guid("1b92ca9d-d8c2-48ce-8828-e9c0a0ca85a7")
                        },
                        new
                        {
                            Id = new Guid("69cb2119-4808-45d2-bac3-d6a34e6a132e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            TextContentId = new Guid("18dbb1da-082e-480a-b135-8a6557db5d58")
                        },
                        new
                        {
                            Id = new Guid("4cf7ad19-e1de-413e-a402-794e0993a378"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            TextContentId = new Guid("7a6d4b6a-4dce-4096-b526-3561b009178b")
                        },
                        new
                        {
                            Id = new Guid("9f5eb984-6801-4c45-a551-68e7266bd57b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            TextContentId = new Guid("5a66e080-307b-43a6-bfe8-868b055ab05f")
                        },
                        new
                        {
                            Id = new Guid("97bd6a2b-a402-40cb-8a9a-160c648758c1"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            TextContentId = new Guid("5171766d-5bc7-4f1d-96a6-6282dc318df1")
                        },
                        new
                        {
                            Id = new Guid("5a1d3505-23a7-4f07-af1a-006484bd04cd"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            TextContentId = new Guid("e7a09afd-0041-45b5-b28b-92edc7c9991c")
                        },
                        new
                        {
                            Id = new Guid("53988c62-e040-49f9-816c-47551590696f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            TextContentId = new Guid("769aaacf-537e-4675-a6c4-c5cf2ef05b20")
                        },
                        new
                        {
                            Id = new Guid("30420a4c-bfa9-447b-929d-43daca37afa2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            TextContentId = new Guid("d0e05955-6e18-4b17-b58e-0c603f3fd08a")
                        },
                        new
                        {
                            Id = new Guid("d13e8b48-5177-4a25-b07c-11345f18331b"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            TextContentId = new Guid("6fa8db41-b661-4a70-a4dc-02dcee560fb4")
                        },
                        new
                        {
                            Id = new Guid("0574a349-c0f7-4445-bf28-c6e912164023"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            TextContentId = new Guid("f36e3b3b-cefe-4108-beff-9c25f263b7f7")
                        },
                        new
                        {
                            Id = new Guid("2a10b6eb-10b7-4eb4-af3c-5ca8f5331af6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            TextContentId = new Guid("5a5f2eb1-9466-4222-be81-53148a434e0f")
                        },
                        new
                        {
                            Id = new Guid("e9fd7bf3-4be4-45a2-a242-e224bd978c25"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            TextContentId = new Guid("24a2ad17-e567-484c-9d05-f2e0c08fcf59")
                        },
                        new
                        {
                            Id = new Guid("3e3d0e58-e64c-4e6a-a11a-8a62ae97264f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            TextContentId = new Guid("c8e2c119-d88e-4ee1-bb8d-e2aff8751b68")
                        },
                        new
                        {
                            Id = new Guid("8b5685de-9f7c-4386-b05a-a8c5a1a644eb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            TextContentId = new Guid("9dbbf8f6-224f-408b-b66b-f9ccf6441f0c")
                        },
                        new
                        {
                            Id = new Guid("b6fe2f15-c2b1-446f-9276-ac89c18a3ae5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            TextContentId = new Guid("b35cd8cd-44f8-47c5-9d07-2ac47077b1d9")
                        },
                        new
                        {
                            Id = new Guid("f1ed9069-bd43-4f1d-a421-c1f156bdfcb1"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            TextContentId = new Guid("08061d32-c154-4320-8c71-bb633a58f285")
                        },
                        new
                        {
                            Id = new Guid("204a651a-7a46-425e-be7f-1977a1eb8f00"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            TextContentId = new Guid("e160b2b4-984b-4846-853e-64b9648a60a2")
                        },
                        new
                        {
                            Id = new Guid("167deb11-f3d4-4bb3-ab34-d86918c29e59"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            TextContentId = new Guid("d88e2c41-e152-418e-aae1-b57dbc26d70e")
                        },
                        new
                        {
                            Id = new Guid("83f059aa-0c47-4f9c-a756-46d2d33a1288"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            TextContentId = new Guid("b14ee576-b2eb-4352-b6ae-4a5e53ddc2e0")
                        },
                        new
                        {
                            Id = new Guid("7ec85440-9ae7-4992-b6dc-d9387a1c0cc3"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            TextContentId = new Guid("f41550c3-3e7b-4113-9878-0b06d5830ec7")
                        },
                        new
                        {
                            Id = new Guid("742c76b3-7573-4a30-acb2-ead5b843f38c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            TextContentId = new Guid("565babaa-71cd-4daf-b3f6-cdd9f2cb9429")
                        },
                        new
                        {
                            Id = new Guid("903957c9-616a-45ef-8c5d-037812f83bc8"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            TextContentId = new Guid("8e81a688-1522-4bc0-8884-383bfa09cd2e")
                        },
                        new
                        {
                            Id = new Guid("ee705109-6b4e-4355-b013-31b2234a6264"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            TextContentId = new Guid("8e5af3d1-0ef5-4756-88bd-9f81be1b7c5d")
                        },
                        new
                        {
                            Id = new Guid("9223ed30-8481-46c1-acb3-4ff478f61f45"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            TextContentId = new Guid("e09b0dd5-2685-4429-b040-1afc0a810b85")
                        },
                        new
                        {
                            Id = new Guid("21066dc9-17b0-493a-b5ee-d6d09602c8b6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            TextContentId = new Guid("9e11a204-25e6-4ee8-9e68-705cf0db32d7")
                        },
                        new
                        {
                            Id = new Guid("06bfed6a-0c21-48f9-95c2-5da61a6cbfe2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            TextContentId = new Guid("3357171f-6c18-4b78-86a8-ea62688ba465")
                        },
                        new
                        {
                            Id = new Guid("a1ef9376-c864-44ea-bd5a-2a709df1316a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            TextContentId = new Guid("11334691-17c2-4ea6-92e8-943bdc43b589")
                        },
                        new
                        {
                            Id = new Guid("567a1329-ff93-42e8-bc48-815fa9be9f30"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            TextContentId = new Guid("f9c79aeb-16a4-478f-bf3c-d3e09a283103")
                        },
                        new
                        {
                            Id = new Guid("777947d7-7a2d-45a2-818e-9257b22e301d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            TextContentId = new Guid("ee911579-d50a-4538-8258-9ff3dbf62366")
                        },
                        new
                        {
                            Id = new Guid("44df11ae-ed55-4afb-bf75-1c2bb809c6c9"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            TextContentId = new Guid("0c47c277-89ab-4a82-a464-be675ba5f16c")
                        },
                        new
                        {
                            Id = new Guid("7200aaf7-82fa-4aaa-ad94-8016ff31e91e"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            TextContentId = new Guid("fbc0bf68-4792-4612-8b62-0955247d8c15")
                        },
                        new
                        {
                            Id = new Guid("38710cce-bda8-4538-bf13-7f34f1ca0c6a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            TextContentId = new Guid("2725c99a-7bbf-40cb-a024-c1559218b113")
                        },
                        new
                        {
                            Id = new Guid("2c012723-1ecb-4b10-a2d6-a2f39e0c5aef"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            TextContentId = new Guid("b24aaf30-7407-4820-9bda-d30f446717d3")
                        },
                        new
                        {
                            Id = new Guid("665251a8-288d-4591-845a-59e72954c7ed"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            TextContentId = new Guid("c5d04739-3738-4fde-8c7d-9c950b7bedf4")
                        },
                        new
                        {
                            Id = new Guid("04b92e73-c12f-44af-866a-4186a37a414b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            TextContentId = new Guid("319ffb03-f73a-4d8d-ba35-b47f50e4c88c")
                        },
                        new
                        {
                            Id = new Guid("f45a70a1-430a-4ec8-98bd-66459984da0c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            TextContentId = new Guid("2d0840dc-615b-44bc-9130-0b2fe5b535a8")
                        },
                        new
                        {
                            Id = new Guid("92665c6b-a2d3-4b7a-833f-ecb76e053d44"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            TextContentId = new Guid("91f0e04d-e28d-4ac0-a7d1-b1613ce546bd")
                        },
                        new
                        {
                            Id = new Guid("1ecd1a35-bc47-4169-bb82-a5ba2a9138c3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            TextContentId = new Guid("d921bd3a-af3f-44b0-a4ff-69ac8733ade8")
                        },
                        new
                        {
                            Id = new Guid("5c27fa00-4885-4c21-9385-feac06a9eab3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            TextContentId = new Guid("61cf287f-a0c3-4eea-a8e4-bef2d3f40087")
                        },
                        new
                        {
                            Id = new Guid("954bf72d-8ae6-4e69-83fc-896aa31b3912"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            TextContentId = new Guid("a8a5a2ed-d7a2-488c-ba27-78cdf53bdff9")
                        },
                        new
                        {
                            Id = new Guid("83aada9e-cd19-481f-83a3-ec0828a6a438"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            TextContentId = new Guid("5b66a8d3-f147-428f-af07-44e8e34fbcec")
                        },
                        new
                        {
                            Id = new Guid("c4417926-11e0-4276-8e05-6a53bca65425"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            TextContentId = new Guid("854d7868-4a76-468f-83a5-f3318a856af0")
                        },
                        new
                        {
                            Id = new Guid("d252ee58-b7f4-4c84-babe-38f67c81288d"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            TextContentId = new Guid("c5a4aa2c-c646-4421-a80a-6f1a833a1edc")
                        },
                        new
                        {
                            Id = new Guid("b69e2a2a-38d4-464c-959c-a0957aa18d92"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            TextContentId = new Guid("6b45ac00-59a0-4faa-b4e3-2779a9e5049d")
                        },
                        new
                        {
                            Id = new Guid("d5138a24-9142-470c-b981-945ea516fedd"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            TextContentId = new Guid("e7d08dac-9ca0-487a-a3d0-7124dc9cc0b2")
                        },
                        new
                        {
                            Id = new Guid("0aea7840-23c0-458e-a9a0-164a09303749"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            TextContentId = new Guid("3d4bd37f-5828-49bb-8172-c2ac47d0f36d")
                        },
                        new
                        {
                            Id = new Guid("ea17a614-9a84-4d05-a218-e0323ca5e038"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            TextContentId = new Guid("d4c444cf-2198-4094-aa2e-ca0017d4269f")
                        },
                        new
                        {
                            Id = new Guid("60a0b039-f3cc-4474-ab32-3a9a61d147c5"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            TextContentId = new Guid("8ab8bc2b-c3e1-434a-a054-f36a756e7b28")
                        },
                        new
                        {
                            Id = new Guid("043ebfca-51fe-4bed-a19a-4a53f544a40d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            TextContentId = new Guid("c06cf431-2df0-46d0-8490-4d3ed3b380e6")
                        },
                        new
                        {
                            Id = new Guid("2cbdce4f-8465-46e2-86ad-7daae2d76ca0"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            TextContentId = new Guid("7a7ded60-4873-4b48-aa3b-bab834135759")
                        },
                        new
                        {
                            Id = new Guid("caea16aa-7a5a-4b2d-add9-bf22d6a90e09"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            TextContentId = new Guid("85736465-ec81-41a7-858a-cb348a6bfe86")
                        },
                        new
                        {
                            Id = new Guid("6846ddd3-9971-449d-a766-d5cbd3c8d17e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            TextContentId = new Guid("a4f4e8ce-aa15-4e70-b038-d1cceedcd6b1")
                        },
                        new
                        {
                            Id = new Guid("6c5d566b-0482-4904-a061-79060ac22bc8"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            TextContentId = new Guid("e42abb83-602f-48eb-893b-baa081c0bee5")
                        },
                        new
                        {
                            Id = new Guid("d2b853b1-86ff-4d66-a924-6345baf7ed23"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            TextContentId = new Guid("151f70b2-cf81-4a48-a73d-3a4051355f4b")
                        },
                        new
                        {
                            Id = new Guid("03d005bf-93da-48f8-8718-4da1698f3bda"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            TextContentId = new Guid("1832fae9-5b1e-4c9b-a5e3-4005493df2e5")
                        },
                        new
                        {
                            Id = new Guid("09fc02a0-9317-4769-b906-7a5304bd92ea"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            TextContentId = new Guid("ed7f31b8-5a90-42e6-82de-707648e9a8a1")
                        },
                        new
                        {
                            Id = new Guid("9893de73-67b5-478f-9baf-526dab9b5dea"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            TextContentId = new Guid("fe71c334-18f7-4ed3-940e-24e84b36f419")
                        },
                        new
                        {
                            Id = new Guid("e9e3206b-ea87-4bc2-a7bd-7361658a98a2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            TextContentId = new Guid("2627709c-89b0-4797-beef-7bcb533cafad")
                        },
                        new
                        {
                            Id = new Guid("1341af4c-bf72-4780-9cf2-d85b9b8d2b89"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            TextContentId = new Guid("496014de-8797-4ae0-ae30-a74384792648")
                        },
                        new
                        {
                            Id = new Guid("0d266fc9-6a66-49f0-bc94-612898e0e399"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            TextContentId = new Guid("4344be6c-9d08-4e4a-8fe3-fa2bdfc0b384")
                        },
                        new
                        {
                            Id = new Guid("f6290e85-7502-43b6-a59e-01c7dcccc187"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            TextContentId = new Guid("5c14dbe7-7449-47bd-a7e2-fb49e2d541a7")
                        },
                        new
                        {
                            Id = new Guid("d4198af8-ad68-4dea-a37c-29ce0300081d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            TextContentId = new Guid("a11ed862-d40c-4a92-bcc0-017cf9276946")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 150, DateTimeKind.Local).AddTicks(7876),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 150, DateTimeKind.Local).AddTicks(7882)
                        },
                        new
                        {
                            Id = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1061),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1062)
                        },
                        new
                        {
                            Id = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1078),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1079)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12a1582a-ff05-4585-8792-40597af38f23"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 142, DateTimeKind.Local).AddTicks(8639),
                            EnunciatedId = new Guid("33b6bf4b-9ffd-43f5-8dbc-279f1904543b"),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            Index = 0,
                            SubjectId = new Guid("843e8693-f6e5-4a06-abee-95e9848e4a2c"),
                            SupportingTextId = new Guid("19847b79-f24d-4ceb-b4ba-398cdf903e78"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 142, DateTimeKind.Local).AddTicks(8645)
                        },
                        new
                        {
                            Id = new Guid("e172a5a3-7be7-4599-9f69-b4d1afe89c4c"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1732),
                            EnunciatedId = new Guid("d77148e5-9bc5-4e96-acfe-d8db90ecf6ab"),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            Index = 1,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("f339126f-08e3-4aad-b8cd-8f9315ad6865"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1738)
                        },
                        new
                        {
                            Id = new Guid("85775aa0-74b3-4ce0-95e0-c448eb515cab"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1753),
                            EnunciatedId = new Guid("dcb01c26-4a1f-49dc-ae78-a30e1ac674fb"),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            Index = 2,
                            SubjectId = new Guid("abcf30e3-4556-4eca-b013-fad1a4bd747d"),
                            SupportingTextId = new Guid("252ad742-f806-4b94-8aec-5e0e3eea474b"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1755)
                        },
                        new
                        {
                            Id = new Guid("7082f8b8-3766-4321-9af0-a5abf3eaaa26"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1769),
                            EnunciatedId = new Guid("0473dca0-1c8c-4143-99b6-96c441f4c3ab"),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            Index = 3,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("f339126f-08e3-4aad-b8cd-8f9315ad6865"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1770)
                        },
                        new
                        {
                            Id = new Guid("79f6c17c-195e-49c4-b095-b573f327aeeb"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1782),
                            EnunciatedId = new Guid("fd19af81-60e2-48c0-a029-e88ac9f65eda"),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            Index = 4,
                            SubjectId = new Guid("a7737afe-9c61-4aa4-8355-76b636387866"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1783)
                        },
                        new
                        {
                            Id = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1796),
                            EnunciatedId = new Guid("777ba3b9-b7a1-457f-82fd-f2c3058db47d"),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            Index = 0,
                            SubjectId = new Guid("843e8693-f6e5-4a06-abee-95e9848e4a2c"),
                            SupportingTextId = new Guid("2d93005a-d4c8-47b5-b619-820edb5d5205"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1797)
                        },
                        new
                        {
                            Id = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1811),
                            EnunciatedId = new Guid("0518de41-a4da-4377-860e-403657582bbe"),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            Index = 1,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("b39a50d0-4589-4972-9250-c833e3aa7c06"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1812)
                        },
                        new
                        {
                            Id = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1866),
                            EnunciatedId = new Guid("712b68e9-aa42-4e9b-97be-df14cd8b408a"),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            Index = 2,
                            SubjectId = new Guid("abcf30e3-4556-4eca-b013-fad1a4bd747d"),
                            SupportingTextId = new Guid("36f91d84-bdee-4c97-b96b-07731b4169ea"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1867)
                        },
                        new
                        {
                            Id = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1881),
                            EnunciatedId = new Guid("066581bb-3ba5-4423-a48a-e6f78d444bb6"),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            Index = 3,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("b39a50d0-4589-4972-9250-c833e3aa7c06"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1882)
                        },
                        new
                        {
                            Id = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1894),
                            EnunciatedId = new Guid("35a47ec6-5887-4b67-b9ea-7910b7b06bdb"),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            Index = 4,
                            SubjectId = new Guid("a7737afe-9c61-4aa4-8355-76b636387866"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1895)
                        },
                        new
                        {
                            Id = new Guid("af0b8a2b-64b3-437d-955a-32f0989399cf"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1908),
                            EnunciatedId = new Guid("98fb3717-f3d8-41b1-902c-503096a55341"),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            Index = 0,
                            SubjectId = new Guid("843e8693-f6e5-4a06-abee-95e9848e4a2c"),
                            SupportingTextId = new Guid("52f7d277-ef0a-497e-bc16-c51278332356"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1909)
                        },
                        new
                        {
                            Id = new Guid("4197f3a0-c0ac-4b0d-81c3-7d4d079bb517"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1923),
                            EnunciatedId = new Guid("ac4a5242-d9c2-4371-802d-dbf4f8715bde"),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            Index = 1,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("52f7d277-ef0a-497e-bc16-c51278332356"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1924)
                        },
                        new
                        {
                            Id = new Guid("9360994c-4470-4539-b653-658589efb272"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1937),
                            EnunciatedId = new Guid("73688815-9c7b-48cc-933c-e56afc6a6fc9"),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            Index = 2,
                            SubjectId = new Guid("abcf30e3-4556-4eca-b013-fad1a4bd747d"),
                            SupportingTextId = new Guid("52f7d277-ef0a-497e-bc16-c51278332356"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1938)
                        },
                        new
                        {
                            Id = new Guid("a2adabe6-2687-4441-8999-144462d2ec01"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1981),
                            EnunciatedId = new Guid("a2801257-d201-4d5f-b42a-b4ba4560014b"),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            Index = 3,
                            SubjectId = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            SupportingTextId = new Guid("52f7d277-ef0a-497e-bc16-c51278332356"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1982)
                        },
                        new
                        {
                            Id = new Guid("30787a9f-faf0-4472-9593-b162e6830358"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1996),
                            EnunciatedId = new Guid("01ff1ab4-b6bc-4aa3-a621-0fc3c98bbfe8"),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            Index = 4,
                            SubjectId = new Guid("a7737afe-9c61-4aa4-8355-76b636387866"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 143, DateTimeKind.Local).AddTicks(1997)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2aa56fe-fd18-4694-bfcd-efe67b3484e9"),
                            ChosenAlternativeId = new Guid("3e3d0e58-e64c-4e6a-a11a-8a62ae97264f"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(7380),
                            QuestionId = new Guid("14bfc129-088e-48d5-842b-666611703a71"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(7404),
                            UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3")
                        },
                        new
                        {
                            Id = new Guid("09bcb0b3-f28f-4247-9a87-cfa55fd170e1"),
                            ChosenAlternativeId = new Guid("167deb11-f3d4-4bb3-ab34-d86918c29e59"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8849),
                            QuestionId = new Guid("31300056-b0c6-4908-a47a-75a57349775e"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8854),
                            UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3")
                        },
                        new
                        {
                            Id = new Guid("6b27df6f-febf-492c-947f-4341e9364b10"),
                            ChosenAlternativeId = new Guid("ee705109-6b4e-4355-b013-31b2234a6264"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8903),
                            QuestionId = new Guid("4a704586-d2cf-4d1e-9409-77452016d771"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8904),
                            UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3")
                        },
                        new
                        {
                            Id = new Guid("ca29e84e-307d-4bb9-be26-72d0c2166880"),
                            ChosenAlternativeId = new Guid("567a1329-ff93-42e8-bc48-815fa9be9f30"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8920),
                            QuestionId = new Guid("d34f13e3-9f7d-4774-ad5d-6f1a598eb6ab"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8921),
                            UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3")
                        },
                        new
                        {
                            Id = new Guid("ee01e126-c1d7-42de-aad2-b2b5e3c0c429"),
                            ChosenAlternativeId = new Guid("2c012723-1ecb-4b10-a2d6-a2f39e0c5aef"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8924),
                            QuestionId = new Guid("0f2d1098-a18e-4520-99c2-299cfd764651"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 158, DateTimeKind.Local).AddTicks(8925),
                            UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("843e8693-f6e5-4a06-abee-95e9848e4a2c"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(6160),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(6620)
                        },
                        new
                        {
                            Id = new Guid("abcf30e3-4556-4eca-b013-fad1a4bd747d"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7421),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7425)
                        },
                        new
                        {
                            Id = new Guid("39e3910f-1e17-48a1-bad2-5f33819b1b78"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7428),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("843e8693-f6e5-4a06-abee-95e9848e4a2c"),
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7429)
                        },
                        new
                        {
                            Id = new Guid("a7737afe-9c61-4aa4-8355-76b636387866"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7430),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 141, DateTimeKind.Local).AddTicks(7431)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19847b79-f24d-4ceb-b4ba-398cdf903e78"),
                            ContentId = new Guid("2a5035fe-8d0d-49b6-b770-4c2fc3244c8f")
                        },
                        new
                        {
                            Id = new Guid("252ad742-f806-4b94-8aec-5e0e3eea474b"),
                            ContentId = new Guid("4b8666e8-b49d-494b-aa60-35d137168dc0")
                        },
                        new
                        {
                            Id = new Guid("f339126f-08e3-4aad-b8cd-8f9315ad6865"),
                            ContentId = new Guid("44171925-7a57-406d-985b-90f433cfa3a2")
                        },
                        new
                        {
                            Id = new Guid("2d93005a-d4c8-47b5-b619-820edb5d5205"),
                            ContentId = new Guid("8c558402-0a88-49a0-aff9-16c7252ce6ac")
                        },
                        new
                        {
                            Id = new Guid("36f91d84-bdee-4c97-b96b-07731b4169ea"),
                            ContentId = new Guid("e672aa2b-8a4f-4d41-ab90-f9ce0680ae48")
                        },
                        new
                        {
                            Id = new Guid("b39a50d0-4589-4972-9250-c833e3aa7c06"),
                            ContentId = new Guid("2e98c0a8-ff60-4b51-b44a-3489ed18c7cb")
                        },
                        new
                        {
                            Id = new Guid("61e0517e-ca88-4765-929e-b4f25acd88ea"),
                            ContentId = new Guid("3149d235-508e-4308-b7c9-8cea301cb255")
                        },
                        new
                        {
                            Id = new Guid("0dd9205e-900a-45e4-8c1a-9a36f8ced585"),
                            ContentId = new Guid("6eb64d40-c8a3-400b-a6fc-d0bf5cc65962")
                        },
                        new
                        {
                            Id = new Guid("52f7d277-ef0a-497e-bc16-c51278332356"),
                            ContentId = new Guid("83fbcbe8-9648-4af4-84d4-960570f68e33")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("FinalizedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finalized_date");

                    b.HasKey("UserId", "ExamId")
                        .HasName("pk_finalized_exams");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_finalized_exams_exam_id");

                    b.ToTable("finalized_exams");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb8db550-2c49-4cc1-a225-cb18aa740635"),
                            CloseDate = new DateTime(2021, 6, 7, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            OpenDate = new DateTime(2021, 6, 7, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("8fe3a88d-abae-4bf0-a1ef-a469397efd72"),
                            CloseDate = new DateTime(2021, 6, 8, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("911d690a-df42-4e24-93f5-f979e907373e"),
                            OpenDate = new DateTime(2021, 6, 8, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("f6264de4-027a-4fae-ae76-4e9551a97cbf"),
                            CloseDate = new DateTime(2021, 6, 3, 21, 42, 39, 151, DateTimeKind.Local).AddTicks(1017),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            OpenDate = new DateTime(2021, 6, 3, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1017)
                        },
                        new
                        {
                            Id = new Guid("d031eb1a-a55a-465d-834c-15d151255b7f"),
                            CloseDate = new DateTime(2021, 6, 4, 19, 42, 39, 151, DateTimeKind.Local).AddTicks(1017),
                            ExamId = new Guid("d2fcf272-801c-4d5d-a593-5ea0a7453343"),
                            OpenDate = new DateTime(2021, 6, 4, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1017)
                        },
                        new
                        {
                            Id = new Guid("d7c0c0d1-d627-435e-b792-3e5c35e4b0cd"),
                            CloseDate = new DateTime(2021, 6, 1, 19, 42, 39, 151, DateTimeKind.Local).AddTicks(1065),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            OpenDate = new DateTime(2021, 6, 1, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1065)
                        },
                        new
                        {
                            Id = new Guid("fbea72a6-097c-4ead-b8c8-e07e3c8ccc72"),
                            CloseDate = new DateTime(2021, 6, 2, 19, 42, 39, 151, DateTimeKind.Local).AddTicks(1065),
                            ExamId = new Guid("ea3b16a4-bdd2-48a0-b563-c313b087cf5c"),
                            OpenDate = new DateTime(2021, 6, 2, 17, 42, 39, 151, DateTimeKind.Local).AddTicks(1065)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33b6bf4b-9ffd-43f5-8dbc-279f1904543b"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d77148e5-9bc5-4e96-acfe-d8db90ecf6ab"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("dcb01c26-4a1f-49dc-ae78-a30e1ac674fb"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("0473dca0-1c8c-4143-99b6-96c441f4c3ab"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("fd19af81-60e2-48c0-a029-e88ac9f65eda"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("777ba3b9-b7a1-457f-82fd-f2c3058db47d"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("0518de41-a4da-4377-860e-403657582bbe"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("712b68e9-aa42-4e9b-97be-df14cd8b408a"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("066581bb-3ba5-4423-a48a-e6f78d444bb6"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("35a47ec6-5887-4b67-b9ea-7910b7b06bdb"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("98fb3717-f3d8-41b1-902c-503096a55341"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("ac4a5242-d9c2-4371-802d-dbf4f8715bde"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("73688815-9c7b-48cc-933c-e56afc6a6fc9"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("a2801257-d201-4d5f-b42a-b4ba4560014b"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("01ff1ab4-b6bc-4aa3-a621-0fc3c98bbfe8"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("509a35fb-6f9a-48e8-a797-fa7e548945f6"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("799b5ff7-9a4d-410e-9b52-6d6cf6aee1bd"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("9ee0902e-d911-4e6f-ab22-7ef9bc2e04f1"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("37549b95-6fae-44d4-b8db-4cf95fa74425"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("01a217ba-24f1-4663-8e4a-be088b6a827e"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("434516ee-b475-4dc7-b134-345726328dd4"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("7c83ad17-3c03-4ef7-8bf6-3a456051fd47"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("163447dd-70b0-4121-ad7f-d4bcc75fc6a8"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("122c0d77-6802-4cee-bd64-ee09497bb18b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("40832c79-9ea7-4c50-bae6-32a442a9cb67"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("bbe46342-943e-4267-9ca3-4b54869263eb"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("f0bff2d6-9b39-430f-bb2b-e1ed4ca880f4"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("c461bb95-631d-4f18-992c-17c22a7d99c1"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("1b92ca9d-d8c2-48ce-8828-e9c0a0ca85a7"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("18dbb1da-082e-480a-b135-8a6557db5d58"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("7a6d4b6a-4dce-4096-b526-3561b009178b"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("5a66e080-307b-43a6-bfe8-868b055ab05f"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("5171766d-5bc7-4f1d-96a6-6282dc318df1"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("e7a09afd-0041-45b5-b28b-92edc7c9991c"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("769aaacf-537e-4675-a6c4-c5cf2ef05b20"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("d0e05955-6e18-4b17-b58e-0c603f3fd08a"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("6fa8db41-b661-4a70-a4dc-02dcee560fb4"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("f36e3b3b-cefe-4108-beff-9c25f263b7f7"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("5a5f2eb1-9466-4222-be81-53148a434e0f"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("24a2ad17-e567-484c-9d05-f2e0c08fcf59"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c8e2c119-d88e-4ee1-bb8d-e2aff8751b68"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("9dbbf8f6-224f-408b-b66b-f9ccf6441f0c"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("b35cd8cd-44f8-47c5-9d07-2ac47077b1d9"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("08061d32-c154-4320-8c71-bb633a58f285"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("e160b2b4-984b-4846-853e-64b9648a60a2"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("d88e2c41-e152-418e-aae1-b57dbc26d70e"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("b14ee576-b2eb-4352-b6ae-4a5e53ddc2e0"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("f41550c3-3e7b-4113-9878-0b06d5830ec7"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("565babaa-71cd-4daf-b3f6-cdd9f2cb9429"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("8e81a688-1522-4bc0-8884-383bfa09cd2e"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("8e5af3d1-0ef5-4756-88bd-9f81be1b7c5d"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("e09b0dd5-2685-4429-b040-1afc0a810b85"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("9e11a204-25e6-4ee8-9e68-705cf0db32d7"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("3357171f-6c18-4b78-86a8-ea62688ba465"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("11334691-17c2-4ea6-92e8-943bdc43b589"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("f9c79aeb-16a4-478f-bf3c-d3e09a283103"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("ee911579-d50a-4538-8258-9ff3dbf62366"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("0c47c277-89ab-4a82-a464-be675ba5f16c"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("fbc0bf68-4792-4612-8b62-0955247d8c15"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2725c99a-7bbf-40cb-a024-c1559218b113"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("b24aaf30-7407-4820-9bda-d30f446717d3"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("c5d04739-3738-4fde-8c7d-9c950b7bedf4"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("319ffb03-f73a-4d8d-ba35-b47f50e4c88c"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("2d0840dc-615b-44bc-9130-0b2fe5b535a8"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("91f0e04d-e28d-4ac0-a7d1-b1613ce546bd"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("d921bd3a-af3f-44b0-a4ff-69ac8733ade8"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("61cf287f-a0c3-4eea-a8e4-bef2d3f40087"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("a8a5a2ed-d7a2-488c-ba27-78cdf53bdff9"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("5b66a8d3-f147-428f-af07-44e8e34fbcec"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("854d7868-4a76-468f-83a5-f3318a856af0"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("c5a4aa2c-c646-4421-a80a-6f1a833a1edc"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("6b45ac00-59a0-4faa-b4e3-2779a9e5049d"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("e7d08dac-9ca0-487a-a3d0-7124dc9cc0b2"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("3d4bd37f-5828-49bb-8172-c2ac47d0f36d"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("d4c444cf-2198-4094-aa2e-ca0017d4269f"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("8ab8bc2b-c3e1-434a-a054-f36a756e7b28"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("c06cf431-2df0-46d0-8490-4d3ed3b380e6"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("7a7ded60-4873-4b48-aa3b-bab834135759"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("85736465-ec81-41a7-858a-cb348a6bfe86"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("a4f4e8ce-aa15-4e70-b038-d1cceedcd6b1"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("e42abb83-602f-48eb-893b-baa081c0bee5"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("151f70b2-cf81-4a48-a73d-3a4051355f4b"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("1832fae9-5b1e-4c9b-a5e3-4005493df2e5"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("ed7f31b8-5a90-42e6-82de-707648e9a8a1"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("fe71c334-18f7-4ed3-940e-24e84b36f419"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("2627709c-89b0-4797-beef-7bcb533cafad"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("496014de-8797-4ae0-ae30-a74384792648"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("4344be6c-9d08-4e4a-8fe3-fa2bdfc0b384"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("5c14dbe7-7449-47bd-a7e2-fb49e2d541a7"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("a11ed862-d40c-4a92-bcc0-017cf9276946"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("2a5035fe-8d0d-49b6-b770-4c2fc3244c8f"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("8c558402-0a88-49a0-aff9-16c7252ce6ac"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3149d235-508e-4308-b7c9-8cea301cb255"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4b8666e8-b49d-494b-aa60-35d137168dc0"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("e672aa2b-8a4f-4d41-ab90-f9ce0680ae48"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("6eb64d40-c8a3-400b-a6fc-d0bf5cc65962"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("44171925-7a57-406d-985b-90f433cfa3a2"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("2e98c0a8-ff60-4b51-b44a-3489ed18c7cb"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("83fbcbe8-9648-4af4-84d4-960570f68e33"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCollege")
                        .HasColumnType("text")
                        .HasColumnName("actual_college");

                    b.Property<string>("ActualOccupation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actual_occupation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExpectedCollege")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expected_college");

                    b.Property<string>("ExpectedCourse")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expected_course");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_user_profile_user_id");

                    b.ToTable("external_user_profile");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_optins");

                    b.ToTable("optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.Property<bool>("WasAcceptedTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("was_accepted_terms");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 149, DateTimeKind.Local).AddTicks(9566),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 6, 3, 17, 42, 39, 149, DateTimeKind.Local).AddTicks(9579),
                            UserType = 0,
                            WasAcceptedTerms = false
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("OptinId")
                        .HasColumnType("integer")
                        .HasColumnName("optin_id");

                    b.Property<DateTime>("AcceptedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accepted_date");

                    b.HasKey("UserId", "OptinId")
                        .HasName("pk_user_optins");

                    b.HasIndex("OptinId")
                        .HasDatabaseName("ix_user_optins_optin_id");

                    b.ToTable("user_optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Finalizeds")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_finalized_exams_exams_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("FinalizedExams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_finalized_exams_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithOne("ExternalUserProfile")
                        .HasForeignKey("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", "UserId")
                        .HasConstraintName("fk_external_user_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("d2763212-525a-4ca7-b3c7-40036a70e6c3"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.Optin", "Optin")
                        .WithMany("UsersAccepted")
                        .HasForeignKey("OptinId")
                        .HasConstraintName("fk_user_optins_optins_optin_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("Optins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_optins_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Optin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Finalizeds");

                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Navigation("UsersAccepted");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("ExternalUserProfile");

                    b.Navigation("FinalizedExams");

                    b.Navigation("Optins");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
