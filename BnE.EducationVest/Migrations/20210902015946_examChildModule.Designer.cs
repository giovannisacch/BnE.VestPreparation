// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210902015946_examChildModule")]
    partial class examChildModule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3026227c-ff5f-41fa-8ffe-d9750ff597b2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            TextContentId = new Guid("c184b210-da5f-47e8-967a-d8fa638f0a31")
                        },
                        new
                        {
                            Id = new Guid("821a65d1-dd0b-43f3-91e8-80fabd658bab"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            TextContentId = new Guid("95ba52a3-9a19-449a-a555-cf589af2dde3")
                        },
                        new
                        {
                            Id = new Guid("aa346f06-a26a-40d4-a4b9-b6cfc5b279f7"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            TextContentId = new Guid("2d8aefe4-969f-4ebe-b4ea-924c436f54dd")
                        },
                        new
                        {
                            Id = new Guid("d43c8ce4-afe8-400f-a846-1c9aee931b69"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            TextContentId = new Guid("a555ae7b-0496-45be-8f9a-ce507aaf4a03")
                        },
                        new
                        {
                            Id = new Guid("7eb1368e-af86-410c-8cf6-0e8b448c7b71"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            TextContentId = new Guid("0d49940a-76ef-43cb-b968-52a7295c2dfc")
                        },
                        new
                        {
                            Id = new Guid("2670a226-4660-438f-9118-b5abd98ef37c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            TextContentId = new Guid("1bc19666-8b06-4859-b0b6-04d885f2967b")
                        },
                        new
                        {
                            Id = new Guid("105248bb-db13-4f91-b4cb-dca7dfad6b50"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            TextContentId = new Guid("c4a14691-9a53-4bd1-8e1f-92867361fef8")
                        },
                        new
                        {
                            Id = new Guid("26569666-d090-455d-9439-91ae1be46d18"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            TextContentId = new Guid("1484bb10-6e0f-40d2-b4b9-cf793704621d")
                        },
                        new
                        {
                            Id = new Guid("fc5ec6a9-e8ce-492d-9660-1b0d417827d7"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            TextContentId = new Guid("c31b16a2-e698-417d-afe4-6db2a3293b7b")
                        },
                        new
                        {
                            Id = new Guid("cf8a1530-77cc-447d-99d2-b1f7b9881798"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            TextContentId = new Guid("3e6d5cde-3dc2-4f78-a928-fbda19fa405b")
                        },
                        new
                        {
                            Id = new Guid("9da6b4af-d3a6-45ac-af6b-0ae4ab5e6230"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            TextContentId = new Guid("3a013888-6877-446e-8590-faa670db7f78")
                        },
                        new
                        {
                            Id = new Guid("0b90d194-a809-4220-8174-f50a69ddc9db"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            TextContentId = new Guid("764b3c3c-d1f6-4f37-9e83-8c50cb1375b5")
                        },
                        new
                        {
                            Id = new Guid("a67a0224-80cc-4da9-88bf-bd11eb1fa914"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            TextContentId = new Guid("4f2fade7-a47d-49de-bd0b-2355e09ec9f5")
                        },
                        new
                        {
                            Id = new Guid("bb94506d-135e-4889-9212-51310c0ae690"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            TextContentId = new Guid("25ec4987-68e2-4eca-8bb9-e47833cb9d33")
                        },
                        new
                        {
                            Id = new Guid("b4a5ac9b-716b-4c10-a5de-a2fff8171121"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            TextContentId = new Guid("081f7280-c2bb-4767-9117-e69b91c8166b")
                        },
                        new
                        {
                            Id = new Guid("293e4ae3-f1cc-4087-bddc-14d9fb9cba0b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            TextContentId = new Guid("ae9ecc6d-e785-40f1-ae3c-a2ef31a2bf02")
                        },
                        new
                        {
                            Id = new Guid("c5bd8a25-47da-4c84-8a86-9244eb915fc3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            TextContentId = new Guid("22e47e64-4533-4066-9aaf-6107944abc2a")
                        },
                        new
                        {
                            Id = new Guid("22c0111d-8216-4341-8bed-fa633263d328"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            TextContentId = new Guid("a7ed90d1-32ef-4028-b1d8-d6e437bcf1d3")
                        },
                        new
                        {
                            Id = new Guid("980859aa-6dfe-4b17-8e12-59756268bfcd"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            TextContentId = new Guid("57e9a34a-8eae-46f6-9549-bad284af11f8")
                        },
                        new
                        {
                            Id = new Guid("2c5bbe5f-f6ea-41fc-a904-73cdc349cbc2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            TextContentId = new Guid("3216b39a-9d21-4fc2-8bf0-d79864086798")
                        },
                        new
                        {
                            Id = new Guid("33991f47-3ed7-4a9b-bc98-8301d43ecfe8"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            TextContentId = new Guid("f39f9f83-7c3b-4072-b03b-731e7a5b2c41")
                        },
                        new
                        {
                            Id = new Guid("60d80ce0-a49e-48c3-8bbd-803375c231ad"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            TextContentId = new Guid("2075d608-a1fb-4e71-9071-c6fd16ed7062")
                        },
                        new
                        {
                            Id = new Guid("dc58123d-ac30-44df-845a-c29c065ffbbb"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            TextContentId = new Guid("ee96c35c-16a1-4d49-81ee-9c6da2d45c30")
                        },
                        new
                        {
                            Id = new Guid("7f5412a9-2eb6-40de-86da-24c2355650e9"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            TextContentId = new Guid("f668724c-5708-4926-a48d-f9d4d5fb6574")
                        },
                        new
                        {
                            Id = new Guid("deecdf66-3d78-4048-8538-8a7166bddcf2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            TextContentId = new Guid("6229c2f1-f154-49fb-b118-9141f7a3da77")
                        },
                        new
                        {
                            Id = new Guid("3e3d69e5-c704-447a-83c3-65bd17c9ba8b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            TextContentId = new Guid("d93cc0c2-50d2-4ad4-92ae-8f8f3d32b323")
                        },
                        new
                        {
                            Id = new Guid("442e5d51-e9af-4c97-9e63-acbc8245724e"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            TextContentId = new Guid("f903f5e1-bd61-4bdf-8103-1a7a9fed552a")
                        },
                        new
                        {
                            Id = new Guid("ca75f92b-83e7-4d8f-800b-69dffd2cbc18"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            TextContentId = new Guid("d6c63920-fb34-4449-bf7b-51c744bfd8db")
                        },
                        new
                        {
                            Id = new Guid("b2a2b8f1-095f-42e1-a598-1a6a17e6010f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            TextContentId = new Guid("923ba28b-d64e-4290-8810-68ac4dfe8146")
                        },
                        new
                        {
                            Id = new Guid("75a68f44-52d2-4453-9f5e-11e1336a1789"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            TextContentId = new Guid("59b95693-4c3e-41d9-a923-a760a259b2c8")
                        },
                        new
                        {
                            Id = new Guid("f6c2ff2e-2084-41ff-850b-e34627db4fb9"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            TextContentId = new Guid("42d3a1b3-31fe-4f77-a5e5-7beeff069b86")
                        },
                        new
                        {
                            Id = new Guid("4ed86d5c-2886-464e-b1b9-7c67d4bd6d9f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            TextContentId = new Guid("171d0869-711d-4948-8479-725c800daef3")
                        },
                        new
                        {
                            Id = new Guid("38063ee3-384e-4d8b-a726-7478dd775826"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            TextContentId = new Guid("0e4b4db3-c836-40d8-aa75-53df9b4cb762")
                        },
                        new
                        {
                            Id = new Guid("70ff7a1c-3577-44aa-b1b4-be8f8f771173"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            TextContentId = new Guid("e77dfe02-29c4-4d66-92e2-7790b2469078")
                        },
                        new
                        {
                            Id = new Guid("161cb166-47e4-40ab-9a6e-bf9635d36d62"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            TextContentId = new Guid("3fd4552a-5345-41f5-8176-5f04526683f3")
                        },
                        new
                        {
                            Id = new Guid("55f25ffd-ada2-4143-8ed7-6b3ca616fb60"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            TextContentId = new Guid("ac696226-fe4f-485f-9787-eef28afbe818")
                        },
                        new
                        {
                            Id = new Guid("f20b62a4-23fb-46c3-af24-4213a458f258"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            TextContentId = new Guid("c427cbc7-9aa4-4fa3-a2ab-144682fb6675")
                        },
                        new
                        {
                            Id = new Guid("fbaada6a-d265-46a4-b6eb-64dd15c11c12"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            TextContentId = new Guid("ccdbd9f7-edc3-4079-a952-030bce89ac91")
                        },
                        new
                        {
                            Id = new Guid("e2082264-b6de-4e7c-aa64-06a3d247ec79"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            TextContentId = new Guid("7bc93777-4747-4dd9-8df7-90ae03e81d02")
                        },
                        new
                        {
                            Id = new Guid("266c6866-63f4-4221-aa40-061346c2ecc6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            TextContentId = new Guid("3aa164b7-ae1d-41fc-9637-fa43b778c273")
                        },
                        new
                        {
                            Id = new Guid("dbba214e-4f3d-44f6-a519-0d1ec523c04c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            TextContentId = new Guid("e98d3525-27d5-47c7-b207-e635865dfa35")
                        },
                        new
                        {
                            Id = new Guid("678f09d9-c3db-4ca4-a1b7-ee15d078e8d2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            TextContentId = new Guid("59fca079-c5d6-43d7-b9e8-408de49e4c4e")
                        },
                        new
                        {
                            Id = new Guid("d515f4fd-dd8a-479b-a200-9a9ce49a2ca0"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            TextContentId = new Guid("25f011ec-0cbe-4034-baf2-59645c6910f8")
                        },
                        new
                        {
                            Id = new Guid("b6145d62-dad1-447b-89b3-8b6fd386692a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            TextContentId = new Guid("16dfda6c-2592-4778-b51c-79246df22898")
                        },
                        new
                        {
                            Id = new Guid("f810c34b-4779-4614-bf1b-840630527b51"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            TextContentId = new Guid("fb5aa51d-7cce-49e0-8011-85b928ca858f")
                        },
                        new
                        {
                            Id = new Guid("2ed5f67b-5e7d-4353-be83-fcd6469da654"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            TextContentId = new Guid("80a67e1d-5325-4260-9b3f-ee5ff8d826c4")
                        },
                        new
                        {
                            Id = new Guid("28537ec6-85d6-49e2-9c8b-9007c69265d1"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            TextContentId = new Guid("cb7df6d2-2d1a-4f80-9395-b85b9c474d23")
                        },
                        new
                        {
                            Id = new Guid("1021894c-ebbb-4202-a0eb-e2cccd01949b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            TextContentId = new Guid("61612dca-c182-4bb9-8a94-9f5a77f73fe5")
                        },
                        new
                        {
                            Id = new Guid("dba3cccb-44c2-4ab8-97ce-665704389743"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            TextContentId = new Guid("15a29ea1-c908-4acb-a071-e74bff10c6f2")
                        },
                        new
                        {
                            Id = new Guid("a91c3366-f6bf-45bc-9676-522c92fbd246"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            TextContentId = new Guid("6fff1499-0a0f-44e3-bf8c-c2a9b5d344fa")
                        },
                        new
                        {
                            Id = new Guid("e7a74bae-127e-46a3-b71a-04745360c657"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            TextContentId = new Guid("7f0e0429-bc61-4273-86ba-9694a0a905db")
                        },
                        new
                        {
                            Id = new Guid("63fdc34b-286d-4ea3-aad1-c30da49eddcd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            TextContentId = new Guid("ad4b553f-3942-4e6b-8309-bc0721387d4f")
                        },
                        new
                        {
                            Id = new Guid("eda3390b-4cbf-44d8-9df7-7815b2978bd1"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            TextContentId = new Guid("b31a2760-bb3b-4201-8996-1c70d11f5ec3")
                        },
                        new
                        {
                            Id = new Guid("b0e4d08e-1942-4bc5-b562-d75e85dbe4dd"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            TextContentId = new Guid("057936ec-dbab-490e-ade9-20dd420b91c7")
                        },
                        new
                        {
                            Id = new Guid("11d7fc02-317b-42bc-a873-ce4da413b5e2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            TextContentId = new Guid("13919a65-4903-4030-a18f-18cde912ba50")
                        },
                        new
                        {
                            Id = new Guid("0ab32ec9-85b9-4a4e-a445-f7a6571c9bd3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            TextContentId = new Guid("9c19e47e-17de-401b-82ef-1d173b0cee49")
                        },
                        new
                        {
                            Id = new Guid("2e944256-0adf-478c-9484-e8437f1205fb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            TextContentId = new Guid("1f3defab-e184-4ace-9bdd-cd6ea0ecc15f")
                        },
                        new
                        {
                            Id = new Guid("4099b104-1c46-41ee-b232-fd1e5778a8ab"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            TextContentId = new Guid("48e549bb-0af6-4e13-8e59-d3992e76dd60")
                        },
                        new
                        {
                            Id = new Guid("a043c354-192d-4eef-b3d2-d00e42e82368"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            TextContentId = new Guid("3963f574-5471-49da-a58f-42a830bb1329")
                        },
                        new
                        {
                            Id = new Guid("70aad871-3e57-4e6a-adda-ba9195645f0a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            TextContentId = new Guid("1a270884-92cf-44f7-9fd2-729fbd894904")
                        },
                        new
                        {
                            Id = new Guid("5ac517e7-c1ea-4853-8242-f421cdb12375"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            TextContentId = new Guid("0f3373fd-c112-4368-9ade-df5dd0ac5076")
                        },
                        new
                        {
                            Id = new Guid("b0285f75-7c0a-4088-9732-c826951c78be"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            TextContentId = new Guid("acdb1780-56c1-47b3-bb63-a04031b738a5")
                        },
                        new
                        {
                            Id = new Guid("c698f719-2b44-4aad-8ef3-1b1bd7a0905b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            TextContentId = new Guid("888e6f5f-a6e0-4f96-96f3-d661227721c4")
                        },
                        new
                        {
                            Id = new Guid("a52d9f95-5638-4cbc-ab18-20b5ea503ecf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            TextContentId = new Guid("95d956c5-5c53-4c20-87aa-6ee25476c0f7")
                        },
                        new
                        {
                            Id = new Guid("3b22b603-4c8e-49c9-8067-668bc5c5fe89"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            TextContentId = new Guid("eb5cee58-96b3-40a6-9730-23b033237dc1")
                        },
                        new
                        {
                            Id = new Guid("d9fe6902-15ac-4ad0-baed-bb71491d28a4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            TextContentId = new Guid("d0bb6bf7-a451-4ee5-bfbc-d9c9ff705c00")
                        },
                        new
                        {
                            Id = new Guid("6fc06d8a-9ead-4726-b216-85a732f94205"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            TextContentId = new Guid("f9574bd2-41eb-4e9b-87da-4e30a719e76b")
                        },
                        new
                        {
                            Id = new Guid("d495ab60-13de-44b9-8789-9b3e9de2b222"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            TextContentId = new Guid("f0cd9589-0d2c-45cd-ba6d-fc30fefb24f6")
                        },
                        new
                        {
                            Id = new Guid("d6c944bd-5220-44d7-9226-a2c932ee12e6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            TextContentId = new Guid("6eaa2a7b-a020-45b0-976d-54a9df48c4e4")
                        },
                        new
                        {
                            Id = new Guid("90c943d3-2392-414b-b788-ac08e3b90ce6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            TextContentId = new Guid("2de1f17f-689a-4831-963e-9bb9518fe66e")
                        },
                        new
                        {
                            Id = new Guid("0be50231-55ec-4e49-ba54-ff383cf54958"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            TextContentId = new Guid("c54effae-710f-4bd0-960d-615eb9693ec8")
                        },
                        new
                        {
                            Id = new Guid("3a00bdf4-ca3e-439a-93bb-1e789680f359"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            TextContentId = new Guid("6ba893cd-8ad2-4235-9cbd-e11b42f81f30")
                        },
                        new
                        {
                            Id = new Guid("9bdb8a9a-576d-42d7-86f4-dc78961c0fdd"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            TextContentId = new Guid("a6b30dbe-df3e-4f69-af78-c4ae2e5810cb")
                        },
                        new
                        {
                            Id = new Guid("25e7d842-eb82-4c1f-a4e6-7755aa437ed6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            TextContentId = new Guid("6195d006-d9f8-459e-afc3-9387d8f1ac94")
                        },
                        new
                        {
                            Id = new Guid("11dbf683-ec0b-4705-b9c2-4d4b84e3094c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            TextContentId = new Guid("123f16a2-7767-4a32-873d-443283ee0c93")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamTopic")
                        .HasColumnType("integer")
                        .HasColumnName("exam_topic");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<Guid?>("FatherExamModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("father_exam_module_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.HasIndex("FatherExamModuleId")
                        .HasDatabaseName("ix_exam_father_exam_module_id");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(3032),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamTopic = 3,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(3052)
                        },
                        new
                        {
                            Id = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5940),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamTopic = 3,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5941)
                        },
                        new
                        {
                            Id = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5968),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamTopic = 3,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5969)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09af72e4-c5bf-479e-9e2a-de305084607d"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(6485),
                            EnunciatedId = new Guid("4ea7b7fd-c68c-4b51-8994-262435f6ce16"),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            Index = 0,
                            SubjectId = new Guid("9c7835a3-3f71-4d06-990e-3149e87a7727"),
                            SupportingTextId = new Guid("fbb3e0c2-1688-41d8-9108-2478c7b5daa0"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(6491)
                        },
                        new
                        {
                            Id = new Guid("2d9e6050-8285-47f7-980d-c16cb35390fa"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9147),
                            EnunciatedId = new Guid("25fa20c6-cc6f-410b-a52b-7de660f71503"),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            Index = 1,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("67e0ce84-a2fd-4bf5-ac79-abfe1cdf923e"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9152)
                        },
                        new
                        {
                            Id = new Guid("01359071-ba48-49ab-9c6f-d074cacd1da7"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9169),
                            EnunciatedId = new Guid("46e26cdc-d21b-46e1-83d3-afc9383bb73a"),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            Index = 2,
                            SubjectId = new Guid("c61c07c1-2927-47bb-b37a-e22cd8d1a6de"),
                            SupportingTextId = new Guid("6251c095-131c-41f9-aff9-7b341fe82a21"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9169)
                        },
                        new
                        {
                            Id = new Guid("ef0eac0d-0ac9-41cc-92f1-8441b2084e93"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9185),
                            EnunciatedId = new Guid("554bf311-5862-4cd7-a410-3e3fd3185925"),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            Index = 3,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("67e0ce84-a2fd-4bf5-ac79-abfe1cdf923e"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9186)
                        },
                        new
                        {
                            Id = new Guid("b628a8f1-525e-4b6c-9f34-4c4efd9e3834"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9199),
                            EnunciatedId = new Guid("2f4912ef-4377-4c3d-8309-ec0729b2331d"),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            Index = 4,
                            SubjectId = new Guid("5328674a-6706-439e-b2b1-a0a3e7f3d9fe"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9200)
                        },
                        new
                        {
                            Id = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9217),
                            EnunciatedId = new Guid("0edb1e54-ff68-4787-87da-5816d227d4cf"),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            Index = 0,
                            SubjectId = new Guid("9c7835a3-3f71-4d06-990e-3149e87a7727"),
                            SupportingTextId = new Guid("82e9e1db-aa45-47f3-a352-f335ce01e137"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9218)
                        },
                        new
                        {
                            Id = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9233),
                            EnunciatedId = new Guid("01f09d44-f2db-44ae-9d41-83722ae12ca8"),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            Index = 1,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("1dc1ba88-4416-4757-8fb5-45aac05aa28c"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9233)
                        },
                        new
                        {
                            Id = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9246),
                            EnunciatedId = new Guid("aff16625-074b-4237-8994-2cde3e9f8fb6"),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            Index = 2,
                            SubjectId = new Guid("c61c07c1-2927-47bb-b37a-e22cd8d1a6de"),
                            SupportingTextId = new Guid("0ecc3300-b64f-442a-9928-e59fccbe086a"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9247)
                        },
                        new
                        {
                            Id = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9292),
                            EnunciatedId = new Guid("6bdb60b5-c1cb-427e-96c1-902bc29dc2f3"),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            Index = 3,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("1dc1ba88-4416-4757-8fb5-45aac05aa28c"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9293)
                        },
                        new
                        {
                            Id = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9306),
                            EnunciatedId = new Guid("98d26dd7-7fa3-4441-8a1d-2f3c327a2e34"),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            Index = 4,
                            SubjectId = new Guid("5328674a-6706-439e-b2b1-a0a3e7f3d9fe"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9307)
                        },
                        new
                        {
                            Id = new Guid("a7783104-39de-40ef-8737-bc6e51f7c908"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9322),
                            EnunciatedId = new Guid("1876288b-0c0d-46df-8ff6-2ea5ba39b38b"),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            Index = 0,
                            SubjectId = new Guid("9c7835a3-3f71-4d06-990e-3149e87a7727"),
                            SupportingTextId = new Guid("d1e5050d-29a8-4e6b-a590-06abd9635358"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9322)
                        },
                        new
                        {
                            Id = new Guid("910d0153-c665-40a4-90fd-7ea6fd2cde02"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9339),
                            EnunciatedId = new Guid("a205fd1d-0d3c-4bd7-a52b-ef12cc1fa186"),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            Index = 1,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("d1e5050d-29a8-4e6b-a590-06abd9635358"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9340)
                        },
                        new
                        {
                            Id = new Guid("54087128-111d-425d-bc9f-6333e0521c0f"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9352),
                            EnunciatedId = new Guid("c74fc043-5ed3-4f54-9541-f480404df0ca"),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            Index = 2,
                            SubjectId = new Guid("c61c07c1-2927-47bb-b37a-e22cd8d1a6de"),
                            SupportingTextId = new Guid("d1e5050d-29a8-4e6b-a590-06abd9635358"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9353)
                        },
                        new
                        {
                            Id = new Guid("c4867bc1-042c-4bf9-bec8-ecfa433bba79"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9367),
                            EnunciatedId = new Guid("c9aae1d6-1a53-4b29-9e1a-721c34d99825"),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            Index = 3,
                            SubjectId = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            SupportingTextId = new Guid("d1e5050d-29a8-4e6b-a590-06abd9635358"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9368)
                        },
                        new
                        {
                            Id = new Guid("b38da0e7-ac40-4a43-93eb-c0aa5a815616"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9412),
                            EnunciatedId = new Guid("97d289c4-1666-4efc-b7bd-990841399657"),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            Index = 4,
                            SubjectId = new Guid("5328674a-6706-439e-b2b1-a0a3e7f3d9fe"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 771, DateTimeKind.Local).AddTicks(9413)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3a1e686-0006-4922-8c57-30213e4a87b4"),
                            ChosenAlternativeId = new Guid("3e3d69e5-c704-447a-83c3-65bd17c9ba8b"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(4286),
                            QuestionId = new Guid("744b7ae2-58b0-4411-8be1-89d875500b55"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(4307),
                            UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721")
                        },
                        new
                        {
                            Id = new Guid("43c03c72-1f92-413b-b0f5-4fab42e76621"),
                            ChosenAlternativeId = new Guid("f6c2ff2e-2084-41ff-850b-e34627db4fb9"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5708),
                            QuestionId = new Guid("3a619a5e-7b18-4786-9f0d-735838963e8a"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5713),
                            UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721")
                        },
                        new
                        {
                            Id = new Guid("3d7bcbf6-86d4-4fd0-b0b5-9055234ffc97"),
                            ChosenAlternativeId = new Guid("55f25ffd-ada2-4143-8ed7-6b3ca616fb60"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5721),
                            QuestionId = new Guid("10dcca1d-53f1-4969-8f59-39ac9960c173"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5722),
                            UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721")
                        },
                        new
                        {
                            Id = new Guid("8047efb0-92fc-4342-b0d3-b62387016d36"),
                            ChosenAlternativeId = new Guid("dbba214e-4f3d-44f6-a519-0d1ec523c04c"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5729),
                            QuestionId = new Guid("8f4372b0-e727-41e0-9fbf-06a728e0f029"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5730),
                            UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721")
                        },
                        new
                        {
                            Id = new Guid("7b9df439-ac40-4b18-b05d-ae4bad4e1813"),
                            ChosenAlternativeId = new Guid("2ed5f67b-5e7d-4353-be83-fcd6469da654"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5736),
                            QuestionId = new Guid("92c609e1-70ef-4e87-9853-263f004c6bf5"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 788, DateTimeKind.Local).AddTicks(5737),
                            UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c7835a3-3f71-4d06-990e-3149e87a7727"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(7224),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(7557)
                        },
                        new
                        {
                            Id = new Guid("c61c07c1-2927-47bb-b37a-e22cd8d1a6de"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8128),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8132)
                        },
                        new
                        {
                            Id = new Guid("5e194cb3-b0fd-4e56-aa03-e259a63d04fa"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8134),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("9c7835a3-3f71-4d06-990e-3149e87a7727"),
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8135)
                        },
                        new
                        {
                            Id = new Guid("5328674a-6706-439e-b2b1-a0a3e7f3d9fe"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8137),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 770, DateTimeKind.Local).AddTicks(8138)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbb3e0c2-1688-41d8-9108-2478c7b5daa0"),
                            ContentId = new Guid("9cc1ecb8-c5db-4ef8-8905-46c2b8964b09")
                        },
                        new
                        {
                            Id = new Guid("6251c095-131c-41f9-aff9-7b341fe82a21"),
                            ContentId = new Guid("0dfcd378-ff58-4db4-8b68-975ccd76739f")
                        },
                        new
                        {
                            Id = new Guid("67e0ce84-a2fd-4bf5-ac79-abfe1cdf923e"),
                            ContentId = new Guid("23b37272-80a6-4c42-9146-1110c59b963d")
                        },
                        new
                        {
                            Id = new Guid("82e9e1db-aa45-47f3-a352-f335ce01e137"),
                            ContentId = new Guid("de582164-1461-4bbe-98fe-7ad26bbc73fb")
                        },
                        new
                        {
                            Id = new Guid("0ecc3300-b64f-442a-9928-e59fccbe086a"),
                            ContentId = new Guid("53e3591f-537b-4256-aa9d-094c80884970")
                        },
                        new
                        {
                            Id = new Guid("1dc1ba88-4416-4757-8fb5-45aac05aa28c"),
                            ContentId = new Guid("228d72d9-19a6-4746-8bc7-d2b519eda473")
                        },
                        new
                        {
                            Id = new Guid("739bead2-fa34-4582-a880-57083bdce932"),
                            ContentId = new Guid("d2e7c7d7-e8ca-40f5-9451-2aa6b130e012")
                        },
                        new
                        {
                            Id = new Guid("a2ac8762-7397-487a-b9ad-5a44260b3c25"),
                            ContentId = new Guid("ed84f224-08a9-4351-b74c-1a0e89df6266")
                        },
                        new
                        {
                            Id = new Guid("d1e5050d-29a8-4e6b-a590-06abd9635358"),
                            ContentId = new Guid("306c3be7-abdf-4194-bfa3-b6f64208b353")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("FinalizedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finalized_date");

                    b.HasKey("UserId", "ExamId")
                        .HasName("pk_finalized_exams");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_finalized_exams_exam_id");

                    b.ToTable("finalized_exams");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f867b11-31e9-4065-bed7-9a0300b100c6"),
                            CloseDate = new DateTime(2021, 9, 5, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            OpenDate = new DateTime(2021, 9, 5, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("72d89814-59d7-4c63-8405-16d9a3081bcb"),
                            CloseDate = new DateTime(2021, 9, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("d83d3b2e-0d98-4401-963c-e89e336347ca"),
                            OpenDate = new DateTime(2021, 9, 6, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("76f426c1-3adb-49f5-b5c7-4426a564b484"),
                            CloseDate = new DateTime(2021, 9, 2, 2, 59, 45, 781, DateTimeKind.Local).AddTicks(5904),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            OpenDate = new DateTime(2021, 9, 1, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5904)
                        },
                        new
                        {
                            Id = new Guid("a826720a-6283-462c-b6f4-fb5caea005fd"),
                            CloseDate = new DateTime(2021, 9, 3, 0, 59, 45, 781, DateTimeKind.Local).AddTicks(5904),
                            ExamId = new Guid("b1d7ab79-d1ec-424b-9aff-e93e5d8f55c3"),
                            OpenDate = new DateTime(2021, 9, 2, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5904)
                        },
                        new
                        {
                            Id = new Guid("6af7c1f6-d46b-4ff1-bb68-968e4dd8cdd4"),
                            CloseDate = new DateTime(2021, 8, 31, 0, 59, 45, 781, DateTimeKind.Local).AddTicks(5944),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            OpenDate = new DateTime(2021, 8, 30, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5944)
                        },
                        new
                        {
                            Id = new Guid("ef98e46f-1cf6-4965-8116-3c0af3118650"),
                            CloseDate = new DateTime(2021, 9, 1, 0, 59, 45, 781, DateTimeKind.Local).AddTicks(5944),
                            ExamId = new Guid("332e41bb-32b2-42cd-949d-771a95e1bf3b"),
                            OpenDate = new DateTime(2021, 8, 31, 22, 59, 45, 781, DateTimeKind.Local).AddTicks(5944)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ea7b7fd-c68c-4b51-8994-262435f6ce16"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("25fa20c6-cc6f-410b-a52b-7de660f71503"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("46e26cdc-d21b-46e1-83d3-afc9383bb73a"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("554bf311-5862-4cd7-a410-3e3fd3185925"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("2f4912ef-4377-4c3d-8309-ec0729b2331d"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("0edb1e54-ff68-4787-87da-5816d227d4cf"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("01f09d44-f2db-44ae-9d41-83722ae12ca8"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("aff16625-074b-4237-8994-2cde3e9f8fb6"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("6bdb60b5-c1cb-427e-96c1-902bc29dc2f3"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("98d26dd7-7fa3-4441-8a1d-2f3c327a2e34"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("1876288b-0c0d-46df-8ff6-2ea5ba39b38b"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("a205fd1d-0d3c-4bd7-a52b-ef12cc1fa186"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("c74fc043-5ed3-4f54-9541-f480404df0ca"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("c9aae1d6-1a53-4b29-9e1a-721c34d99825"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("97d289c4-1666-4efc-b7bd-990841399657"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("c184b210-da5f-47e8-967a-d8fa638f0a31"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("95ba52a3-9a19-449a-a555-cf589af2dde3"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("2d8aefe4-969f-4ebe-b4ea-924c436f54dd"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("a555ae7b-0496-45be-8f9a-ce507aaf4a03"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("0d49940a-76ef-43cb-b968-52a7295c2dfc"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("1bc19666-8b06-4859-b0b6-04d885f2967b"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("c4a14691-9a53-4bd1-8e1f-92867361fef8"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("1484bb10-6e0f-40d2-b4b9-cf793704621d"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("c31b16a2-e698-417d-afe4-6db2a3293b7b"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("3e6d5cde-3dc2-4f78-a928-fbda19fa405b"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("3a013888-6877-446e-8590-faa670db7f78"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("764b3c3c-d1f6-4f37-9e83-8c50cb1375b5"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("4f2fade7-a47d-49de-bd0b-2355e09ec9f5"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("25ec4987-68e2-4eca-8bb9-e47833cb9d33"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("081f7280-c2bb-4767-9117-e69b91c8166b"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("ae9ecc6d-e785-40f1-ae3c-a2ef31a2bf02"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("22e47e64-4533-4066-9aaf-6107944abc2a"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("a7ed90d1-32ef-4028-b1d8-d6e437bcf1d3"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("57e9a34a-8eae-46f6-9549-bad284af11f8"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("3216b39a-9d21-4fc2-8bf0-d79864086798"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("f39f9f83-7c3b-4072-b03b-731e7a5b2c41"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("2075d608-a1fb-4e71-9071-c6fd16ed7062"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("ee96c35c-16a1-4d49-81ee-9c6da2d45c30"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("f668724c-5708-4926-a48d-f9d4d5fb6574"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("6229c2f1-f154-49fb-b118-9141f7a3da77"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("d93cc0c2-50d2-4ad4-92ae-8f8f3d32b323"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("f903f5e1-bd61-4bdf-8103-1a7a9fed552a"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("d6c63920-fb34-4449-bf7b-51c744bfd8db"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("923ba28b-d64e-4290-8810-68ac4dfe8146"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("59b95693-4c3e-41d9-a923-a760a259b2c8"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("42d3a1b3-31fe-4f77-a5e5-7beeff069b86"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("171d0869-711d-4948-8479-725c800daef3"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("0e4b4db3-c836-40d8-aa75-53df9b4cb762"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("e77dfe02-29c4-4d66-92e2-7790b2469078"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("3fd4552a-5345-41f5-8176-5f04526683f3"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("ac696226-fe4f-485f-9787-eef28afbe818"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("c427cbc7-9aa4-4fa3-a2ab-144682fb6675"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("ccdbd9f7-edc3-4079-a952-030bce89ac91"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("7bc93777-4747-4dd9-8df7-90ae03e81d02"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("3aa164b7-ae1d-41fc-9637-fa43b778c273"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("e98d3525-27d5-47c7-b207-e635865dfa35"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("59fca079-c5d6-43d7-b9e8-408de49e4c4e"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("25f011ec-0cbe-4034-baf2-59645c6910f8"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("16dfda6c-2592-4778-b51c-79246df22898"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("fb5aa51d-7cce-49e0-8011-85b928ca858f"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("80a67e1d-5325-4260-9b3f-ee5ff8d826c4"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("cb7df6d2-2d1a-4f80-9395-b85b9c474d23"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("61612dca-c182-4bb9-8a94-9f5a77f73fe5"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("15a29ea1-c908-4acb-a071-e74bff10c6f2"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("6fff1499-0a0f-44e3-bf8c-c2a9b5d344fa"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("7f0e0429-bc61-4273-86ba-9694a0a905db"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("ad4b553f-3942-4e6b-8309-bc0721387d4f"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("b31a2760-bb3b-4201-8996-1c70d11f5ec3"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("057936ec-dbab-490e-ade9-20dd420b91c7"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("13919a65-4903-4030-a18f-18cde912ba50"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("9c19e47e-17de-401b-82ef-1d173b0cee49"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("1f3defab-e184-4ace-9bdd-cd6ea0ecc15f"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("48e549bb-0af6-4e13-8e59-d3992e76dd60"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("3963f574-5471-49da-a58f-42a830bb1329"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("1a270884-92cf-44f7-9fd2-729fbd894904"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("0f3373fd-c112-4368-9ade-df5dd0ac5076"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("acdb1780-56c1-47b3-bb63-a04031b738a5"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("888e6f5f-a6e0-4f96-96f3-d661227721c4"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("95d956c5-5c53-4c20-87aa-6ee25476c0f7"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("eb5cee58-96b3-40a6-9730-23b033237dc1"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("d0bb6bf7-a451-4ee5-bfbc-d9c9ff705c00"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("f9574bd2-41eb-4e9b-87da-4e30a719e76b"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("f0cd9589-0d2c-45cd-ba6d-fc30fefb24f6"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("6eaa2a7b-a020-45b0-976d-54a9df48c4e4"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2de1f17f-689a-4831-963e-9bb9518fe66e"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c54effae-710f-4bd0-960d-615eb9693ec8"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("6ba893cd-8ad2-4235-9cbd-e11b42f81f30"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("a6b30dbe-df3e-4f69-af78-c4ae2e5810cb"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("6195d006-d9f8-459e-afc3-9387d8f1ac94"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("123f16a2-7767-4a32-873d-443283ee0c93"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("9cc1ecb8-c5db-4ef8-8905-46c2b8964b09"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("de582164-1461-4bbe-98fe-7ad26bbc73fb"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d2e7c7d7-e8ca-40f5-9451-2aa6b130e012"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("0dfcd378-ff58-4db4-8b68-975ccd76739f"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("53e3591f-537b-4256-aa9d-094c80884970"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("ed84f224-08a9-4351-b74c-1a0e89df6266"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("23b37272-80a6-4c42-9146-1110c59b963d"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("228d72d9-19a6-4746-8bc7-d2b519eda473"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("306c3be7-abdf-4194-bfa3-b6f64208b353"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCollege")
                        .HasColumnType("text")
                        .HasColumnName("actual_college");

                    b.Property<string>("ActualOccupation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actual_occupation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExpectedCollege")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expected_college");

                    b.Property<string>("ExpectedCourse")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expected_course");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_user_profile_user_id");

                    b.ToTable("external_user_profile");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_optins");

                    b.ToTable("optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.Property<bool>("WasAcceptedTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("was_accepted_terms");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 780, DateTimeKind.Local).AddTicks(2160),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 9, 1, 22, 59, 45, 780, DateTimeKind.Local).AddTicks(2194),
                            UserType = 0,
                            WasAcceptedTerms = false
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("OptinId")
                        .HasColumnType("integer")
                        .HasColumnName("optin_id");

                    b.Property<DateTime>("AcceptedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accepted_date");

                    b.HasKey("UserId", "OptinId")
                        .HasName("pk_user_optins");

                    b.HasIndex("OptinId")
                        .HasDatabaseName("ix_user_optins_optin_id");

                    b.ToTable("user_optins");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "FatherExamModule")
                        .WithMany("ChildExamModule")
                        .HasForeignKey("FatherExamModuleId")
                        .HasConstraintName("fk_exam_exam_father_exam_module_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FatherExamModule");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChilds")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Finalizeds")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_finalized_exams_exams_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("FinalizedExams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_finalized_exams_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithOne("ExternalUserProfile")
                        .HasForeignKey("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", "UserId")
                        .HasConstraintName("fk_external_user_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("c7fc1e61-a6cb-4b1e-8dbe-d2ba665da721"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserOptin", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.Optin", "Optin")
                        .WithMany("UsersAccepted")
                        .HasForeignKey("OptinId")
                        .HasConstraintName("fk_user_optins_optins_optin_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("Optins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_optins_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Optin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("ChildExamModule");

                    b.Navigation("Finalizeds");

                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChilds");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.Optin", b =>
                {
                    b.Navigation("UsersAccepted");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("ExternalUserProfile");

                    b.Navigation("FinalizedExams");

                    b.Navigation("Optins");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
