// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210602045607_addingUserType")]
    partial class addingUserType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ddcb761-a33f-49a6-b420-67f7f1a93f4f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            TextContentId = new Guid("09df12d9-50d0-485d-b42a-a62a826eb7a8")
                        },
                        new
                        {
                            Id = new Guid("dcc30c99-9c5b-4b7b-95ca-43e79cdde42d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            TextContentId = new Guid("34ef1c7b-0b1b-4618-a084-67fe346f9f90")
                        },
                        new
                        {
                            Id = new Guid("0d9e2953-f1ce-4c15-83c2-9671d8f4265b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            TextContentId = new Guid("7fad0326-3999-42f7-8c4f-a62cbdd7a177")
                        },
                        new
                        {
                            Id = new Guid("0430513a-ceec-426e-a3c7-daf21609944b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            TextContentId = new Guid("2e2da644-3bfe-4074-8fda-4753e3653753")
                        },
                        new
                        {
                            Id = new Guid("0746cfdc-71a9-407e-a405-662543b6c57a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            TextContentId = new Guid("1e68347e-c50b-43d3-a7d8-3af67697e80d")
                        },
                        new
                        {
                            Id = new Guid("d53ee5ca-a431-44e8-94ad-6046cc91e32c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            TextContentId = new Guid("6a622e98-f6b7-4b10-8c72-f4b08d742738")
                        },
                        new
                        {
                            Id = new Guid("508210d8-be42-415a-8aaa-ee9a733058be"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            TextContentId = new Guid("46d2821b-ef84-46c3-a2d4-7e95c4ba130c")
                        },
                        new
                        {
                            Id = new Guid("18f6eacb-b202-4a30-bc51-e50dee6e2c75"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            TextContentId = new Guid("7014bac1-bc0b-4dc8-8518-4d66f7c09b56")
                        },
                        new
                        {
                            Id = new Guid("9ff678b2-0c6a-4f73-8719-265d128f966f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            TextContentId = new Guid("e7a05551-16e1-41e8-bc6a-3b02f80346cf")
                        },
                        new
                        {
                            Id = new Guid("735aded7-dd93-4c96-a538-277c81163ff0"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            TextContentId = new Guid("b6de7ecb-ee22-43a3-8c64-c9dfdba31ae9")
                        },
                        new
                        {
                            Id = new Guid("fb89ebc5-5c0a-4ec5-b7c3-6ef16c41e28f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            TextContentId = new Guid("30113bb0-c183-4a2e-922f-021b59a3a7e6")
                        },
                        new
                        {
                            Id = new Guid("7cdd0493-8d36-489e-87eb-2c25a4f59ecf"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            TextContentId = new Guid("549d9a91-a55c-467f-a3fe-7e90ab24c89c")
                        },
                        new
                        {
                            Id = new Guid("660a3484-cbdd-46f2-b6e9-2d4ff1e90a7a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            TextContentId = new Guid("9cb0c73f-ad1d-4ab0-8ac1-349aa7584ec7")
                        },
                        new
                        {
                            Id = new Guid("717a4b0f-b5aa-4f31-91b8-e4c874067f14"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            TextContentId = new Guid("6a374d73-a29d-48de-a686-0b29d706e574")
                        },
                        new
                        {
                            Id = new Guid("4a62854e-4541-4aaa-9efa-3ee19fc567db"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            TextContentId = new Guid("bf3053dc-fb8d-48f0-9241-ae76c7f32737")
                        },
                        new
                        {
                            Id = new Guid("936fd997-2e89-4e35-b9c6-0bcc65cfdd64"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            TextContentId = new Guid("d29fbf7d-6930-4ef2-8d94-549ca084ac6f")
                        },
                        new
                        {
                            Id = new Guid("424a48d9-3da4-464b-9926-1d34373db24d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            TextContentId = new Guid("99c0486a-7dfb-421e-a822-e20df861bcc6")
                        },
                        new
                        {
                            Id = new Guid("b6e8740a-30c5-4fee-9a99-d4bc92224540"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            TextContentId = new Guid("7f662dc8-a5a8-4367-96c5-221b341c1904")
                        },
                        new
                        {
                            Id = new Guid("523cb940-1eab-446b-b548-d23212486af1"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            TextContentId = new Guid("d421948c-9ffd-44e0-9190-147010a6f50d")
                        },
                        new
                        {
                            Id = new Guid("2db4c6c1-5f3e-4941-8848-cf8a878e7129"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            TextContentId = new Guid("68ceec3a-ca0f-44bd-8830-b57964eb6e2b")
                        },
                        new
                        {
                            Id = new Guid("59e7f84c-7d6a-4d1b-a20e-546dcbddfd96"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            TextContentId = new Guid("fd0f1ad9-3c28-4778-80e7-eb500fccea17")
                        },
                        new
                        {
                            Id = new Guid("861192c9-dd0f-401b-bf1d-5ba2d3d6074f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            TextContentId = new Guid("c43bda2f-985c-4c6c-bf53-406b6fbca207")
                        },
                        new
                        {
                            Id = new Guid("eb726636-0dc3-4d02-9a59-3fc21414774b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            TextContentId = new Guid("a5e10b3e-6181-43f8-8f27-9337e6b7b24a")
                        },
                        new
                        {
                            Id = new Guid("5cde9b9b-c8cf-4cfe-90a6-e9b6fa11f5b0"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            TextContentId = new Guid("56789328-688c-4639-8a18-fe58ffbd08a0")
                        },
                        new
                        {
                            Id = new Guid("858f7347-599f-47f3-9bb1-87c990ab563f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            TextContentId = new Guid("87ff86c0-ebf9-44a0-a93a-f274ed7d8fbb")
                        },
                        new
                        {
                            Id = new Guid("9a63ddd6-a0c3-4aca-91a8-86bfc7e31523"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            TextContentId = new Guid("cde5233b-17e9-44ee-9942-c9091a03de37")
                        },
                        new
                        {
                            Id = new Guid("e41d7a9f-cb6d-440b-9864-2e050eff37f6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            TextContentId = new Guid("6345420d-ea2b-4eba-b791-d578bd3a6e09")
                        },
                        new
                        {
                            Id = new Guid("a58b9b29-f335-42ff-93d2-da58f77b92d6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            TextContentId = new Guid("aa071f3b-23d7-45fa-813c-a43b667af09f")
                        },
                        new
                        {
                            Id = new Guid("9a490e3a-3a72-44c2-b50b-b98e68043a81"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            TextContentId = new Guid("1caf7182-8334-49b7-a834-a5856a374851")
                        },
                        new
                        {
                            Id = new Guid("284fba18-2496-4951-9371-962a456e8359"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            TextContentId = new Guid("352258ea-8916-4c7b-8d84-9624d3d8ce36")
                        },
                        new
                        {
                            Id = new Guid("eea814ed-c190-4a59-9e47-b50098be5cbc"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            TextContentId = new Guid("9e098b54-ec5f-4295-bdec-709013410642")
                        },
                        new
                        {
                            Id = new Guid("80cb427d-b592-41d2-9d07-0744386fbc2c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            TextContentId = new Guid("4bdb3bb4-d99f-462b-b28e-7e67d022d9f5")
                        },
                        new
                        {
                            Id = new Guid("a8904ab3-00aa-4c17-b720-967fb35aa54a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            TextContentId = new Guid("b3ef12a8-c24e-4495-863d-c6c56b44bd13")
                        },
                        new
                        {
                            Id = new Guid("9fafae40-fd24-4084-beae-c0907591c47e"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            TextContentId = new Guid("be40645e-3424-4348-b6b0-a73fd4d918f9")
                        },
                        new
                        {
                            Id = new Guid("b7e1bb2c-d11d-4bcf-8288-bed80d238b7d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            TextContentId = new Guid("594ec365-bd63-43c6-90e7-1a33d7c66985")
                        },
                        new
                        {
                            Id = new Guid("d115e8fa-2b43-4404-94fc-d306a83afbeb"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            TextContentId = new Guid("5d4e2ac5-dae1-4f79-87f6-257bffb5dd85")
                        },
                        new
                        {
                            Id = new Guid("eaa557d0-7a5f-4fec-af46-6321acff1a27"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            TextContentId = new Guid("c922b1c6-c5d0-4e8f-9831-ff40a743bcf9")
                        },
                        new
                        {
                            Id = new Guid("54e0a191-9f59-4703-a0bd-9598d07402c6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            TextContentId = new Guid("9df3e43f-1ae7-4603-afca-9bd32ec2a018")
                        },
                        new
                        {
                            Id = new Guid("348d5b27-e269-448a-9ce6-91e83cdaf147"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            TextContentId = new Guid("310d6c66-e5f0-4a0b-8683-d39f60233b41")
                        },
                        new
                        {
                            Id = new Guid("5c54a066-fccd-48c7-b617-e2b0b66eed77"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            TextContentId = new Guid("f3315758-d09b-4161-bb81-ed0d542ae34f")
                        },
                        new
                        {
                            Id = new Guid("5658cea7-8c3d-456f-a57c-277ae8770427"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            TextContentId = new Guid("8846e969-bf3d-4aa0-bc07-f64970ef30f3")
                        },
                        new
                        {
                            Id = new Guid("7a82df15-8fdc-4103-b56a-daebd79ba3a6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            TextContentId = new Guid("4475cd66-c246-44cd-ba1b-19fd051dfcfe")
                        },
                        new
                        {
                            Id = new Guid("3fadd9a9-0959-4b85-bab8-ec398ed2d7b2"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            TextContentId = new Guid("9d5d7bbc-b06c-49f8-84b0-e78dd8bedd30")
                        },
                        new
                        {
                            Id = new Guid("23b2a8c4-016b-49c4-ad16-d8d5ff69aa5d"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            TextContentId = new Guid("247a448e-e6f2-4766-8348-1c4fbe5224dd")
                        },
                        new
                        {
                            Id = new Guid("0e08f078-ede4-4ada-93ce-31b6382c96d2"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            TextContentId = new Guid("e079b0a1-08e3-4c85-8092-f6981099fbea")
                        },
                        new
                        {
                            Id = new Guid("589a8f33-d222-4633-ae5f-237575a68380"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            TextContentId = new Guid("8bc3b58d-a58d-43c1-bfa7-b7557400d036")
                        },
                        new
                        {
                            Id = new Guid("c0ea10f6-c11c-4e6d-9059-db72b0ef057c"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            TextContentId = new Guid("a0533135-1b72-408f-8589-aea85686a465")
                        },
                        new
                        {
                            Id = new Guid("0b18c5c6-9a5e-433e-824a-9a566a065d1a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            TextContentId = new Guid("1ba7a811-d7f5-47f7-9124-e9c9de247b5b")
                        },
                        new
                        {
                            Id = new Guid("006999db-0713-4cc9-8774-54853df0c140"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            TextContentId = new Guid("440ea0a5-b093-4298-af58-c534060d676b")
                        },
                        new
                        {
                            Id = new Guid("a983ec84-a822-4076-9fff-89d12594e562"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            TextContentId = new Guid("2ec188d4-4416-4b00-ab6d-eb6e90d6ff70")
                        },
                        new
                        {
                            Id = new Guid("0d84716e-59b8-44a4-b573-0421a17dfa24"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            TextContentId = new Guid("e2839ad1-6251-49b2-9f0d-ac7c723e4b15")
                        },
                        new
                        {
                            Id = new Guid("a62c6dc0-67bd-4254-b1d4-a1c3f71ccc74"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            TextContentId = new Guid("5ae7b505-5be0-40ac-9237-d26a7fced7ab")
                        },
                        new
                        {
                            Id = new Guid("fe06fe5e-dda2-4370-bb79-6bd37acb4ca4"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            TextContentId = new Guid("f37387df-9340-461d-af15-d3bf6d55ae3f")
                        },
                        new
                        {
                            Id = new Guid("c3c5d512-a601-452a-be5a-d2e1c25b9773"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            TextContentId = new Guid("099be472-7c37-4b8c-aba7-ba39c77ffa96")
                        },
                        new
                        {
                            Id = new Guid("ab245f6d-d6c9-4c7c-9e6f-d0ddc86d48ed"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            TextContentId = new Guid("05f6b71b-5b5b-4658-8de3-c06a52bff24a")
                        },
                        new
                        {
                            Id = new Guid("74272cbf-cd37-49f2-8578-2231f4cc3ab9"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            TextContentId = new Guid("7afcd9ec-a7d9-40ac-8557-95796fb0ee36")
                        },
                        new
                        {
                            Id = new Guid("b96bd0b9-d874-44cf-a29d-5d7ce8e689f9"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            TextContentId = new Guid("1d6016bc-27a2-41f8-877d-1acfb96b882c")
                        },
                        new
                        {
                            Id = new Guid("80a4142c-a8f5-4c23-ba57-9eb1b370a2ad"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            TextContentId = new Guid("46e32f9c-dad1-425f-8646-ce5a1b78408f")
                        },
                        new
                        {
                            Id = new Guid("6df8aa29-f7ff-4962-827f-352fc478d698"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            TextContentId = new Guid("0aca10ca-9d2d-42f3-90df-0e86242684af")
                        },
                        new
                        {
                            Id = new Guid("0515ccca-df01-46f8-b637-2b113f63a434"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            TextContentId = new Guid("175ce579-6a45-45dd-92aa-8d39d60ef916")
                        },
                        new
                        {
                            Id = new Guid("10983b45-fc7b-4506-89a4-850a0e8ed254"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            TextContentId = new Guid("5a0943df-a072-4ab4-ab88-d2eb1d713005")
                        },
                        new
                        {
                            Id = new Guid("b58b1715-efb4-4706-a714-4a7514129754"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            TextContentId = new Guid("65133d18-c8db-42e3-ac29-5690679a7a52")
                        },
                        new
                        {
                            Id = new Guid("a4cd8f26-6582-4cf1-8fdf-b37088866f90"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            TextContentId = new Guid("9a4555f9-72f0-41ef-bffb-e18cbcdf9572")
                        },
                        new
                        {
                            Id = new Guid("4b534d7f-814a-47e7-a4ac-9df01d551ebf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            TextContentId = new Guid("895a39c9-891b-4c8a-a1ed-c635c3c538ce")
                        },
                        new
                        {
                            Id = new Guid("148f10c8-1b84-4ae1-8c7f-928ac8742850"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            TextContentId = new Guid("a8bd878f-e90f-4a68-87e0-fd558deb1a3e")
                        },
                        new
                        {
                            Id = new Guid("5f979fc2-cb9a-452e-bd29-f3cfd6a522b8"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            TextContentId = new Guid("b4e510aa-ff4d-46f4-b7fe-0c4e50791de3")
                        },
                        new
                        {
                            Id = new Guid("eede0730-3368-4dcd-8bc2-66f7fb3e3336"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            TextContentId = new Guid("3aca2c5d-4fc5-455d-ab1f-44a0b4563637")
                        },
                        new
                        {
                            Id = new Guid("e9809a2d-390e-4667-b69c-b721390cc31e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            TextContentId = new Guid("9826b14a-9f94-4d77-8123-45ac494343d0")
                        },
                        new
                        {
                            Id = new Guid("8ce40875-e594-475b-8802-f4447c0f9aee"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            TextContentId = new Guid("c0e862ad-fe46-4e79-95bb-bfeab8ace0cd")
                        },
                        new
                        {
                            Id = new Guid("b41fd3cc-1d17-4b8b-987b-a1b87a728746"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            TextContentId = new Guid("0ef8e5dd-af7d-4e58-b5ef-7dc517860556")
                        },
                        new
                        {
                            Id = new Guid("6bb2d0eb-b4a8-4a78-b9b9-b06282d7bef1"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            TextContentId = new Guid("827908b8-ab64-4c7c-b051-af87179ed90d")
                        },
                        new
                        {
                            Id = new Guid("c0b541d0-5230-4b46-b473-8c897fce534e"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            TextContentId = new Guid("e3af61e4-3ef8-4362-8b31-750c822a3508")
                        },
                        new
                        {
                            Id = new Guid("f49d681f-9bb8-44f9-80c0-3d1fecf46a5a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            TextContentId = new Guid("9b499e4d-39df-4f13-9779-cf07a3a4523b")
                        },
                        new
                        {
                            Id = new Guid("dd914b15-f934-416c-8ec1-4777eb0f9fe0"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            TextContentId = new Guid("3846e6f1-c7c8-48b6-8c83-db547a22a812")
                        },
                        new
                        {
                            Id = new Guid("632a80a3-1d00-49f3-a846-0a1b6977631b"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            TextContentId = new Guid("fc53a05b-6b87-4e6a-9a2d-1d43e4483b4e")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(5456),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(5463)
                        },
                        new
                        {
                            Id = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8615),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8617)
                        },
                        new
                        {
                            Id = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8632),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8632)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fadb9e63-5d28-4389-90dd-382f12192549"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 319, DateTimeKind.Local).AddTicks(9213),
                            EnunciatedId = new Guid("2ebb3de9-98c2-4b9c-bd12-521b23b6d817"),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            Index = 0,
                            SubjectId = new Guid("ad88e83e-fae0-4286-a8a6-40bc83e0a065"),
                            SupportingTextId = new Guid("964c1dc8-67ed-4e15-8b69-799c63b03525"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 319, DateTimeKind.Local).AddTicks(9219)
                        },
                        new
                        {
                            Id = new Guid("235f51b4-a7ad-406c-a479-d977f4b77515"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(1967),
                            EnunciatedId = new Guid("b46439c2-d154-4d17-94a5-1f7df75d6ce9"),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            Index = 1,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("b9d361ae-67f0-4e88-8fb0-66d1613cb3f8"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(1973)
                        },
                        new
                        {
                            Id = new Guid("cc4703a9-c582-46e9-84a7-d0a476a6b131"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(1990),
                            EnunciatedId = new Guid("1dbc5b19-b19c-4a28-9c8a-c56686f0b1af"),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            Index = 2,
                            SubjectId = new Guid("3bea8c15-2ce2-435b-a533-d733866c21a4"),
                            SupportingTextId = new Guid("80d62516-e807-44a2-ad17-9b8ce804de39"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(1990)
                        },
                        new
                        {
                            Id = new Guid("5eae2a24-bcd6-4424-9e23-cf09204ed90f"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2044),
                            EnunciatedId = new Guid("ca335477-44cc-474a-b4a5-39895959b494"),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            Index = 3,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("b9d361ae-67f0-4e88-8fb0-66d1613cb3f8"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2045)
                        },
                        new
                        {
                            Id = new Guid("eef26243-89e5-41fe-8b05-7561e6e3d8b4"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2058),
                            EnunciatedId = new Guid("d69a2dea-fc93-48fe-a376-d9b7583ba330"),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            Index = 4,
                            SubjectId = new Guid("49d2093e-ee04-4b05-ba3a-a2cab9a0415c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2059)
                        },
                        new
                        {
                            Id = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2071),
                            EnunciatedId = new Guid("b132ae14-7874-4546-816b-289d2ac0ac22"),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            Index = 0,
                            SubjectId = new Guid("ad88e83e-fae0-4286-a8a6-40bc83e0a065"),
                            SupportingTextId = new Guid("8909752a-f9a8-49c1-8fce-62c37e1afbe4"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2072)
                        },
                        new
                        {
                            Id = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2086),
                            EnunciatedId = new Guid("59b6d43c-c2ba-4f79-a39f-5d969a5e4ff0"),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            Index = 1,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("b8023939-49f0-4049-aa2c-5db0f8ec4141"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2087)
                        },
                        new
                        {
                            Id = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2099),
                            EnunciatedId = new Guid("33e008b9-9465-493e-89d6-a64f3191a8c8"),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            Index = 2,
                            SubjectId = new Guid("3bea8c15-2ce2-435b-a533-d733866c21a4"),
                            SupportingTextId = new Guid("4a920f36-d164-41ea-998c-6133c2111121"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2100)
                        },
                        new
                        {
                            Id = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2111),
                            EnunciatedId = new Guid("fec2d2df-9a0d-46e1-a00c-d217def55075"),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            Index = 3,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("b8023939-49f0-4049-aa2c-5db0f8ec4141"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2112)
                        },
                        new
                        {
                            Id = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2126),
                            EnunciatedId = new Guid("a4882fa9-f251-4d40-999e-ab8c1ab46b1d"),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            Index = 4,
                            SubjectId = new Guid("49d2093e-ee04-4b05-ba3a-a2cab9a0415c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2126)
                        },
                        new
                        {
                            Id = new Guid("0d92d80c-b1e3-4f11-9812-d0a7066c54c2"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2170),
                            EnunciatedId = new Guid("08dd3dd4-8e30-45b1-a3ca-e33f31c1cb7b"),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            Index = 0,
                            SubjectId = new Guid("ad88e83e-fae0-4286-a8a6-40bc83e0a065"),
                            SupportingTextId = new Guid("d8c903b1-fdc3-4cfa-beb0-6468558049fd"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2171)
                        },
                        new
                        {
                            Id = new Guid("ef8f24e2-d198-4f5d-8c5b-b4cf9c667f23"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2185),
                            EnunciatedId = new Guid("9a7178dc-38a9-45a3-8f53-b9ef0aa94418"),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            Index = 1,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("d8c903b1-fdc3-4cfa-beb0-6468558049fd"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2186)
                        },
                        new
                        {
                            Id = new Guid("c4562647-cb4a-4c86-9dc3-bb44043bbf65"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2198),
                            EnunciatedId = new Guid("f90dc597-2000-4164-89e7-9b3e8ba31483"),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            Index = 2,
                            SubjectId = new Guid("3bea8c15-2ce2-435b-a533-d733866c21a4"),
                            SupportingTextId = new Guid("d8c903b1-fdc3-4cfa-beb0-6468558049fd"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2199)
                        },
                        new
                        {
                            Id = new Guid("0596f05d-af75-4829-9096-cbdbf77943b2"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2210),
                            EnunciatedId = new Guid("77268926-32e8-40d1-8fe0-1861402527be"),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            Index = 3,
                            SubjectId = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            SupportingTextId = new Guid("d8c903b1-fdc3-4cfa-beb0-6468558049fd"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2211)
                        },
                        new
                        {
                            Id = new Guid("ac05d757-34f8-4c94-a1b8-385779cf4977"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2224),
                            EnunciatedId = new Guid("3835d3ce-4259-4f43-bf83-c0b9046a6465"),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            Index = 4,
                            SubjectId = new Guid("49d2093e-ee04-4b05-ba3a-a2cab9a0415c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 320, DateTimeKind.Local).AddTicks(2225)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48cfb7c5-a5a3-4580-9e80-3f2dcefc6979"),
                            ChosenAlternativeId = new Guid("9a63ddd6-a0c3-4aca-91a8-86bfc7e31523"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(2949),
                            QuestionId = new Guid("1a751ad6-8d20-415d-bc84-3242a4738a3a"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(2960),
                            UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96")
                        },
                        new
                        {
                            Id = new Guid("23e941e1-b207-47c9-9203-aea0f7a526d2"),
                            ChosenAlternativeId = new Guid("eea814ed-c190-4a59-9e47-b50098be5cbc"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4348),
                            QuestionId = new Guid("76b426e0-2960-4b11-aa14-16f55fe74abf"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4352),
                            UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96")
                        },
                        new
                        {
                            Id = new Guid("15a277e4-537c-4cd6-b9c9-f0e96f8da039"),
                            ChosenAlternativeId = new Guid("d115e8fa-2b43-4404-94fc-d306a83afbeb"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4357),
                            QuestionId = new Guid("f0cc3a18-3cd5-44df-a8cb-d7995257adcb"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4358),
                            UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96")
                        },
                        new
                        {
                            Id = new Guid("8936b37c-a561-444d-a985-79b85eaca7fb"),
                            ChosenAlternativeId = new Guid("5658cea7-8c3d-456f-a57c-277ae8770427"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4361),
                            QuestionId = new Guid("569034b8-9dba-45c3-8c2b-68dcba4ba90c"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4362),
                            UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96")
                        },
                        new
                        {
                            Id = new Guid("e529d26f-ae0d-4695-a196-e03be896f318"),
                            ChosenAlternativeId = new Guid("589a8f33-d222-4633-ae5f-237575a68380"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4377),
                            QuestionId = new Guid("0c27a8a0-8c01-4a95-adcd-ae871dce069d"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 335, DateTimeKind.Local).AddTicks(4378),
                            UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad88e83e-fae0-4286-a8a6-40bc83e0a065"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(6434),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(6894)
                        },
                        new
                        {
                            Id = new Guid("3bea8c15-2ce2-435b-a533-d733866c21a4"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7743),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7747)
                        },
                        new
                        {
                            Id = new Guid("cc507e92-16f9-4b64-903a-f39e42903831"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7750),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("ad88e83e-fae0-4286-a8a6-40bc83e0a065"),
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7751)
                        },
                        new
                        {
                            Id = new Guid("49d2093e-ee04-4b05-ba3a-a2cab9a0415c"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7752),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 318, DateTimeKind.Local).AddTicks(7753)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("964c1dc8-67ed-4e15-8b69-799c63b03525"),
                            ContentId = new Guid("a6015634-d023-4e40-81cd-a394b733a271")
                        },
                        new
                        {
                            Id = new Guid("80d62516-e807-44a2-ad17-9b8ce804de39"),
                            ContentId = new Guid("d32095f2-6457-49ee-a3b4-3d9bc16b680a")
                        },
                        new
                        {
                            Id = new Guid("b9d361ae-67f0-4e88-8fb0-66d1613cb3f8"),
                            ContentId = new Guid("27d12316-ba04-48ba-9d2b-68be25b150be")
                        },
                        new
                        {
                            Id = new Guid("8909752a-f9a8-49c1-8fce-62c37e1afbe4"),
                            ContentId = new Guid("b4f14372-643f-4d6f-a392-05a40243b07e")
                        },
                        new
                        {
                            Id = new Guid("4a920f36-d164-41ea-998c-6133c2111121"),
                            ContentId = new Guid("42e85c51-9851-4adf-b9f8-267dd1a06145")
                        },
                        new
                        {
                            Id = new Guid("b8023939-49f0-4049-aa2c-5db0f8ec4141"),
                            ContentId = new Guid("d8197be4-5792-400d-8857-3ccba3304376")
                        },
                        new
                        {
                            Id = new Guid("f94937ee-7719-47f9-b89e-6fc8ac782fa9"),
                            ContentId = new Guid("4b7c1bc2-9f38-497e-b0a9-bf61def8bd5d")
                        },
                        new
                        {
                            Id = new Guid("ff1277c5-30bc-4076-beb7-a87fcaf894cc"),
                            ContentId = new Guid("63f850fe-f7d6-480d-9072-6178072934a8")
                        },
                        new
                        {
                            Id = new Guid("d8c903b1-fdc3-4cfa-beb0-6468558049fd"),
                            ContentId = new Guid("bbd99a17-8689-4e5c-a582-e9fbe32e6a0c")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60bdf1ec-f7ad-4bb4-8b07-6d8490ca0002"),
                            CloseDate = new DateTime(2021, 6, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            OpenDate = new DateTime(2021, 6, 6, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("7de5c286-612b-4bce-a27c-da6950bf8b04"),
                            CloseDate = new DateTime(2021, 6, 7, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("ca3ec971-1ef7-485d-b32b-3d53a614b63e"),
                            OpenDate = new DateTime(2021, 6, 7, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("0ff43f07-53a1-4bd6-8de6-a1685dbd50ae"),
                            CloseDate = new DateTime(2021, 6, 2, 5, 56, 6, 327, DateTimeKind.Local).AddTicks(8579),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            OpenDate = new DateTime(2021, 6, 2, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8579)
                        },
                        new
                        {
                            Id = new Guid("ec48a0a7-8638-4b2e-ad4c-fffa29806aa0"),
                            CloseDate = new DateTime(2021, 6, 3, 3, 56, 6, 327, DateTimeKind.Local).AddTicks(8579),
                            ExamId = new Guid("8f2bd158-bfdd-4c49-a2cc-4a4e886e0f48"),
                            OpenDate = new DateTime(2021, 6, 3, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8579)
                        },
                        new
                        {
                            Id = new Guid("affb27f9-a0e5-4983-8c8a-5fa43d7f0890"),
                            CloseDate = new DateTime(2021, 5, 31, 3, 56, 6, 327, DateTimeKind.Local).AddTicks(8619),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            OpenDate = new DateTime(2021, 5, 31, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8619)
                        },
                        new
                        {
                            Id = new Guid("5841e2d6-aed1-447e-8cd9-997668d6d06a"),
                            CloseDate = new DateTime(2021, 6, 1, 3, 56, 6, 327, DateTimeKind.Local).AddTicks(8619),
                            ExamId = new Guid("13e5c6ac-05b0-4ee4-8f7d-f612a5b7aeda"),
                            OpenDate = new DateTime(2021, 6, 1, 1, 56, 6, 327, DateTimeKind.Local).AddTicks(8619)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ebb3de9-98c2-4b9c-bd12-521b23b6d817"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b46439c2-d154-4d17-94a5-1f7df75d6ce9"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1dbc5b19-b19c-4a28-9c8a-c56686f0b1af"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("ca335477-44cc-474a-b4a5-39895959b494"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d69a2dea-fc93-48fe-a376-d9b7583ba330"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("b132ae14-7874-4546-816b-289d2ac0ac22"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("59b6d43c-c2ba-4f79-a39f-5d969a5e4ff0"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("33e008b9-9465-493e-89d6-a64f3191a8c8"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("fec2d2df-9a0d-46e1-a00c-d217def55075"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("a4882fa9-f251-4d40-999e-ab8c1ab46b1d"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("08dd3dd4-8e30-45b1-a3ca-e33f31c1cb7b"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("9a7178dc-38a9-45a3-8f53-b9ef0aa94418"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("f90dc597-2000-4164-89e7-9b3e8ba31483"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("77268926-32e8-40d1-8fe0-1861402527be"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3835d3ce-4259-4f43-bf83-c0b9046a6465"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("09df12d9-50d0-485d-b42a-a62a826eb7a8"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("34ef1c7b-0b1b-4618-a084-67fe346f9f90"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("7fad0326-3999-42f7-8c4f-a62cbdd7a177"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("2e2da644-3bfe-4074-8fda-4753e3653753"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("1e68347e-c50b-43d3-a7d8-3af67697e80d"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("6a622e98-f6b7-4b10-8c72-f4b08d742738"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("46d2821b-ef84-46c3-a2d4-7e95c4ba130c"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("7014bac1-bc0b-4dc8-8518-4d66f7c09b56"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("e7a05551-16e1-41e8-bc6a-3b02f80346cf"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("b6de7ecb-ee22-43a3-8c64-c9dfdba31ae9"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("30113bb0-c183-4a2e-922f-021b59a3a7e6"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("549d9a91-a55c-467f-a3fe-7e90ab24c89c"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("9cb0c73f-ad1d-4ab0-8ac1-349aa7584ec7"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("6a374d73-a29d-48de-a686-0b29d706e574"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("bf3053dc-fb8d-48f0-9241-ae76c7f32737"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("d29fbf7d-6930-4ef2-8d94-549ca084ac6f"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("99c0486a-7dfb-421e-a822-e20df861bcc6"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("7f662dc8-a5a8-4367-96c5-221b341c1904"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("d421948c-9ffd-44e0-9190-147010a6f50d"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("68ceec3a-ca0f-44bd-8830-b57964eb6e2b"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("fd0f1ad9-3c28-4778-80e7-eb500fccea17"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("c43bda2f-985c-4c6c-bf53-406b6fbca207"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("a5e10b3e-6181-43f8-8f27-9337e6b7b24a"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("56789328-688c-4639-8a18-fe58ffbd08a0"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("87ff86c0-ebf9-44a0-a93a-f274ed7d8fbb"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("cde5233b-17e9-44ee-9942-c9091a03de37"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("6345420d-ea2b-4eba-b791-d578bd3a6e09"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("aa071f3b-23d7-45fa-813c-a43b667af09f"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("1caf7182-8334-49b7-a834-a5856a374851"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("352258ea-8916-4c7b-8d84-9624d3d8ce36"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("9e098b54-ec5f-4295-bdec-709013410642"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("4bdb3bb4-d99f-462b-b28e-7e67d022d9f5"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("b3ef12a8-c24e-4495-863d-c6c56b44bd13"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("be40645e-3424-4348-b6b0-a73fd4d918f9"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("594ec365-bd63-43c6-90e7-1a33d7c66985"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("5d4e2ac5-dae1-4f79-87f6-257bffb5dd85"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("c922b1c6-c5d0-4e8f-9831-ff40a743bcf9"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("9df3e43f-1ae7-4603-afca-9bd32ec2a018"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("310d6c66-e5f0-4a0b-8683-d39f60233b41"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("f3315758-d09b-4161-bb81-ed0d542ae34f"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("8846e969-bf3d-4aa0-bc07-f64970ef30f3"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("4475cd66-c246-44cd-ba1b-19fd051dfcfe"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("9d5d7bbc-b06c-49f8-84b0-e78dd8bedd30"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("247a448e-e6f2-4766-8348-1c4fbe5224dd"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("e079b0a1-08e3-4c85-8092-f6981099fbea"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("8bc3b58d-a58d-43c1-bfa7-b7557400d036"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("a0533135-1b72-408f-8589-aea85686a465"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("1ba7a811-d7f5-47f7-9124-e9c9de247b5b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("440ea0a5-b093-4298-af58-c534060d676b"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2ec188d4-4416-4b00-ab6d-eb6e90d6ff70"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("e2839ad1-6251-49b2-9f0d-ac7c723e4b15"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("5ae7b505-5be0-40ac-9237-d26a7fced7ab"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("f37387df-9340-461d-af15-d3bf6d55ae3f"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("099be472-7c37-4b8c-aba7-ba39c77ffa96"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("05f6b71b-5b5b-4658-8de3-c06a52bff24a"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("7afcd9ec-a7d9-40ac-8557-95796fb0ee36"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("1d6016bc-27a2-41f8-877d-1acfb96b882c"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("46e32f9c-dad1-425f-8646-ce5a1b78408f"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("0aca10ca-9d2d-42f3-90df-0e86242684af"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("175ce579-6a45-45dd-92aa-8d39d60ef916"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("5a0943df-a072-4ab4-ab88-d2eb1d713005"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("65133d18-c8db-42e3-ac29-5690679a7a52"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("9a4555f9-72f0-41ef-bffb-e18cbcdf9572"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("895a39c9-891b-4c8a-a1ed-c635c3c538ce"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("a8bd878f-e90f-4a68-87e0-fd558deb1a3e"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("b4e510aa-ff4d-46f4-b7fe-0c4e50791de3"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("3aca2c5d-4fc5-455d-ab1f-44a0b4563637"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("9826b14a-9f94-4d77-8123-45ac494343d0"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("c0e862ad-fe46-4e79-95bb-bfeab8ace0cd"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("0ef8e5dd-af7d-4e58-b5ef-7dc517860556"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("827908b8-ab64-4c7c-b051-af87179ed90d"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("e3af61e4-3ef8-4362-8b31-750c822a3508"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("9b499e4d-39df-4f13-9779-cf07a3a4523b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("3846e6f1-c7c8-48b6-8c83-db547a22a812"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("fc53a05b-6b87-4e6a-9a2d-1d43e4483b4e"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("a6015634-d023-4e40-81cd-a394b733a271"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b4f14372-643f-4d6f-a392-05a40243b07e"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4b7c1bc2-9f38-497e-b0a9-bf61def8bd5d"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d32095f2-6457-49ee-a3b4-3d9bc16b680a"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("42e85c51-9851-4adf-b9f8-267dd1a06145"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("63f850fe-f7d6-480d-9072-6178072934a8"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("27d12316-ba04-48ba-9d2b-68be25b150be"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("d8197be4-5792-400d-8857-3ccba3304376"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("bbd99a17-8689-4e5c-a582-e9fbe32e6a0c"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 326, DateTimeKind.Local).AddTicks(6146),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 6, 2, 1, 56, 6, 326, DateTimeKind.Local).AddTicks(6157),
                            UserType = 0
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("ba655574-d127-43cc-89cd-6a15bf538c96"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
