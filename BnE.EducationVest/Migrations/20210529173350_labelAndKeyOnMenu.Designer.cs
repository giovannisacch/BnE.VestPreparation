// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210529173350_labelAndKeyOnMenu")]
    partial class labelAndKeyOnMenu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("740f0be0-d393-438b-ae5d-20767902c20a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            TextContentId = new Guid("b8a37e40-9866-4708-9dcf-745ccf3d11c4")
                        },
                        new
                        {
                            Id = new Guid("07595361-4726-4319-a73e-32ae595a2e24"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            TextContentId = new Guid("9e7ede69-1193-4f14-88ad-2e230e2da883")
                        },
                        new
                        {
                            Id = new Guid("8fe1e207-a7f6-4ed3-93ab-22a09b198b21"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            TextContentId = new Guid("1413c657-3743-4b8c-8d59-ae319263d956")
                        },
                        new
                        {
                            Id = new Guid("9f8ff90c-fa68-412e-bda8-af98f22a37d2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            TextContentId = new Guid("c3fd943f-c7aa-4134-8143-4e958ff9a770")
                        },
                        new
                        {
                            Id = new Guid("44d3a2e4-1ff7-41d3-81f6-a76b6b7eee98"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            TextContentId = new Guid("983a681f-c821-4ad5-9cd3-2efd09bc457a")
                        },
                        new
                        {
                            Id = new Guid("b259fb2b-423a-4ee3-8804-756f5bc95b2b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            TextContentId = new Guid("a092bfb0-b22f-4318-8e6f-9b00d0b1f118")
                        },
                        new
                        {
                            Id = new Guid("5fbe6e44-902f-42e3-a1ff-b3ffe5517bc3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            TextContentId = new Guid("b5ef3cca-1564-49c2-8686-eaadcebaea5b")
                        },
                        new
                        {
                            Id = new Guid("f38a966d-0c35-450f-b84f-83c88ff05f4d"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            TextContentId = new Guid("9b7cfb48-a516-4a57-8ab1-3df377131669")
                        },
                        new
                        {
                            Id = new Guid("7652217b-2a07-4a50-b940-1c12e24bae1c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            TextContentId = new Guid("06a4fd2f-8479-4248-a2a5-7bba613c8a36")
                        },
                        new
                        {
                            Id = new Guid("0b489d44-1dfb-4553-b1a8-4789d4836016"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            TextContentId = new Guid("87fb7ba7-1d8f-478c-b5fc-62e2198ddc90")
                        },
                        new
                        {
                            Id = new Guid("1c923873-8404-45b4-ae5b-f8ee95e80b84"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            TextContentId = new Guid("b573e91f-a563-4a68-baec-771cced5ffcc")
                        },
                        new
                        {
                            Id = new Guid("1edd2635-3a00-4574-b886-fa652603cb55"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            TextContentId = new Guid("f99e89fd-b620-444d-947c-3fe1b25f8610")
                        },
                        new
                        {
                            Id = new Guid("5e5df0d1-6f5b-4fd5-a581-2e4a64d34d76"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            TextContentId = new Guid("6d35cd77-7087-4992-b470-5dac23ecf9a4")
                        },
                        new
                        {
                            Id = new Guid("4e007a04-a539-4fa4-a23f-5b8d3c4ab567"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            TextContentId = new Guid("bbb63294-5233-492a-baa9-fde5efdbc0be")
                        },
                        new
                        {
                            Id = new Guid("77eebb97-81b5-442f-a86c-d40890106139"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            TextContentId = new Guid("c82918cf-92f5-47b4-a36f-ed2b6655ffad")
                        },
                        new
                        {
                            Id = new Guid("989c7ef5-a652-4394-9d60-fad7a528ae26"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            TextContentId = new Guid("060ccc38-dace-4b4c-b800-4633327e349d")
                        },
                        new
                        {
                            Id = new Guid("43023c70-0410-428e-98f9-3b9abb099353"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            TextContentId = new Guid("5f675ea3-0b61-4a45-a968-bc1dd1513058")
                        },
                        new
                        {
                            Id = new Guid("f4649463-0589-4628-8298-227296c47a8e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            TextContentId = new Guid("51c5500f-fb7d-4f78-b4cc-4847fc67f544")
                        },
                        new
                        {
                            Id = new Guid("b9690de0-9598-4058-9484-66dc0a39951b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            TextContentId = new Guid("ce62b45d-b0ee-4e65-9e40-d244e634189d")
                        },
                        new
                        {
                            Id = new Guid("2e3ae5b3-c138-4afb-bdba-8759ddf45663"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            TextContentId = new Guid("50aac667-220c-4c6b-925f-94e3165196af")
                        },
                        new
                        {
                            Id = new Guid("0a07f96c-92fb-4923-83c1-e9ca3513cbea"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            TextContentId = new Guid("b041d6a4-df08-46a1-a2c7-d7581db62076")
                        },
                        new
                        {
                            Id = new Guid("7005b6e8-782d-4b7f-a8eb-835246df2b4a"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            TextContentId = new Guid("bbe67c56-a6b7-46e8-84e3-d61c5a562567")
                        },
                        new
                        {
                            Id = new Guid("546d00ed-6e6b-4c77-a76f-1371e69fb797"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            TextContentId = new Guid("2c54f3ee-742d-4f97-9a7d-654ba3acd3c1")
                        },
                        new
                        {
                            Id = new Guid("1b12142b-7aa5-4299-a48c-41845233ea68"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            TextContentId = new Guid("306b86c9-1b78-4169-a93c-295fbf06e43b")
                        },
                        new
                        {
                            Id = new Guid("2d26bde1-42bd-4f6c-a8e0-327163d7aff7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            TextContentId = new Guid("2d24eac8-1a9a-48d2-930a-cbab0adc57dd")
                        },
                        new
                        {
                            Id = new Guid("6f17ee86-8ad4-45d1-a03f-7e8641762ac3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            TextContentId = new Guid("8958c497-e894-4769-abef-c9ac014966df")
                        },
                        new
                        {
                            Id = new Guid("23f70e5e-bf0f-4dff-a89b-2268f9fa9743"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            TextContentId = new Guid("a3556b80-280a-45e1-b45c-5959d7304a77")
                        },
                        new
                        {
                            Id = new Guid("75e9e560-6956-47db-adb6-b78678336676"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            TextContentId = new Guid("dfcf4637-ffb6-4c41-8622-7d1468414b9f")
                        },
                        new
                        {
                            Id = new Guid("e2c4db42-8028-40de-a04a-44aabebeff20"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            TextContentId = new Guid("caeb00a7-b2b8-4a6a-81bf-9f094a838708")
                        },
                        new
                        {
                            Id = new Guid("767028ac-bb9f-4b0f-be08-1ef19e979df1"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            TextContentId = new Guid("c93b4e86-341b-421d-a63a-61823bbcf074")
                        },
                        new
                        {
                            Id = new Guid("1fe52786-108f-44d9-a368-7c7dd198f108"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            TextContentId = new Guid("26ea7d98-2d62-4cae-a8c0-ab92869bcf1d")
                        },
                        new
                        {
                            Id = new Guid("33138998-61c0-45d4-9f94-271d85c45632"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            TextContentId = new Guid("0104e7c1-654a-4096-bd51-2604bebcd469")
                        },
                        new
                        {
                            Id = new Guid("bb6d1a3a-7fb4-42f3-8bf5-e65a8394a691"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            TextContentId = new Guid("f609b585-e600-4913-ac0d-0744ae612a91")
                        },
                        new
                        {
                            Id = new Guid("d9064b21-3fda-4a9a-8fe3-0019c0a571e5"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            TextContentId = new Guid("2e97e8a6-9478-4465-b94f-0c510e06df75")
                        },
                        new
                        {
                            Id = new Guid("1fbd60e3-b432-48f7-8f06-d3ef8c977448"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            TextContentId = new Guid("5f77606c-6a47-499a-a627-fd6cdc8111d6")
                        },
                        new
                        {
                            Id = new Guid("ab071731-2377-44d9-a655-7a77f629b09c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            TextContentId = new Guid("66898c4b-d5be-4a76-b69c-b601cbb31c8a")
                        },
                        new
                        {
                            Id = new Guid("df9e5881-641f-4531-8f0e-6b3860ff92ee"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            TextContentId = new Guid("d73a0041-5171-4bed-b756-df8a7797f390")
                        },
                        new
                        {
                            Id = new Guid("7ba25f88-ad64-4f9b-8f0b-ae3d95906563"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            TextContentId = new Guid("182e7bad-5dea-48ae-afde-825a1f0541dc")
                        },
                        new
                        {
                            Id = new Guid("35e09345-1c19-49ce-a83a-c9ff31107652"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            TextContentId = new Guid("8999256d-bcb5-4191-8e49-7793f8f91618")
                        },
                        new
                        {
                            Id = new Guid("73ab7d1d-d903-4a74-835e-e2ccb49c61ef"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            TextContentId = new Guid("b8e6d358-a767-416b-896f-0297c43a546f")
                        },
                        new
                        {
                            Id = new Guid("0d2e41a1-9915-4276-9e88-7387d828613a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            TextContentId = new Guid("1a5d2c31-4f1e-48e7-b480-6778f65788ba")
                        },
                        new
                        {
                            Id = new Guid("ebab1689-13bc-43df-b8a9-8f9a75e9f713"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            TextContentId = new Guid("9c98e61b-7557-4fea-8301-1c309556b0da")
                        },
                        new
                        {
                            Id = new Guid("eaed4232-2d01-4c5f-aa86-127ce6e7ac04"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            TextContentId = new Guid("5cfd78aa-92fc-4689-b1d9-9e28230dd06d")
                        },
                        new
                        {
                            Id = new Guid("94e63d81-5e80-45f4-b6ab-9505aae3f938"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            TextContentId = new Guid("74f32815-5242-4695-aaad-0b212ebb190c")
                        },
                        new
                        {
                            Id = new Guid("2aa83005-8197-478e-abd9-cd869c36d9dc"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            TextContentId = new Guid("fa648a46-3f6f-476e-8f14-909a46f74cb9")
                        },
                        new
                        {
                            Id = new Guid("e37c18cd-3b57-4a86-9894-1322873b5fc2"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            TextContentId = new Guid("64cc879b-362d-4d2c-9e93-fb1bb504a005")
                        },
                        new
                        {
                            Id = new Guid("668f0d64-40ff-4343-a5b9-3b96421d77ff"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            TextContentId = new Guid("5e443c42-8e20-4ea8-8451-043dd613a257")
                        },
                        new
                        {
                            Id = new Guid("90ceeaba-3b4b-455f-aa10-cc287799f9bb"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            TextContentId = new Guid("3f4590e9-7327-4ee4-9c5c-04cc515d7f05")
                        },
                        new
                        {
                            Id = new Guid("6b4c837b-7abf-448d-b7b3-6f66c4574d4c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            TextContentId = new Guid("2280cadf-fc78-4742-b6e0-eb6eb640f326")
                        },
                        new
                        {
                            Id = new Guid("252f9753-a702-4a7d-b0b2-f87b4baa02d7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            TextContentId = new Guid("405715fa-0b69-4b41-941d-7e10fb2a76f9")
                        },
                        new
                        {
                            Id = new Guid("e788e829-d3f3-4c56-be86-0f1ee43f44dc"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            TextContentId = new Guid("711a40b4-dc40-425a-b8e2-ffb837557399")
                        },
                        new
                        {
                            Id = new Guid("b0b43583-e768-4a25-aa90-df37eb19f58e"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            TextContentId = new Guid("0bda6cb9-f769-4f79-ab43-8c57ecc19ed0")
                        },
                        new
                        {
                            Id = new Guid("87cd4a6b-2c5f-4723-8fe3-9b8646189f1c"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            TextContentId = new Guid("aa699da7-b496-45c7-a848-e20e654bc193")
                        },
                        new
                        {
                            Id = new Guid("c043d2a6-f4eb-4e7c-9058-8c59c7aa77b6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            TextContentId = new Guid("5765f61a-af31-4393-a8b0-560b691e5f53")
                        },
                        new
                        {
                            Id = new Guid("9096baeb-8386-4073-bcf5-56835bf51c94"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            TextContentId = new Guid("d8151b59-f255-43ec-8b6a-3a0de2463ae3")
                        },
                        new
                        {
                            Id = new Guid("f61b117a-1e96-46c3-9906-3f67696efc30"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            TextContentId = new Guid("9f9406a5-05e9-4709-993e-a113c00e8252")
                        },
                        new
                        {
                            Id = new Guid("2e298fed-3a10-4bcf-9789-9cf02dc8836a"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            TextContentId = new Guid("74ae5c67-7b92-404a-93f2-0a3d91491e9d")
                        },
                        new
                        {
                            Id = new Guid("f0b77497-f106-4d54-8d32-3660fea53416"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            TextContentId = new Guid("9d429475-7289-4cb4-bafe-b5018d2192a7")
                        },
                        new
                        {
                            Id = new Guid("b1b89cae-1d52-4493-ba43-838ea6410679"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            TextContentId = new Guid("21642d67-f127-4111-b8dd-fde2d5880bd7")
                        },
                        new
                        {
                            Id = new Guid("121755dd-8951-459a-9cd4-8f3be6b2db6c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            TextContentId = new Guid("5f0d41a8-0601-4342-bde9-16bfb64c7d57")
                        },
                        new
                        {
                            Id = new Guid("333ba78b-0243-4ea8-8a09-dccc59a96974"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            TextContentId = new Guid("4c8f8c5f-23b4-4d26-bb26-c195212dd2d1")
                        },
                        new
                        {
                            Id = new Guid("6360572b-8e8d-4fe0-9cb7-8b74d6d5d0dd"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            TextContentId = new Guid("7cbccadb-f15f-4bbd-93f0-32378e9db010")
                        },
                        new
                        {
                            Id = new Guid("246dd825-0f39-42a1-8269-1d3b278dd7f5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            TextContentId = new Guid("b95b7ad9-6715-487e-86dd-95650c7ecd06")
                        },
                        new
                        {
                            Id = new Guid("4962d323-b485-4a25-a7d5-1d8c8620908f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            TextContentId = new Guid("0ca0eb5a-f3af-42fc-8eb4-e1247401f5dd")
                        },
                        new
                        {
                            Id = new Guid("01b09934-aaa7-4701-aaba-05079b850399"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            TextContentId = new Guid("ac146ee4-4b9d-492a-aacd-4afae7d62a7d")
                        },
                        new
                        {
                            Id = new Guid("a03a8430-b530-4467-b6c9-a6a5f8448c19"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            TextContentId = new Guid("1bc6382b-117c-4414-89de-45ea044c32cd")
                        },
                        new
                        {
                            Id = new Guid("d67dc8d5-b72c-4f50-908d-fa7dffc40816"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            TextContentId = new Guid("5e4d65c6-6f6a-4346-87af-2bb3ad3deedb")
                        },
                        new
                        {
                            Id = new Guid("e89cc111-16c2-4c18-ab4a-283d7f759e99"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            TextContentId = new Guid("be8a510c-da45-4084-b9f9-0bc3a68264a5")
                        },
                        new
                        {
                            Id = new Guid("6ede0ac3-97cc-4606-be68-aecfddf77baf"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            TextContentId = new Guid("3e03076b-252d-4c64-a745-c2673cea4fa4")
                        },
                        new
                        {
                            Id = new Guid("c6499dd5-6d27-4793-a31e-d6d610904518"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            TextContentId = new Guid("906acdd6-7f1a-41d1-9473-9807741a2fa0")
                        },
                        new
                        {
                            Id = new Guid("baf41389-0615-4f84-9df6-4aa0767fc14d"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            TextContentId = new Guid("4bfa7779-8744-416e-bfae-a90fe521c04b")
                        },
                        new
                        {
                            Id = new Guid("6d617e0f-74f7-4a1e-b6bb-2c17cbaeb853"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            TextContentId = new Guid("e8b1f44d-5f12-4084-8e3c-d807f498c169")
                        },
                        new
                        {
                            Id = new Guid("3430e65e-8864-4bd4-bad8-790e4a131d5e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            TextContentId = new Guid("cd2c9fc8-ceee-4d40-b83c-90f97388495e")
                        },
                        new
                        {
                            Id = new Guid("e0b4a6e4-3ba1-44c3-aa50-675912edd009"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            TextContentId = new Guid("5dc91b8b-e03b-4498-b477-82c0f204d3a1")
                        },
                        new
                        {
                            Id = new Guid("7bd06125-cb0a-4e89-9b18-6f1779ac8a21"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            TextContentId = new Guid("4fa5dbdf-bd7c-4557-ba12-4803cb0c894a")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(5002),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(5008)
                        },
                        new
                        {
                            Id = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8212),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8214)
                        },
                        new
                        {
                            Id = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8245),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8246)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17c83617-9db9-4304-a204-5436222e8d54"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(4283),
                            EnunciatedId = new Guid("9f7fde19-f8fb-4229-83a6-1eb98b762a0c"),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            Index = 0,
                            SubjectId = new Guid("639f101c-1e7f-4835-bc9c-c36b77d9d915"),
                            SupportingTextId = new Guid("acd8621b-bc4d-4918-bd59-14e96bbb6a2d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(4289)
                        },
                        new
                        {
                            Id = new Guid("d7dbb35b-c224-4f4c-83a2-fa6c6b20a065"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6929),
                            EnunciatedId = new Guid("aeaff05c-1998-40b0-93d7-8bdb4ecae326"),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            Index = 1,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("9e7c0886-c897-4e3c-adb1-55d6e8f3620a"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6935)
                        },
                        new
                        {
                            Id = new Guid("ee62dedf-eea4-403a-8bce-e41b3d306d2f"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6948),
                            EnunciatedId = new Guid("24413f83-3a6d-4b59-9321-7f94868d9003"),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            Index = 2,
                            SubjectId = new Guid("30aba985-36b1-479b-9fc5-6c10018dc6a3"),
                            SupportingTextId = new Guid("36a90b49-b6b0-49cb-8f4f-8cd924bbe57d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6949)
                        },
                        new
                        {
                            Id = new Guid("af3cdf58-e89a-44e4-be61-cd83bcd18dca"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6963),
                            EnunciatedId = new Guid("7f96fe62-29cf-40dd-b2ac-e528417739fb"),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            Index = 3,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("9e7c0886-c897-4e3c-adb1-55d6e8f3620a"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6964)
                        },
                        new
                        {
                            Id = new Guid("3cf4d4a4-0b65-4c0e-a524-fb43b295027b"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6975),
                            EnunciatedId = new Guid("ec902016-421b-4a2b-8a90-b7cc617acfcc"),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            Index = 4,
                            SubjectId = new Guid("1f684adb-a141-48c4-a92f-4bd0f97b759c"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(6976)
                        },
                        new
                        {
                            Id = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7030),
                            EnunciatedId = new Guid("3f52a782-24b7-49f0-826c-7e3f893a3c6e"),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            Index = 0,
                            SubjectId = new Guid("639f101c-1e7f-4835-bc9c-c36b77d9d915"),
                            SupportingTextId = new Guid("e23a9194-5581-4a5b-8aae-feb6d699646a"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7031)
                        },
                        new
                        {
                            Id = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7045),
                            EnunciatedId = new Guid("1b5a9271-5bce-402d-9c86-acd16759ba40"),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            Index = 1,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("43b285e9-9d40-4da4-9afa-8e8cca69c540"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7046)
                        },
                        new
                        {
                            Id = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7057),
                            EnunciatedId = new Guid("961a8b5f-0e55-4ca1-82b1-550656c5f7e9"),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            Index = 2,
                            SubjectId = new Guid("30aba985-36b1-479b-9fc5-6c10018dc6a3"),
                            SupportingTextId = new Guid("c4f9dde1-ffbd-495b-9f3a-47e6ca4a74c2"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7058)
                        },
                        new
                        {
                            Id = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7069),
                            EnunciatedId = new Guid("11e1b9f2-476c-4a52-8abd-e27cf61ec43a"),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            Index = 3,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("43b285e9-9d40-4da4-9afa-8e8cca69c540"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7070)
                        },
                        new
                        {
                            Id = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7084),
                            EnunciatedId = new Guid("09a25b01-72e4-4e77-80b8-b7cf4343eae0"),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            Index = 4,
                            SubjectId = new Guid("1f684adb-a141-48c4-a92f-4bd0f97b759c"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7085)
                        },
                        new
                        {
                            Id = new Guid("bdde6f21-52b7-4e7a-9ea7-89c8e83bf683"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7096),
                            EnunciatedId = new Guid("c39ba6db-43f3-441e-8e80-f3f514bf3f2b"),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            Index = 0,
                            SubjectId = new Guid("639f101c-1e7f-4835-bc9c-c36b77d9d915"),
                            SupportingTextId = new Guid("e73dc715-f63d-4288-b48a-9afcc93e660d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7097)
                        },
                        new
                        {
                            Id = new Guid("3edb2e2d-6f19-4e15-a59c-a674232a9f48"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7144),
                            EnunciatedId = new Guid("eef3aea6-6875-4c6c-b3a1-1f1c9944533e"),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            Index = 1,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("e73dc715-f63d-4288-b48a-9afcc93e660d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7145)
                        },
                        new
                        {
                            Id = new Guid("adae3201-9ed8-4809-9a61-964c7789a6c6"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7156),
                            EnunciatedId = new Guid("0c19512a-cf2a-4db6-ae66-24cfe9e4c0e8"),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            Index = 2,
                            SubjectId = new Guid("30aba985-36b1-479b-9fc5-6c10018dc6a3"),
                            SupportingTextId = new Guid("e73dc715-f63d-4288-b48a-9afcc93e660d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7157)
                        },
                        new
                        {
                            Id = new Guid("1682ebdd-c708-4e9a-86f4-fd8472c6bb03"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7168),
                            EnunciatedId = new Guid("ba17a33b-76db-4f86-9fa9-2b38e0993611"),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            Index = 3,
                            SubjectId = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            SupportingTextId = new Guid("e73dc715-f63d-4288-b48a-9afcc93e660d"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7169)
                        },
                        new
                        {
                            Id = new Guid("51a43b1c-b4cc-4e01-a1e9-10a1cc737fbf"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7182),
                            EnunciatedId = new Guid("d84280cd-1124-4012-958e-977d8572e2e2"),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            Index = 4,
                            SubjectId = new Guid("1f684adb-a141-48c4-a92f-4bd0f97b759c"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 730, DateTimeKind.Local).AddTicks(7182)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f31af814-5a2c-4eed-804c-10e6ac53ac0f"),
                            ChosenAlternativeId = new Guid("6f17ee86-8ad4-45d1-a03f-7e8641762ac3"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(1086),
                            QuestionId = new Guid("5e0a99ff-221c-44fc-9811-201ca51f45de"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(1105),
                            UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006")
                        },
                        new
                        {
                            Id = new Guid("210e0ef3-61ab-4e3e-bb97-3c48bf7036d4"),
                            ChosenAlternativeId = new Guid("1fe52786-108f-44d9-a368-7c7dd198f108"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2555),
                            QuestionId = new Guid("c1fa674d-e62e-456e-82bc-6f6fc4741470"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2559),
                            UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006")
                        },
                        new
                        {
                            Id = new Guid("396ed842-0976-4fe7-a27a-93cd4dcf7ac4"),
                            ChosenAlternativeId = new Guid("ab071731-2377-44d9-a655-7a77f629b09c"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2564),
                            QuestionId = new Guid("b39c8151-f580-41bd-9a5f-2fde90e3bf7f"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2565),
                            UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006")
                        },
                        new
                        {
                            Id = new Guid("f764503d-a765-40ce-a9da-f0e6c28a32da"),
                            ChosenAlternativeId = new Guid("0d2e41a1-9915-4276-9e88-7387d828613a"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2568),
                            QuestionId = new Guid("3bd6ef9b-be71-4eab-bda9-f3d4fa5d3c49"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2568),
                            UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006")
                        },
                        new
                        {
                            Id = new Guid("2733507a-1138-442a-90a0-ce4cd0798e42"),
                            ChosenAlternativeId = new Guid("e37c18cd-3b57-4a86-9894-1322873b5fc2"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2571),
                            QuestionId = new Guid("721233d8-3441-4e85-887e-9d0324099e02"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 747, DateTimeKind.Local).AddTicks(2572),
                            UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("639f101c-1e7f-4835-bc9c-c36b77d9d915"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(1539),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2011)
                        },
                        new
                        {
                            Id = new Guid("30aba985-36b1-479b-9fc5-6c10018dc6a3"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2867),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2871)
                        },
                        new
                        {
                            Id = new Guid("1cb8a145-53f2-4ef1-87af-5b7870f852a4"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2874),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("639f101c-1e7f-4835-bc9c-c36b77d9d915"),
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2875)
                        },
                        new
                        {
                            Id = new Guid("1f684adb-a141-48c4-a92f-4bd0f97b759c"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2876),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 729, DateTimeKind.Local).AddTicks(2877)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acd8621b-bc4d-4918-bd59-14e96bbb6a2d"),
                            ContentId = new Guid("93dc002f-ec4b-4cb2-9005-a8e746476976")
                        },
                        new
                        {
                            Id = new Guid("36a90b49-b6b0-49cb-8f4f-8cd924bbe57d"),
                            ContentId = new Guid("e0c796ae-74b8-4914-a714-65aefde64803")
                        },
                        new
                        {
                            Id = new Guid("9e7c0886-c897-4e3c-adb1-55d6e8f3620a"),
                            ContentId = new Guid("5f34523b-0cbc-48ec-bbe4-50c76da503d2")
                        },
                        new
                        {
                            Id = new Guid("e23a9194-5581-4a5b-8aae-feb6d699646a"),
                            ContentId = new Guid("3bb9df08-c309-4a64-b0a1-d8ede3919001")
                        },
                        new
                        {
                            Id = new Guid("c4f9dde1-ffbd-495b-9f3a-47e6ca4a74c2"),
                            ContentId = new Guid("002ed43c-797a-49a1-998f-44ad95558d5d")
                        },
                        new
                        {
                            Id = new Guid("43b285e9-9d40-4da4-9afa-8e8cca69c540"),
                            ContentId = new Guid("3fcf9ed5-c07b-4dc6-8e10-e6986ea166a7")
                        },
                        new
                        {
                            Id = new Guid("4f550340-ff67-402b-acdc-54afe604801f"),
                            ContentId = new Guid("abeab435-74e9-424d-80b6-c59899ded9ad")
                        },
                        new
                        {
                            Id = new Guid("bb873427-b06e-445d-b787-faa0b2e9ee72"),
                            ContentId = new Guid("81443735-afad-46d3-8f6c-c4dcfbd8d27e")
                        },
                        new
                        {
                            Id = new Guid("e73dc715-f63d-4288-b48a-9afcc93e660d"),
                            ContentId = new Guid("1f2ccdc9-c91f-403a-9de2-bb9fa6a98c3f")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18c77203-4f22-418a-adb9-30978dae8db1"),
                            CloseDate = new DateTime(2021, 6, 2, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            OpenDate = new DateTime(2021, 6, 2, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("85deb970-0119-4f1a-ba90-0ce1851b66fc"),
                            CloseDate = new DateTime(2021, 6, 3, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("4521b030-79fb-4ce0-91d1-6b31770e885b"),
                            OpenDate = new DateTime(2021, 6, 3, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("dbc7f962-96ce-4465-a9a4-58387919621a"),
                            CloseDate = new DateTime(2021, 5, 29, 18, 33, 49, 738, DateTimeKind.Local).AddTicks(8176),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            OpenDate = new DateTime(2021, 5, 29, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8176)
                        },
                        new
                        {
                            Id = new Guid("88ccb126-4733-4628-b8f7-daf63e63238c"),
                            CloseDate = new DateTime(2021, 5, 30, 16, 33, 49, 738, DateTimeKind.Local).AddTicks(8176),
                            ExamId = new Guid("4555080f-f0a5-43f5-bc98-9ef47fe16db0"),
                            OpenDate = new DateTime(2021, 5, 30, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8176)
                        },
                        new
                        {
                            Id = new Guid("116d1913-97a2-4a27-a694-48f515835b64"),
                            CloseDate = new DateTime(2021, 5, 27, 16, 33, 49, 738, DateTimeKind.Local).AddTicks(8216),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            OpenDate = new DateTime(2021, 5, 27, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8216)
                        },
                        new
                        {
                            Id = new Guid("ec03db85-b3fa-482e-b0fa-f5e10dbe7645"),
                            CloseDate = new DateTime(2021, 5, 28, 16, 33, 49, 738, DateTimeKind.Local).AddTicks(8216),
                            ExamId = new Guid("a90215f1-c275-4dfe-9182-4fbb06cd38af"),
                            OpenDate = new DateTime(2021, 5, 28, 14, 33, 49, 738, DateTimeKind.Local).AddTicks(8216)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f7fde19-f8fb-4229-83a6-1eb98b762a0c"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("aeaff05c-1998-40b0-93d7-8bdb4ecae326"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("24413f83-3a6d-4b59-9321-7f94868d9003"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("7f96fe62-29cf-40dd-b2ac-e528417739fb"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("ec902016-421b-4a2b-8a90-b7cc617acfcc"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("3f52a782-24b7-49f0-826c-7e3f893a3c6e"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1b5a9271-5bce-402d-9c86-acd16759ba40"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("961a8b5f-0e55-4ca1-82b1-550656c5f7e9"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("11e1b9f2-476c-4a52-8abd-e27cf61ec43a"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("09a25b01-72e4-4e77-80b8-b7cf4343eae0"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("c39ba6db-43f3-441e-8e80-f3f514bf3f2b"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("eef3aea6-6875-4c6c-b3a1-1f1c9944533e"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("0c19512a-cf2a-4db6-ae66-24cfe9e4c0e8"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("ba17a33b-76db-4f86-9fa9-2b38e0993611"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d84280cd-1124-4012-958e-977d8572e2e2"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("b8a37e40-9866-4708-9dcf-745ccf3d11c4"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("9e7ede69-1193-4f14-88ad-2e230e2da883"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("1413c657-3743-4b8c-8d59-ae319263d956"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("c3fd943f-c7aa-4134-8143-4e958ff9a770"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("983a681f-c821-4ad5-9cd3-2efd09bc457a"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("a092bfb0-b22f-4318-8e6f-9b00d0b1f118"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("b5ef3cca-1564-49c2-8686-eaadcebaea5b"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("9b7cfb48-a516-4a57-8ab1-3df377131669"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("06a4fd2f-8479-4248-a2a5-7bba613c8a36"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("87fb7ba7-1d8f-478c-b5fc-62e2198ddc90"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("b573e91f-a563-4a68-baec-771cced5ffcc"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("f99e89fd-b620-444d-947c-3fe1b25f8610"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("6d35cd77-7087-4992-b470-5dac23ecf9a4"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("bbb63294-5233-492a-baa9-fde5efdbc0be"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("c82918cf-92f5-47b4-a36f-ed2b6655ffad"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("060ccc38-dace-4b4c-b800-4633327e349d"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("5f675ea3-0b61-4a45-a968-bc1dd1513058"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("51c5500f-fb7d-4f78-b4cc-4847fc67f544"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("ce62b45d-b0ee-4e65-9e40-d244e634189d"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("50aac667-220c-4c6b-925f-94e3165196af"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("b041d6a4-df08-46a1-a2c7-d7581db62076"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("bbe67c56-a6b7-46e8-84e3-d61c5a562567"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("2c54f3ee-742d-4f97-9a7d-654ba3acd3c1"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("306b86c9-1b78-4169-a93c-295fbf06e43b"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2d24eac8-1a9a-48d2-930a-cbab0adc57dd"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("8958c497-e894-4769-abef-c9ac014966df"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("a3556b80-280a-45e1-b45c-5959d7304a77"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("dfcf4637-ffb6-4c41-8622-7d1468414b9f"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("caeb00a7-b2b8-4a6a-81bf-9f094a838708"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("c93b4e86-341b-421d-a63a-61823bbcf074"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("26ea7d98-2d62-4cae-a8c0-ab92869bcf1d"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("0104e7c1-654a-4096-bd51-2604bebcd469"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("f609b585-e600-4913-ac0d-0744ae612a91"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("2e97e8a6-9478-4465-b94f-0c510e06df75"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("5f77606c-6a47-499a-a627-fd6cdc8111d6"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("66898c4b-d5be-4a76-b69c-b601cbb31c8a"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("d73a0041-5171-4bed-b756-df8a7797f390"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("182e7bad-5dea-48ae-afde-825a1f0541dc"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("8999256d-bcb5-4191-8e49-7793f8f91618"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("b8e6d358-a767-416b-896f-0297c43a546f"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("1a5d2c31-4f1e-48e7-b480-6778f65788ba"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("9c98e61b-7557-4fea-8301-1c309556b0da"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("5cfd78aa-92fc-4689-b1d9-9e28230dd06d"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("74f32815-5242-4695-aaad-0b212ebb190c"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("fa648a46-3f6f-476e-8f14-909a46f74cb9"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("64cc879b-362d-4d2c-9e93-fb1bb504a005"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("5e443c42-8e20-4ea8-8451-043dd613a257"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("3f4590e9-7327-4ee4-9c5c-04cc515d7f05"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("2280cadf-fc78-4742-b6e0-eb6eb640f326"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("405715fa-0b69-4b41-941d-7e10fb2a76f9"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("711a40b4-dc40-425a-b8e2-ffb837557399"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("0bda6cb9-f769-4f79-ab43-8c57ecc19ed0"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("aa699da7-b496-45c7-a848-e20e654bc193"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("5765f61a-af31-4393-a8b0-560b691e5f53"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("d8151b59-f255-43ec-8b6a-3a0de2463ae3"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("9f9406a5-05e9-4709-993e-a113c00e8252"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("74ae5c67-7b92-404a-93f2-0a3d91491e9d"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("9d429475-7289-4cb4-bafe-b5018d2192a7"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("21642d67-f127-4111-b8dd-fde2d5880bd7"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("5f0d41a8-0601-4342-bde9-16bfb64c7d57"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("4c8f8c5f-23b4-4d26-bb26-c195212dd2d1"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("7cbccadb-f15f-4bbd-93f0-32378e9db010"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("b95b7ad9-6715-487e-86dd-95650c7ecd06"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("0ca0eb5a-f3af-42fc-8eb4-e1247401f5dd"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("ac146ee4-4b9d-492a-aacd-4afae7d62a7d"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("1bc6382b-117c-4414-89de-45ea044c32cd"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("5e4d65c6-6f6a-4346-87af-2bb3ad3deedb"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("be8a510c-da45-4084-b9f9-0bc3a68264a5"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("3e03076b-252d-4c64-a745-c2673cea4fa4"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("906acdd6-7f1a-41d1-9473-9807741a2fa0"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("4bfa7779-8744-416e-bfae-a90fe521c04b"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("e8b1f44d-5f12-4084-8e3c-d807f498c169"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("cd2c9fc8-ceee-4d40-b83c-90f97388495e"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("5dc91b8b-e03b-4498-b477-82c0f204d3a1"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("4fa5dbdf-bd7c-4557-ba12-4803cb0c894a"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("93dc002f-ec4b-4cb2-9005-a8e746476976"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3bb9df08-c309-4a64-b0a1-d8ede3919001"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("abeab435-74e9-424d-80b6-c59899ded9ad"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("e0c796ae-74b8-4914-a714-65aefde64803"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("002ed43c-797a-49a1-998f-44ad95558d5d"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("81443735-afad-46d3-8f6c-c4dcfbd8d27e"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("5f34523b-0cbc-48ec-bbe4-50c76da503d2"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("3fcf9ed5-c07b-4dc6-8e10-e6986ea166a7"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("1f2ccdc9-c91f-403a-9de2-bb9fa6a98c3f"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 737, DateTimeKind.Local).AddTicks(6629),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 29, 14, 33, 49, 737, DateTimeKind.Local).AddTicks(6642)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("char(7)")
                                .HasColumnName("address.number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("5cc5b280-bda7-4840-8632-3d93d1535006"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
