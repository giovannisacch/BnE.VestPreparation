// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210602075330_finalizedExam")]
    partial class finalizedExam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed562dd9-7086-420b-8842-91aa8abcf8a3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            TextContentId = new Guid("b66fabc3-fe1b-431d-b60b-436d07f364e6")
                        },
                        new
                        {
                            Id = new Guid("cb564f6f-73f0-4fd8-8127-8cbe28d010df"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            TextContentId = new Guid("bc53b545-cc00-4752-9d95-e80af9c274c2")
                        },
                        new
                        {
                            Id = new Guid("fd28885f-4ddb-4014-89b2-e2c6844d989e"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            TextContentId = new Guid("c421bba9-7763-4f7c-9d7a-9da2daab4115")
                        },
                        new
                        {
                            Id = new Guid("90f780f4-3b69-480e-85e3-8f4a33877bc2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            TextContentId = new Guid("3d2bf0f0-14ac-4c00-9588-cbe231f41079")
                        },
                        new
                        {
                            Id = new Guid("82640b95-3c52-485d-b640-c82bdb04845e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            TextContentId = new Guid("f15211b7-29d3-44f1-a3de-ca7b98139062")
                        },
                        new
                        {
                            Id = new Guid("de1dceb2-aa71-42c7-b623-43a26e94265d"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            TextContentId = new Guid("55ce3d57-63fa-4590-89db-37d9d9e49062")
                        },
                        new
                        {
                            Id = new Guid("71a037f2-68d7-47f4-a981-3a9e14467a61"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            TextContentId = new Guid("f4cd640a-a23f-4e5f-a7f4-e24f0281f578")
                        },
                        new
                        {
                            Id = new Guid("63ddcb28-be8b-4f67-82e7-355c26cafc9f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            TextContentId = new Guid("141f39d5-30d0-4867-b902-3453470faa83")
                        },
                        new
                        {
                            Id = new Guid("88534c8e-6740-43bd-be60-17e9649eebd1"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            TextContentId = new Guid("621f034f-4765-41e4-96de-da2e24719526")
                        },
                        new
                        {
                            Id = new Guid("1d47c91a-2465-4c4c-98ec-146fcdd8677e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            TextContentId = new Guid("067bc22c-4bc5-4662-9804-ee5e9a8e69bd")
                        },
                        new
                        {
                            Id = new Guid("65e5919e-184b-4dd7-9d34-81b624ce197e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            TextContentId = new Guid("39145f40-d227-42b4-b747-73048a1dbed6")
                        },
                        new
                        {
                            Id = new Guid("5672650d-4fb4-4870-a4ab-9ce1c7c7e7f1"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            TextContentId = new Guid("5f4688b3-0979-48a1-b826-d75790757038")
                        },
                        new
                        {
                            Id = new Guid("383b9b71-6b78-4590-b890-662a002066aa"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            TextContentId = new Guid("702b3a89-47b7-4795-9796-cbbe1094b4f1")
                        },
                        new
                        {
                            Id = new Guid("db85693c-bc9c-4d02-a621-cb27b8f15a62"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            TextContentId = new Guid("d088ce67-d415-40c1-a979-3ffc79bb23cd")
                        },
                        new
                        {
                            Id = new Guid("10dd488a-46d8-454c-829b-560b84da314e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            TextContentId = new Guid("ec028c1a-3ccd-4a6e-afd9-7f6cd3de654e")
                        },
                        new
                        {
                            Id = new Guid("16a357d5-fecd-4cba-aa97-bbe5da6ead0d"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            TextContentId = new Guid("baccbeb9-66fc-4f95-a8d2-28d445b51400")
                        },
                        new
                        {
                            Id = new Guid("e048105a-8d4c-42f5-b85b-a6c0052c673f"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            TextContentId = new Guid("353ba3d6-1d98-4684-ae0e-675f038909d9")
                        },
                        new
                        {
                            Id = new Guid("3e736294-6d6a-4c6b-94be-dbfd12b4eae2"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            TextContentId = new Guid("a96ad847-fcbc-4bfd-921f-6daa4b4b5ae3")
                        },
                        new
                        {
                            Id = new Guid("a3c1c209-1f54-41a5-a4df-6065a455e69c"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            TextContentId = new Guid("aec4c7f5-e82b-4a18-9d33-71947b524b2b")
                        },
                        new
                        {
                            Id = new Guid("4615a0cc-9f60-4abf-b44d-d2b6c28b8d3c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            TextContentId = new Guid("1674e96d-d4bf-4260-8041-a4df1c68de90")
                        },
                        new
                        {
                            Id = new Guid("f1669493-513d-485f-a2b6-fe211224729e"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            TextContentId = new Guid("83fec19b-2af3-4184-80e1-2737f67e61e9")
                        },
                        new
                        {
                            Id = new Guid("f66a645c-17e3-4a89-8ecf-1bb5cc369e23"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            TextContentId = new Guid("24fc22f9-c74e-4f86-a63e-c4af81a372a8")
                        },
                        new
                        {
                            Id = new Guid("dd0d2261-378e-480e-bd56-832f0771129f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            TextContentId = new Guid("c9e5e9ae-d4a8-4aa1-a77f-9b26a0df7605")
                        },
                        new
                        {
                            Id = new Guid("6df34b69-4549-4ea2-9e54-666d669bc00a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            TextContentId = new Guid("3ad0e27b-efce-43c3-9d98-f29419c8381c")
                        },
                        new
                        {
                            Id = new Guid("a4155086-0b11-446b-a7e9-816d8898c430"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            TextContentId = new Guid("3349adc0-557f-4deb-8e02-49391ec1aeee")
                        },
                        new
                        {
                            Id = new Guid("5ceb40cf-65d1-4f0f-94b9-4c38a0d50ec9"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            TextContentId = new Guid("4212b893-427c-4628-a3d8-169c7807d016")
                        },
                        new
                        {
                            Id = new Guid("18cc2c19-3714-4871-aa5d-f226f2413597"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            TextContentId = new Guid("3c6ffd62-bc60-428b-9079-2db323a7c7c9")
                        },
                        new
                        {
                            Id = new Guid("fd45bc4c-b625-4dac-ba04-723975887de8"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            TextContentId = new Guid("65f938da-fe48-4a81-a6a0-02b102c5e39e")
                        },
                        new
                        {
                            Id = new Guid("854bec3a-bd1f-4715-ac71-075e0a4f853b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            TextContentId = new Guid("172b77df-dc9e-4585-a587-9b9725ff9a0b")
                        },
                        new
                        {
                            Id = new Guid("4da79f6b-0d2b-4062-953d-a3322424aa13"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            TextContentId = new Guid("9a52d8d5-72ed-46a3-bb84-99c07565a09d")
                        },
                        new
                        {
                            Id = new Guid("3cb53e5b-f488-4917-afc1-aac16743fed5"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            TextContentId = new Guid("691ae1e4-33e7-4a18-b0b2-8b8b36dc80c9")
                        },
                        new
                        {
                            Id = new Guid("0e9560b8-f567-4ef7-be25-030b111f91c6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            TextContentId = new Guid("eecd0a88-554e-4500-9efd-3a9d31f308ce")
                        },
                        new
                        {
                            Id = new Guid("69b8d983-2fb2-402c-bd52-1bde14ae2dd5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            TextContentId = new Guid("101dc5ce-dd90-4774-aa25-53fb5c8a09b5")
                        },
                        new
                        {
                            Id = new Guid("719de6c5-8e57-4434-8d31-901e91dda4ac"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            TextContentId = new Guid("d372091e-af5f-4164-bf08-91c5ee7c46d5")
                        },
                        new
                        {
                            Id = new Guid("fcf323f3-8b46-45cb-9f9d-0bad5b241a30"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            TextContentId = new Guid("ed7287e7-3682-4b8b-9a50-43dad38218aa")
                        },
                        new
                        {
                            Id = new Guid("3e7caf43-a315-4725-b384-e56e5d26601c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            TextContentId = new Guid("f7997128-687e-46b6-857d-8910e3657160")
                        },
                        new
                        {
                            Id = new Guid("50275f6f-402e-4caa-9e91-e4bb18231283"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            TextContentId = new Guid("7f695aa2-902f-49db-bc48-117e739d576d")
                        },
                        new
                        {
                            Id = new Guid("8522a65b-1141-459c-bff6-7ac1e80746c5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            TextContentId = new Guid("ef449683-5b6e-4919-b1f9-f323b0bab39c")
                        },
                        new
                        {
                            Id = new Guid("ee940621-5b0b-4162-a2ac-b0eeb0a582e5"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            TextContentId = new Guid("05808d60-09ae-494d-9532-e2da0f1ea2d4")
                        },
                        new
                        {
                            Id = new Guid("220655c9-3c95-4cae-b3b9-f776e75b6e36"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            TextContentId = new Guid("91c1d65f-d8fb-49bc-9576-2bb24402162c")
                        },
                        new
                        {
                            Id = new Guid("ee1757f9-73bd-44c6-9241-9a90b46fba79"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            TextContentId = new Guid("3843a953-587c-4327-8c3f-ff757f526fb0")
                        },
                        new
                        {
                            Id = new Guid("67044ae6-8d15-432e-ac71-0b3c7bc8c442"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            TextContentId = new Guid("951db863-2dec-42fb-9207-94660260dbdb")
                        },
                        new
                        {
                            Id = new Guid("282db9c0-644c-4b02-a963-d7564ab36e43"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            TextContentId = new Guid("73f93aa7-fbd1-424c-be4d-44e4d0b7a3fd")
                        },
                        new
                        {
                            Id = new Guid("be5d8837-1906-4029-804c-b9cc338ca813"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            TextContentId = new Guid("2c9708bc-9d2f-408d-8a96-0b2715add01c")
                        },
                        new
                        {
                            Id = new Guid("2de77188-39b4-4c35-aadc-77d7c8eb9d0d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            TextContentId = new Guid("91abe9e1-ea2a-4f73-ae03-026612bf430f")
                        },
                        new
                        {
                            Id = new Guid("f9fd3b00-4171-4232-9299-e379bf8e0807"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            TextContentId = new Guid("8ca34070-b352-4383-99d8-711308395f58")
                        },
                        new
                        {
                            Id = new Guid("b6e89a37-5cd9-4ec2-9db0-dbe01830ba55"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            TextContentId = new Guid("5589b799-1968-4ea9-b115-cd423046d5cc")
                        },
                        new
                        {
                            Id = new Guid("de832d27-b2d0-4ca3-b6d2-ea13c3fd2564"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            TextContentId = new Guid("d4cde78c-1cdc-43c4-8698-86bbc5fc4e68")
                        },
                        new
                        {
                            Id = new Guid("a62a93d5-1bef-4842-8439-91dcbeadc953"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            TextContentId = new Guid("5c0754a8-d75b-47eb-8dbb-87489e610f39")
                        },
                        new
                        {
                            Id = new Guid("068f49e1-91c3-4180-b284-ad3007474e3e"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            TextContentId = new Guid("9df5c5ba-39c7-4170-b7c5-0ed0fb7e8a79")
                        },
                        new
                        {
                            Id = new Guid("98143212-b2a8-4184-9b82-c1277b94fb6a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            TextContentId = new Guid("b87446a0-06cc-465b-9f6f-6ce5d4ec7f94")
                        },
                        new
                        {
                            Id = new Guid("e05f6fe5-7f3c-47e7-b28d-3bc412d1d6dc"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            TextContentId = new Guid("303e1281-8d75-43e3-bce9-412954ce1b3c")
                        },
                        new
                        {
                            Id = new Guid("76288ba3-64ef-4c73-b96b-9fe3ee683443"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            TextContentId = new Guid("dc9a9953-1b99-40b2-9580-7871b0356506")
                        },
                        new
                        {
                            Id = new Guid("0956c7f6-f9d7-417b-9246-682fd9fc8d47"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            TextContentId = new Guid("6039c1ca-cfb2-4b2b-9b94-426295c72585")
                        },
                        new
                        {
                            Id = new Guid("ee0adbec-34d1-4915-b2dc-bae6e452effc"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            TextContentId = new Guid("b657d331-3169-4f2a-a96d-8c3741b99eda")
                        },
                        new
                        {
                            Id = new Guid("94cf023b-4984-4f60-9bd8-6032c950a7df"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            TextContentId = new Guid("65951cfc-fc42-432f-9bd1-acbb9f7877e0")
                        },
                        new
                        {
                            Id = new Guid("c5196837-c4ea-4ae7-b0d8-567aee41647d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            TextContentId = new Guid("67e3cd2f-263c-4e88-92f8-824a67e17255")
                        },
                        new
                        {
                            Id = new Guid("f5762f22-62ac-444d-a3aa-bc7becb20769"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            TextContentId = new Guid("e43f0569-faca-4a19-9e21-fa4787f093a6")
                        },
                        new
                        {
                            Id = new Guid("0c9e64da-d3a1-4aaa-98a5-e7146499ebda"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            TextContentId = new Guid("f776a197-2d5f-4125-92f2-afd96f782446")
                        },
                        new
                        {
                            Id = new Guid("9a92ff4d-e2a6-4e56-9364-10a5b622e68c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            TextContentId = new Guid("2f1bee3b-b8f1-419d-9a51-df3b9e4e6af7")
                        },
                        new
                        {
                            Id = new Guid("e17720d9-be5f-4959-af1b-1c70e2228b65"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            TextContentId = new Guid("c8a756e5-4b76-4cab-9c52-84c61f897e6c")
                        },
                        new
                        {
                            Id = new Guid("fbf2ad20-d6be-4df0-8973-321a60599506"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            TextContentId = new Guid("159b1761-44f8-4665-8c22-25b0d83e95a4")
                        },
                        new
                        {
                            Id = new Guid("789a753f-357c-48aa-91a8-e3fd7e60c98c"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            TextContentId = new Guid("4275a808-bb77-4e52-a57c-863a9a13827e")
                        },
                        new
                        {
                            Id = new Guid("a7471cd4-6d9c-4d9e-b159-2520e6aa8ddc"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            TextContentId = new Guid("b0dda532-23c3-4853-a0b9-a7a6d82f9a3c")
                        },
                        new
                        {
                            Id = new Guid("764ff0d0-50d4-45e6-b3e1-90e3cfb48df0"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            TextContentId = new Guid("e57e0ae6-eecd-4121-8129-95ebe4ba1d45")
                        },
                        new
                        {
                            Id = new Guid("3c8aed6a-5c77-4ad7-83b1-292e0fd738d1"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            TextContentId = new Guid("cd2930f8-4fbf-40e6-a8fe-49569bf059bb")
                        },
                        new
                        {
                            Id = new Guid("7159a090-1b0f-4091-bf4a-e8edbc81d872"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            TextContentId = new Guid("5981c73a-2bf5-4d48-b45e-d2a4a8852adc")
                        },
                        new
                        {
                            Id = new Guid("2b35a894-e87e-45b0-98a9-28d23951763a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            TextContentId = new Guid("79f59a93-4f1c-4977-a303-ba9e3eb9ce09")
                        },
                        new
                        {
                            Id = new Guid("b77b4f73-e3b9-414e-a361-54d9e6c2f993"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            TextContentId = new Guid("bd1b9672-4567-49f0-aad3-3d3cef4d06b7")
                        },
                        new
                        {
                            Id = new Guid("cdc1b2d3-ac4e-4a45-87cc-2f1165499871"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            TextContentId = new Guid("44ad5fd3-efab-404c-ad0b-30f9187b8da0")
                        },
                        new
                        {
                            Id = new Guid("41e4d9d1-2c3d-4a6d-9577-eb39595916bc"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            TextContentId = new Guid("94086c41-fcbb-4276-9e16-517661796368")
                        },
                        new
                        {
                            Id = new Guid("a083d2f1-0c31-4a47-b415-48d86fb235b5"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            TextContentId = new Guid("800a5092-9bce-4505-874f-be8bdce58754")
                        },
                        new
                        {
                            Id = new Guid("7afab277-c995-4076-8cb7-3f38697cb87a"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            TextContentId = new Guid("e401fbcc-fa03-400c-9b08-5b7e42a728bb")
                        },
                        new
                        {
                            Id = new Guid("e8f025f6-098c-4dad-bead-8be5e3c5d2dc"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            TextContentId = new Guid("0e7b6b94-8255-45c0-807a-7296d91ac0b4")
                        },
                        new
                        {
                            Id = new Guid("9e4b93bc-0f4c-4595-8adb-55ab00108bc7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            TextContentId = new Guid("cc25d75a-4e51-44e4-b5b7-42c402345f9e")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(4826),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(4832)
                        },
                        new
                        {
                            Id = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8205),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8206)
                        },
                        new
                        {
                            Id = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8224),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8225)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39cac7ff-d7f5-4cf4-aa70-cc368f077459"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(2875),
                            EnunciatedId = new Guid("7f4b05a0-f1e4-40af-b450-a9a77e5d159e"),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            Index = 0,
                            SubjectId = new Guid("c17f6f96-7216-4c82-ba71-a23cb24a9bbb"),
                            SupportingTextId = new Guid("758a294d-5587-4e15-94d0-027c184e3d81"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(2880)
                        },
                        new
                        {
                            Id = new Guid("e898cffe-cd4a-4010-83cc-cacbedffb9f1"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6056),
                            EnunciatedId = new Guid("88207f3c-580a-4922-b233-94ea51414e32"),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            Index = 1,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("2a8a22e9-8823-4943-a8ba-821f4f020083"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6061)
                        },
                        new
                        {
                            Id = new Guid("d982cfc8-26cf-4a10-a236-9599f0416929"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6123),
                            EnunciatedId = new Guid("b1f4b1ff-858d-4ef9-b29e-76255e149ae6"),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            Index = 2,
                            SubjectId = new Guid("3a62e289-7dd8-4c10-b0ea-1b3310b93bbe"),
                            SupportingTextId = new Guid("b86e8ca6-63cd-47d3-afa8-c8ff58fbf317"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6124)
                        },
                        new
                        {
                            Id = new Guid("3056e6f7-b827-443f-980b-579ecbef0854"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6142),
                            EnunciatedId = new Guid("896d12e5-4fff-44ad-a307-489ca97f2c45"),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            Index = 3,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("2a8a22e9-8823-4943-a8ba-821f4f020083"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6143)
                        },
                        new
                        {
                            Id = new Guid("e05fc37c-8abb-46b3-95d7-f317c4dbf8c9"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6156),
                            EnunciatedId = new Guid("267d7599-3951-4223-8fcc-c6ac533cc4da"),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            Index = 4,
                            SubjectId = new Guid("c0fa5613-40b5-480a-aa97-334c47def0d2"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6156)
                        },
                        new
                        {
                            Id = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6171),
                            EnunciatedId = new Guid("cc9d9ff0-78f5-459b-bcea-088636230875"),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            Index = 0,
                            SubjectId = new Guid("c17f6f96-7216-4c82-ba71-a23cb24a9bbb"),
                            SupportingTextId = new Guid("ba976e14-e6b1-47e4-aa4e-64c7ff8d5b40"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6172)
                        },
                        new
                        {
                            Id = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6185),
                            EnunciatedId = new Guid("b4ad30e5-0d91-4f83-ab5c-4efb71b6a745"),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            Index = 1,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("e4b0ac71-03ab-47b8-8ca8-d19b25177e67"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6186)
                        },
                        new
                        {
                            Id = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6198),
                            EnunciatedId = new Guid("698f9db1-3433-4d81-a8b4-8b9dec3123e5"),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            Index = 2,
                            SubjectId = new Guid("3a62e289-7dd8-4c10-b0ea-1b3310b93bbe"),
                            SupportingTextId = new Guid("c61934b1-1a68-4ce4-89f1-d8579ebad5cb"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6199)
                        },
                        new
                        {
                            Id = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6213),
                            EnunciatedId = new Guid("80e6bbf9-30c3-4720-aad0-e0b5f9d17e6b"),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            Index = 3,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("e4b0ac71-03ab-47b8-8ca8-d19b25177e67"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6214)
                        },
                        new
                        {
                            Id = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6258),
                            EnunciatedId = new Guid("cbb05312-e803-4b91-9c5f-dacbce9dc169"),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            Index = 4,
                            SubjectId = new Guid("c0fa5613-40b5-480a-aa97-334c47def0d2"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6259)
                        },
                        new
                        {
                            Id = new Guid("0d8a7848-e6c4-4ab3-a50e-bd703f3e0728"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6272),
                            EnunciatedId = new Guid("100f37cc-cb6b-4ee5-8ebe-a08625294122"),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            Index = 0,
                            SubjectId = new Guid("c17f6f96-7216-4c82-ba71-a23cb24a9bbb"),
                            SupportingTextId = new Guid("92a70e56-b8a6-4547-855b-0f8e6e05459e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6273)
                        },
                        new
                        {
                            Id = new Guid("a4897723-6c12-4820-80b1-d2edd96f2646"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6287),
                            EnunciatedId = new Guid("a37be152-0ac0-4106-aeda-b933b00651f7"),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            Index = 1,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("92a70e56-b8a6-4547-855b-0f8e6e05459e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6288)
                        },
                        new
                        {
                            Id = new Guid("634bded7-40d4-4875-abb9-757e7e4a1de5"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6301),
                            EnunciatedId = new Guid("fd73924f-9f09-4801-9b8b-4f6e1ffb5b38"),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            Index = 2,
                            SubjectId = new Guid("3a62e289-7dd8-4c10-b0ea-1b3310b93bbe"),
                            SupportingTextId = new Guid("92a70e56-b8a6-4547-855b-0f8e6e05459e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6302)
                        },
                        new
                        {
                            Id = new Guid("a64b9ea1-fe40-4c7a-8119-ef3da55c2303"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6315),
                            EnunciatedId = new Guid("8cad1143-ae4d-4248-a53c-5f320a91dec0"),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            Index = 3,
                            SubjectId = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            SupportingTextId = new Guid("92a70e56-b8a6-4547-855b-0f8e6e05459e"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6316)
                        },
                        new
                        {
                            Id = new Guid("ddebdc4f-6921-4514-8d23-32a4a1097c0b"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6328),
                            EnunciatedId = new Guid("578c208e-521d-4334-b7e8-c1b0aa26f2e2"),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            Index = 4,
                            SubjectId = new Guid("c0fa5613-40b5-480a-aa97-334c47def0d2"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 422, DateTimeKind.Local).AddTicks(6328)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("908d88a7-1902-44a6-a62c-657281759bf7"),
                            ChosenAlternativeId = new Guid("5ceb40cf-65d1-4f0f-94b9-4c38a0d50ec9"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(2831),
                            QuestionId = new Guid("f75bb4ba-866f-440b-aae9-bfc2fe013193"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(2842),
                            UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91")
                        },
                        new
                        {
                            Id = new Guid("22171852-1739-4231-9cda-b7d023bedce7"),
                            ChosenAlternativeId = new Guid("3cb53e5b-f488-4917-afc1-aac16743fed5"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4247),
                            QuestionId = new Guid("db992e74-1e74-4b75-ad6e-15986fc97fad"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4252),
                            UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91")
                        },
                        new
                        {
                            Id = new Guid("973f52a5-7d31-431b-8511-941ba7377eb5"),
                            ChosenAlternativeId = new Guid("3e7caf43-a315-4725-b384-e56e5d26601c"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4264),
                            QuestionId = new Guid("c3a7b9d4-2af1-4940-96f4-805a4d95084a"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4265),
                            UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91")
                        },
                        new
                        {
                            Id = new Guid("8c40c2bd-17e1-4139-a598-2316065f5d65"),
                            ChosenAlternativeId = new Guid("ee1757f9-73bd-44c6-9241-9a90b46fba79"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4268),
                            QuestionId = new Guid("960e82dc-172c-40e4-b9e3-d9b4fac3f74b"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4269),
                            UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91")
                        },
                        new
                        {
                            Id = new Guid("af97f39f-becf-4056-8cab-b4213288a05a"),
                            ChosenAlternativeId = new Guid("f9fd3b00-4171-4232-9299-e379bf8e0807"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4272),
                            QuestionId = new Guid("7dadbe5d-35ef-438a-8170-7663a006edc1"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 438, DateTimeKind.Local).AddTicks(4273),
                            UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c17f6f96-7216-4c82-ba71-a23cb24a9bbb"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 420, DateTimeKind.Local).AddTicks(9407),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 420, DateTimeKind.Local).AddTicks(9922)
                        },
                        new
                        {
                            Id = new Guid("3a62e289-7dd8-4c10-b0ea-1b3310b93bbe"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(888),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(891)
                        },
                        new
                        {
                            Id = new Guid("151cf588-1271-4b0b-9822-1baa5c88c061"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(894),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("c17f6f96-7216-4c82-ba71-a23cb24a9bbb"),
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(895)
                        },
                        new
                        {
                            Id = new Guid("c0fa5613-40b5-480a-aa97-334c47def0d2"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(896),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 421, DateTimeKind.Local).AddTicks(897)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("758a294d-5587-4e15-94d0-027c184e3d81"),
                            ContentId = new Guid("aef901da-4609-4c56-b4ca-98005e62fcc7")
                        },
                        new
                        {
                            Id = new Guid("b86e8ca6-63cd-47d3-afa8-c8ff58fbf317"),
                            ContentId = new Guid("d32196f2-c4c2-4c21-ad58-4722bd0ffd13")
                        },
                        new
                        {
                            Id = new Guid("2a8a22e9-8823-4943-a8ba-821f4f020083"),
                            ContentId = new Guid("6e2332e7-5949-4593-8ecc-c5185d3e1673")
                        },
                        new
                        {
                            Id = new Guid("ba976e14-e6b1-47e4-aa4e-64c7ff8d5b40"),
                            ContentId = new Guid("0e69aec4-ee74-43ce-a5ce-8d70cc4fcb34")
                        },
                        new
                        {
                            Id = new Guid("c61934b1-1a68-4ce4-89f1-d8579ebad5cb"),
                            ContentId = new Guid("01c275fb-fe96-4dc0-ab83-71d41c0726f1")
                        },
                        new
                        {
                            Id = new Guid("e4b0ac71-03ab-47b8-8ca8-d19b25177e67"),
                            ContentId = new Guid("75f7e129-35b2-4727-8ccf-03f16a78842f")
                        },
                        new
                        {
                            Id = new Guid("9c7ae1fb-9070-424c-ab91-b2cd54380fa6"),
                            ContentId = new Guid("428a2d24-85aa-4919-862f-13445c64166d")
                        },
                        new
                        {
                            Id = new Guid("2a485289-b1ca-46e3-8981-1a266119fde5"),
                            ContentId = new Guid("c893d656-dcb5-467a-abb1-470af3c4680f")
                        },
                        new
                        {
                            Id = new Guid("92a70e56-b8a6-4547-855b-0f8e6e05459e"),
                            ContentId = new Guid("c3701f02-c7b5-4797-b4b0-c54ca1df7bd6")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("FinalizedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finalized_date");

                    b.HasKey("UserId", "ExamId")
                        .HasName("pk_finalized_exams");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_finalized_exams_exam_id");

                    b.ToTable("finalized_exams");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("396f2688-6f31-4a1e-b506-74e763b74b86"),
                            CloseDate = new DateTime(2021, 6, 6, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            OpenDate = new DateTime(2021, 6, 6, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("7194db27-0795-4f84-a52f-9476b7591fa9"),
                            CloseDate = new DateTime(2021, 6, 7, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2e62ecb7-8aa4-4ed4-88f5-9c1d6327ef5b"),
                            OpenDate = new DateTime(2021, 6, 7, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("6789d4f0-46f6-472b-bcef-78454fcb7613"),
                            CloseDate = new DateTime(2021, 6, 2, 8, 53, 29, 430, DateTimeKind.Local).AddTicks(8162),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            OpenDate = new DateTime(2021, 6, 2, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8162)
                        },
                        new
                        {
                            Id = new Guid("a6945bd0-2375-4120-9ad1-9d55466dc397"),
                            CloseDate = new DateTime(2021, 6, 3, 6, 53, 29, 430, DateTimeKind.Local).AddTicks(8162),
                            ExamId = new Guid("1d58ef41-377e-4c07-8343-981ae6d39c64"),
                            OpenDate = new DateTime(2021, 6, 3, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8162)
                        },
                        new
                        {
                            Id = new Guid("b0899657-4552-4810-a651-a051b35db4bb"),
                            CloseDate = new DateTime(2021, 5, 31, 6, 53, 29, 430, DateTimeKind.Local).AddTicks(8208),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            OpenDate = new DateTime(2021, 5, 31, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8208)
                        },
                        new
                        {
                            Id = new Guid("8dd1084e-e889-46a5-b0c4-016138a390d0"),
                            CloseDate = new DateTime(2021, 6, 1, 6, 53, 29, 430, DateTimeKind.Local).AddTicks(8208),
                            ExamId = new Guid("a83d57d0-c35c-452c-95de-16b1c84ad9aa"),
                            OpenDate = new DateTime(2021, 6, 1, 4, 53, 29, 430, DateTimeKind.Local).AddTicks(8208)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f4b05a0-f1e4-40af-b450-a9a77e5d159e"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("88207f3c-580a-4922-b233-94ea51414e32"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b1f4b1ff-858d-4ef9-b29e-76255e149ae6"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("896d12e5-4fff-44ad-a307-489ca97f2c45"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("267d7599-3951-4223-8fcc-c6ac533cc4da"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("cc9d9ff0-78f5-459b-bcea-088636230875"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b4ad30e5-0d91-4f83-ab5c-4efb71b6a745"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("698f9db1-3433-4d81-a8b4-8b9dec3123e5"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("80e6bbf9-30c3-4720-aad0-e0b5f9d17e6b"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("cbb05312-e803-4b91-9c5f-dacbce9dc169"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("100f37cc-cb6b-4ee5-8ebe-a08625294122"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("a37be152-0ac0-4106-aeda-b933b00651f7"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("fd73924f-9f09-4801-9b8b-4f6e1ffb5b38"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("8cad1143-ae4d-4248-a53c-5f320a91dec0"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("578c208e-521d-4334-b7e8-c1b0aa26f2e2"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("b66fabc3-fe1b-431d-b60b-436d07f364e6"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("bc53b545-cc00-4752-9d95-e80af9c274c2"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("c421bba9-7763-4f7c-9d7a-9da2daab4115"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("3d2bf0f0-14ac-4c00-9588-cbe231f41079"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("f15211b7-29d3-44f1-a3de-ca7b98139062"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("55ce3d57-63fa-4590-89db-37d9d9e49062"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("f4cd640a-a23f-4e5f-a7f4-e24f0281f578"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("141f39d5-30d0-4867-b902-3453470faa83"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("621f034f-4765-41e4-96de-da2e24719526"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("067bc22c-4bc5-4662-9804-ee5e9a8e69bd"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("39145f40-d227-42b4-b747-73048a1dbed6"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("5f4688b3-0979-48a1-b826-d75790757038"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("702b3a89-47b7-4795-9796-cbbe1094b4f1"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("d088ce67-d415-40c1-a979-3ffc79bb23cd"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("ec028c1a-3ccd-4a6e-afd9-7f6cd3de654e"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("baccbeb9-66fc-4f95-a8d2-28d445b51400"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("353ba3d6-1d98-4684-ae0e-675f038909d9"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("a96ad847-fcbc-4bfd-921f-6daa4b4b5ae3"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("aec4c7f5-e82b-4a18-9d33-71947b524b2b"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("1674e96d-d4bf-4260-8041-a4df1c68de90"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("83fec19b-2af3-4184-80e1-2737f67e61e9"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("24fc22f9-c74e-4f86-a63e-c4af81a372a8"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("c9e5e9ae-d4a8-4aa1-a77f-9b26a0df7605"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("3ad0e27b-efce-43c3-9d98-f29419c8381c"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("3349adc0-557f-4deb-8e02-49391ec1aeee"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("4212b893-427c-4628-a3d8-169c7807d016"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("3c6ffd62-bc60-428b-9079-2db323a7c7c9"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("65f938da-fe48-4a81-a6a0-02b102c5e39e"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("172b77df-dc9e-4585-a587-9b9725ff9a0b"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("9a52d8d5-72ed-46a3-bb84-99c07565a09d"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("691ae1e4-33e7-4a18-b0b2-8b8b36dc80c9"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("eecd0a88-554e-4500-9efd-3a9d31f308ce"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("101dc5ce-dd90-4774-aa25-53fb5c8a09b5"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("d372091e-af5f-4164-bf08-91c5ee7c46d5"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("ed7287e7-3682-4b8b-9a50-43dad38218aa"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("f7997128-687e-46b6-857d-8910e3657160"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("7f695aa2-902f-49db-bc48-117e739d576d"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("ef449683-5b6e-4919-b1f9-f323b0bab39c"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("05808d60-09ae-494d-9532-e2da0f1ea2d4"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("91c1d65f-d8fb-49bc-9576-2bb24402162c"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("3843a953-587c-4327-8c3f-ff757f526fb0"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("951db863-2dec-42fb-9207-94660260dbdb"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("73f93aa7-fbd1-424c-be4d-44e4d0b7a3fd"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("2c9708bc-9d2f-408d-8a96-0b2715add01c"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("91abe9e1-ea2a-4f73-ae03-026612bf430f"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("8ca34070-b352-4383-99d8-711308395f58"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("5589b799-1968-4ea9-b115-cd423046d5cc"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("d4cde78c-1cdc-43c4-8698-86bbc5fc4e68"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("5c0754a8-d75b-47eb-8dbb-87489e610f39"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("9df5c5ba-39c7-4170-b7c5-0ed0fb7e8a79"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("b87446a0-06cc-465b-9f6f-6ce5d4ec7f94"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("303e1281-8d75-43e3-bce9-412954ce1b3c"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("dc9a9953-1b99-40b2-9580-7871b0356506"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("6039c1ca-cfb2-4b2b-9b94-426295c72585"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("b657d331-3169-4f2a-a96d-8c3741b99eda"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("65951cfc-fc42-432f-9bd1-acbb9f7877e0"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("67e3cd2f-263c-4e88-92f8-824a67e17255"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("e43f0569-faca-4a19-9e21-fa4787f093a6"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("f776a197-2d5f-4125-92f2-afd96f782446"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("2f1bee3b-b8f1-419d-9a51-df3b9e4e6af7"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("c8a756e5-4b76-4cab-9c52-84c61f897e6c"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("159b1761-44f8-4665-8c22-25b0d83e95a4"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("4275a808-bb77-4e52-a57c-863a9a13827e"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("b0dda532-23c3-4853-a0b9-a7a6d82f9a3c"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("e57e0ae6-eecd-4121-8129-95ebe4ba1d45"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("cd2930f8-4fbf-40e6-a8fe-49569bf059bb"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("5981c73a-2bf5-4d48-b45e-d2a4a8852adc"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("79f59a93-4f1c-4977-a303-ba9e3eb9ce09"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("bd1b9672-4567-49f0-aad3-3d3cef4d06b7"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("44ad5fd3-efab-404c-ad0b-30f9187b8da0"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("94086c41-fcbb-4276-9e16-517661796368"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("800a5092-9bce-4505-874f-be8bdce58754"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("e401fbcc-fa03-400c-9b08-5b7e42a728bb"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("0e7b6b94-8255-45c0-807a-7296d91ac0b4"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("cc25d75a-4e51-44e4-b5b7-42c402345f9e"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("aef901da-4609-4c56-b4ca-98005e62fcc7"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("0e69aec4-ee74-43ce-a5ce-8d70cc4fcb34"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("428a2d24-85aa-4919-862f-13445c64166d"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d32196f2-c4c2-4c21-ad58-4722bd0ffd13"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("01c275fb-fe96-4dc0-ab83-71d41c0726f1"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("c893d656-dcb5-467a-abb1-470af3c4680f"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("6e2332e7-5949-4593-8ecc-c5185d3e1673"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("75f7e129-35b2-4727-8ccf-03f16a78842f"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("c3701f02-c7b5-4797-b4b0-c54ca1df7bd6"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCollege")
                        .HasColumnType("text")
                        .HasColumnName("actual_college");

                    b.Property<string>("ActualOccupation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("actual_occupation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExpectedCollege")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("expected_college");

                    b.Property<string>("ExpectedCourse")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expected_course");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_user_profile");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_user_profile_user_id");

                    b.ToTable("external_user_profile");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 429, DateTimeKind.Local).AddTicks(5799),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 6, 2, 4, 53, 29, 429, DateTimeKind.Local).AddTicks(5820),
                            UserType = 0
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.RelationEntities.FinalizedExam", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Finalizeds")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_finalized_exams_exams_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("FinalizedExams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_finalized_exams_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithOne("ExternalUserProfile")
                        .HasForeignKey("BnE.EducationVest.Domain.Users.Entities.ExternalUserProfile", "UserId")
                        .HasConstraintName("fk_external_user_profile_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("95b6658d-5238-49c4-ab75-6eae663b9b91"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Finalizeds");

                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("ExternalUserProfile");

                    b.Navigation("FinalizedExams");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
