// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210527064959_examModelIncluded")]
    partial class examModelIncluded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd2331ee-ea56-4d68-b8fd-7086a3e945af"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            TextContentId = new Guid("00e4d373-17c8-4bf6-b186-7209b824ceea")
                        },
                        new
                        {
                            Id = new Guid("6ede63d7-da80-4dca-b693-fae7c13b15f3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            TextContentId = new Guid("2f517b3f-a7e3-4e1a-b5f5-847289ad6211")
                        },
                        new
                        {
                            Id = new Guid("2dcf682b-6ad4-44ff-8da1-5a6f40124055"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            TextContentId = new Guid("5edcd1d0-7e03-4cff-bf6f-72b3f24ef556")
                        },
                        new
                        {
                            Id = new Guid("8d468103-4337-4ea8-a878-7d7b28331fe5"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            TextContentId = new Guid("35e34ef0-f1fc-4aee-8a76-977d5d22a679")
                        },
                        new
                        {
                            Id = new Guid("713c7b1c-fd36-4c62-b8e0-911c93c10f20"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            TextContentId = new Guid("b66750ae-2aa2-4ebc-9bfe-47aa51ae838f")
                        },
                        new
                        {
                            Id = new Guid("c8d21ce1-4549-4744-b558-dc0f844ded14"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            TextContentId = new Guid("2ba78eff-a236-466c-8db0-52f94b25e7ff")
                        },
                        new
                        {
                            Id = new Guid("99edf4d3-538b-4ab2-8005-6223fa2b55f5"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            TextContentId = new Guid("3019402e-63e3-4e8b-b963-972fa7efb819")
                        },
                        new
                        {
                            Id = new Guid("dfa6b83b-36c3-4fd7-880b-878fdad330ba"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            TextContentId = new Guid("6cbf4a53-16c7-4b51-a6b2-ec44f8fe795a")
                        },
                        new
                        {
                            Id = new Guid("99d63854-89d9-4d03-a21e-fa30e00d5102"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            TextContentId = new Guid("a7b02bd6-5b49-4653-b2c0-128782e0e42f")
                        },
                        new
                        {
                            Id = new Guid("7eb84a22-baf7-4ffe-9029-9fab521099b9"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            TextContentId = new Guid("b8e58122-a4b0-40fe-9de4-e5d4aadaa1be")
                        },
                        new
                        {
                            Id = new Guid("667e3309-e0dc-47e5-84d9-5ea0b331c66f"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            TextContentId = new Guid("9eb48429-40a8-4f64-bca5-d2612f54916b")
                        },
                        new
                        {
                            Id = new Guid("2a0abac5-605f-40cd-81c4-f044a64022eb"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            TextContentId = new Guid("39ee66d8-4bb8-4db6-82e3-845c10748667")
                        },
                        new
                        {
                            Id = new Guid("ae91542c-14c5-4c15-854d-e2aa31320eb7"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            TextContentId = new Guid("8b24ddb4-60a2-4139-a722-326a436e37e5")
                        },
                        new
                        {
                            Id = new Guid("1352a340-651d-4f99-9ca4-73c0eebf97e2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            TextContentId = new Guid("b950ba5e-7022-413e-96d6-19acad46a94f")
                        },
                        new
                        {
                            Id = new Guid("465cfd63-8115-41bc-9bf3-719d8daa6c9d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            TextContentId = new Guid("46da08c2-82ba-4ae6-b917-670d421dce8e")
                        },
                        new
                        {
                            Id = new Guid("3d8ca465-5135-475a-ac99-337499ab7840"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            TextContentId = new Guid("74d94fcd-e6ae-4895-9d2e-921fdbe62802")
                        },
                        new
                        {
                            Id = new Guid("54fae449-006c-4747-9088-10f7f616a27d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            TextContentId = new Guid("f3bde3d4-c8b1-495b-988a-873502e4a4bf")
                        },
                        new
                        {
                            Id = new Guid("9f539103-b73b-4e79-9596-f946823e5a93"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            TextContentId = new Guid("74929738-284a-4740-a7d8-40383caf76eb")
                        },
                        new
                        {
                            Id = new Guid("cabaf294-9f15-42ec-8af7-85c94845d0b5"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            TextContentId = new Guid("f84f2d68-311e-4899-ba5b-fca7516bfd10")
                        },
                        new
                        {
                            Id = new Guid("ee79e5fd-891d-40dc-bf2f-ee579ab3188c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            TextContentId = new Guid("dcdc55d8-ffa5-4172-b429-d8877e34a91b")
                        },
                        new
                        {
                            Id = new Guid("cdcec434-9387-447a-a7f4-93c54fb9d76c"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            TextContentId = new Guid("d7edc34b-7fa4-4b9e-8b4b-7cf38f74e8c9")
                        },
                        new
                        {
                            Id = new Guid("5ed5e3f4-4cd7-4b4d-a725-19598713a3f2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            TextContentId = new Guid("fb3741fe-0638-470c-b2f1-f95e7b031eb6")
                        },
                        new
                        {
                            Id = new Guid("38ffc5ba-e11c-40c2-9d19-b3b010624096"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            TextContentId = new Guid("4499d1fb-67df-4303-979f-86c0deaccc92")
                        },
                        new
                        {
                            Id = new Guid("fc266a3d-17fc-4eb5-9610-7bcbbe4c93b3"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            TextContentId = new Guid("110c6e39-3161-43e4-b925-b772591f295f")
                        },
                        new
                        {
                            Id = new Guid("4bee9cc0-754a-46b7-b379-fd2c3362d6b1"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            TextContentId = new Guid("e400e388-734e-4601-9815-97101be04a4c")
                        },
                        new
                        {
                            Id = new Guid("a50da626-4708-471f-b9f5-3c75d2fe6f34"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            TextContentId = new Guid("e17727b8-4a3c-4579-a433-a3da1a767dae")
                        },
                        new
                        {
                            Id = new Guid("b7f0d385-4748-4624-bdeb-59c080abea01"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            TextContentId = new Guid("776b7cfd-cdf3-4de7-95e1-5481b82f87c5")
                        },
                        new
                        {
                            Id = new Guid("fb9ca355-ffbf-4161-b47d-84506caefecc"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            TextContentId = new Guid("91ad4b71-77f0-4d31-9a78-830a87b1ea2a")
                        },
                        new
                        {
                            Id = new Guid("804a2c7d-5fbb-45b2-bb7e-04b9f2846b52"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            TextContentId = new Guid("ddec2990-508c-4c8a-b946-fecf393ee8f8")
                        },
                        new
                        {
                            Id = new Guid("6851e00e-d1fd-4b82-9e57-9411159c7534"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            TextContentId = new Guid("a307d237-5bad-45fd-9296-8abc75b52f68")
                        },
                        new
                        {
                            Id = new Guid("8139e54a-0549-4edc-b1ee-56fd6295b37a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            TextContentId = new Guid("36fb6112-ef36-47b7-b80e-05b8f95b6e06")
                        },
                        new
                        {
                            Id = new Guid("48e9f890-3fe9-494a-9d5e-ce1a0054b789"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            TextContentId = new Guid("e495d620-754a-48ba-b43f-c6b0a4aa6206")
                        },
                        new
                        {
                            Id = new Guid("eab99a2a-cdc7-4cec-a8b1-051293cf38ae"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            TextContentId = new Guid("778f08d3-4666-4996-afc7-9dfad264b4bf")
                        },
                        new
                        {
                            Id = new Guid("d1414002-ccaf-49e5-9056-8c9922af6f5a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            TextContentId = new Guid("e75544f4-060a-40a2-8a49-d098a2c2786a")
                        },
                        new
                        {
                            Id = new Guid("09a62bc3-d78a-4c31-98e4-db971a6567b9"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            TextContentId = new Guid("8f212538-c189-49dd-bec4-dada8b8359cc")
                        },
                        new
                        {
                            Id = new Guid("6f66f472-c3dd-4c4d-b3e5-d12fc03645b7"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            TextContentId = new Guid("a459fa13-14ff-4c03-9fcf-d44a44b80514")
                        },
                        new
                        {
                            Id = new Guid("61c344a3-3988-420b-ba71-559417545505"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            TextContentId = new Guid("a6a3b953-8503-4d24-b7a3-6e4a852ecc32")
                        },
                        new
                        {
                            Id = new Guid("c540a828-30a2-44dc-94a1-24843a6a10bd"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            TextContentId = new Guid("8e11ee0f-3b5f-4865-9082-fd6585b68198")
                        },
                        new
                        {
                            Id = new Guid("05d51509-29b2-4852-9774-08f5611ebd41"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            TextContentId = new Guid("a67cad49-67bb-4445-85e7-fec9e63745fb")
                        },
                        new
                        {
                            Id = new Guid("f7c1e3c6-7558-4bcb-84a5-a8184420e482"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            TextContentId = new Guid("72425863-70b5-46d2-9bf5-2c53be96e0cd")
                        },
                        new
                        {
                            Id = new Guid("f51afbb7-a1f9-4471-a314-4e2d53679608"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            TextContentId = new Guid("e92d1be6-a811-48a7-bfba-0486af76883f")
                        },
                        new
                        {
                            Id = new Guid("b84ef488-a2d4-4666-b8a5-120c56cf7c32"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            TextContentId = new Guid("f6c54c79-55f8-4128-ab97-b5651d42cd52")
                        },
                        new
                        {
                            Id = new Guid("ed5b2655-c494-4ab2-96d3-b42ab0220f85"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            TextContentId = new Guid("83e15c73-228b-4e4d-ae39-6305baea650a")
                        },
                        new
                        {
                            Id = new Guid("e1366b0c-4b35-42f8-92ff-db2b37df330a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            TextContentId = new Guid("04cf4cc3-73a7-4d52-b9f7-08ae1ed9c55e")
                        },
                        new
                        {
                            Id = new Guid("8faff68c-45bc-41ae-82d8-eed46737affc"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            TextContentId = new Guid("9dcf4231-69c5-4e6f-ab31-d29ee357fde6")
                        },
                        new
                        {
                            Id = new Guid("727caafa-b7d0-421a-ad44-8c8772cca5be"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            TextContentId = new Guid("4eba2fb5-76a0-4628-bf8e-f7efe5db16dc")
                        },
                        new
                        {
                            Id = new Guid("965fadfd-6d47-4275-bc17-3b9156931a39"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            TextContentId = new Guid("96014115-8ada-40e3-8f5b-af3b155b15c9")
                        },
                        new
                        {
                            Id = new Guid("4a84e4a3-4513-4f4d-ac4b-c5dc4ee5eb2f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            TextContentId = new Guid("e07304e1-7a45-429a-bdac-c33e9bc7b8c1")
                        },
                        new
                        {
                            Id = new Guid("ab3af701-221d-4f2a-9336-5b7c9f7838ce"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            TextContentId = new Guid("4b78707f-ddd1-4993-9051-5888516fbf7b")
                        },
                        new
                        {
                            Id = new Guid("491987f3-fe1a-41d3-a9bb-fd806534832d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            TextContentId = new Guid("e8773e10-5267-40db-9b1c-bfda1a14c434")
                        },
                        new
                        {
                            Id = new Guid("05059759-6cbf-440d-bf5c-1d4be70c99e4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            TextContentId = new Guid("e15a9f23-3538-41d8-bc6c-699f148312cc")
                        },
                        new
                        {
                            Id = new Guid("6a1085a4-36f6-40db-997b-bdca3dcc3ac3"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            TextContentId = new Guid("288d79b0-1e52-4024-b03b-8e1da70dff1a")
                        },
                        new
                        {
                            Id = new Guid("2659ca17-785e-43ba-97be-dd431c239b49"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            TextContentId = new Guid("73066766-96c0-40ed-8571-bece989dd87f")
                        },
                        new
                        {
                            Id = new Guid("10c6f61e-f3ce-4792-8fc7-ab14023699e3"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            TextContentId = new Guid("1cb56608-133c-4815-8a54-d54dbd3a1e48")
                        },
                        new
                        {
                            Id = new Guid("cd641ebd-bffa-466e-98af-85ff41ba48a7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            TextContentId = new Guid("870735da-e5ce-427e-9326-d97e00e2598a")
                        },
                        new
                        {
                            Id = new Guid("905cc869-a247-48dd-b2a2-1b40af6edfc7"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            TextContentId = new Guid("70acada8-3109-478f-87c0-34827f3348c3")
                        },
                        new
                        {
                            Id = new Guid("01c4fa70-b9e5-4d7b-820f-f1a39e5bdcc0"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            TextContentId = new Guid("22159b2d-ab10-4ab4-af80-3705a51b3765")
                        },
                        new
                        {
                            Id = new Guid("6765a19e-b2f1-40d2-ac21-2c1446d6f9d6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            TextContentId = new Guid("d65d1575-dee5-4e9d-97cc-67c8c02f8570")
                        },
                        new
                        {
                            Id = new Guid("c8b30acc-2932-48a7-b4cd-a06daf8955fa"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            TextContentId = new Guid("17860002-e87e-4781-bc65-5f89b42feb4f")
                        },
                        new
                        {
                            Id = new Guid("5f6517c1-7966-4a16-a2ef-2bd0b74b016c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            TextContentId = new Guid("1bfdcfcf-a547-464e-b591-462c572a70d7")
                        },
                        new
                        {
                            Id = new Guid("94e3072f-5df1-472c-9365-b15260dd3c14"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            TextContentId = new Guid("dd669d09-afdd-4686-aac9-ff5330490a63")
                        },
                        new
                        {
                            Id = new Guid("b1ddd7c0-d721-4ca6-b40d-07a175710566"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            TextContentId = new Guid("fc9ae3ea-9db0-4496-8005-9b5db32b0257")
                        },
                        new
                        {
                            Id = new Guid("e0639634-6577-4066-9da7-38701dc7a142"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            TextContentId = new Guid("3c185e80-892e-4a6d-89b8-937fba5c9253")
                        },
                        new
                        {
                            Id = new Guid("324ec06c-ee7e-4beb-bbac-179b68db1ef9"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            TextContentId = new Guid("feb0c99c-6c14-47db-bcfe-edf00ce99eee")
                        },
                        new
                        {
                            Id = new Guid("94c75196-fd4b-4b0d-82ad-099c3b32144c"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            TextContentId = new Guid("3d3744bd-1c44-4d6f-9125-88811fee9db2")
                        },
                        new
                        {
                            Id = new Guid("e0281373-4a8f-4588-83b9-bb7a005f17b4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            TextContentId = new Guid("ce0f428d-2839-4e38-ac8e-4b47cf70d5ae")
                        },
                        new
                        {
                            Id = new Guid("f7ab98ef-ef8a-451d-94f6-2e55a1dead42"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            TextContentId = new Guid("a31dbd82-c99d-4754-9045-8fa049c49bf1")
                        },
                        new
                        {
                            Id = new Guid("da24fd4b-82ed-4b78-8b24-74ce461f27f4"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            TextContentId = new Guid("e62321de-51d3-4473-b08e-058ae045e32b")
                        },
                        new
                        {
                            Id = new Guid("23b12046-7f29-48c2-a013-3ab342b2fa83"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            TextContentId = new Guid("19fcbc9d-9766-467b-9885-67db54a7b3a6")
                        },
                        new
                        {
                            Id = new Guid("a4c80daa-bf3e-4c15-9bfd-70da70f885f7"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            TextContentId = new Guid("ac600666-6007-406f-96c1-a4035aead50c")
                        },
                        new
                        {
                            Id = new Guid("4e92f19e-48f9-4bc5-bed0-922d09032ddc"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            TextContentId = new Guid("c1a28ac1-1ee3-4240-913f-fee8fa5b073b")
                        },
                        new
                        {
                            Id = new Guid("229f805d-88ce-47d9-8d43-cd445e8e21c2"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            TextContentId = new Guid("d1225a70-89cc-4c96-92b5-127b0d912f9d")
                        },
                        new
                        {
                            Id = new Guid("5324f97a-73c7-43b8-8d3c-cb26794634f6"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            TextContentId = new Guid("f132741f-e052-4e45-90b4-9e870067ac37")
                        },
                        new
                        {
                            Id = new Guid("1e608602-97ff-4b4f-b4f0-74cf1f5a714a"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            TextContentId = new Guid("0a685736-a839-4d82-9391-6c8d82df1584")
                        },
                        new
                        {
                            Id = new Guid("163ff33d-51f8-4f5f-a2fd-c0f62f0f0208"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            TextContentId = new Guid("27fe0bd2-5650-4b19-8b4b-082e49c6f51a")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamModel")
                        .HasColumnType("integer")
                        .HasColumnName("exam_model");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 37, DateTimeKind.Local).AddTicks(7170),
                            ExamModel = 0,
                            ExamNumber = 1,
                            ExamType = 0,
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 37, DateTimeKind.Local).AddTicks(7183)
                        },
                        new
                        {
                            Id = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(507),
                            ExamModel = 1,
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(508)
                        },
                        new
                        {
                            Id = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(526),
                            ExamModel = 1,
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(527)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("SupportingTextId")
                        .HasColumnType("uuid")
                        .HasColumnName("supporting_text_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.HasIndex("SupportingTextId")
                        .HasDatabaseName("ix_question_supporting_text_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b8215a-64cf-4a1a-bd36-6026af2a36e6"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(3703),
                            EnunciatedId = new Guid("3e7cd940-932e-4652-80a7-ddb71ffda765"),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            Index = 0,
                            SubjectId = new Guid("ff93b51f-d8d3-46fc-b262-f3645f533844"),
                            SupportingTextId = new Guid("93539b60-04a5-45fb-8876-77eff86e6b89"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(3710)
                        },
                        new
                        {
                            Id = new Guid("d67b339e-9d12-43af-a1fa-abf57e564fcd"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6407),
                            EnunciatedId = new Guid("7d3601d9-68dd-4e94-9be3-72c7a92664d2"),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            Index = 1,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("4e1a1989-e73d-4dd1-b1c2-982cd9157f1a"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6412)
                        },
                        new
                        {
                            Id = new Guid("6fd8ada8-0914-4016-9521-81c59cf382c9"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6427),
                            EnunciatedId = new Guid("3b50ebde-8e58-46ea-aa11-826a057054d8"),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            Index = 2,
                            SubjectId = new Guid("1cdd1b5a-aab1-42e3-82cc-9ef176153ea8"),
                            SupportingTextId = new Guid("a4da5405-f2cd-4a77-91bf-8eaa07230fe9"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6428)
                        },
                        new
                        {
                            Id = new Guid("73b5a077-e4e0-40a7-bd1f-2d19435de6cd"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6442),
                            EnunciatedId = new Guid("51af59ff-76c8-42fd-8776-e8a0692e4178"),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            Index = 3,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("4e1a1989-e73d-4dd1-b1c2-982cd9157f1a"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6443)
                        },
                        new
                        {
                            Id = new Guid("9e46a49d-b83b-453c-a32d-37872f438240"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6456),
                            EnunciatedId = new Guid("d003124e-de3a-4c25-b00d-47d2542de017"),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            Index = 4,
                            SubjectId = new Guid("87062c22-b7e9-4790-af16-f072f8100e8a"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6457)
                        },
                        new
                        {
                            Id = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6474),
                            EnunciatedId = new Guid("680b05c8-d55e-4158-aa2c-5a3e30b57738"),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            Index = 0,
                            SubjectId = new Guid("ff93b51f-d8d3-46fc-b262-f3645f533844"),
                            SupportingTextId = new Guid("5028f1ab-0db6-4be3-888b-b217941cd7cf"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6474)
                        },
                        new
                        {
                            Id = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6489),
                            EnunciatedId = new Guid("212b160c-11db-4216-9345-1551ce093568"),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            Index = 1,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("d49f7c2d-78da-485c-9e92-59679df68426"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6490)
                        },
                        new
                        {
                            Id = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6598),
                            EnunciatedId = new Guid("d93f896a-5467-4bc1-b8e5-f53600fc027d"),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            Index = 2,
                            SubjectId = new Guid("1cdd1b5a-aab1-42e3-82cc-9ef176153ea8"),
                            SupportingTextId = new Guid("adcac88f-c4a3-4807-b17f-768fa55725a9"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6599)
                        },
                        new
                        {
                            Id = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6612),
                            EnunciatedId = new Guid("67fbcd77-5161-490c-8b57-6bdbf0d74f21"),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            Index = 3,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("d49f7c2d-78da-485c-9e92-59679df68426"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6613)
                        },
                        new
                        {
                            Id = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6626),
                            EnunciatedId = new Guid("47e53280-0e26-4c20-891f-0e1cdb39c642"),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            Index = 4,
                            SubjectId = new Guid("87062c22-b7e9-4790-af16-f072f8100e8a"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6627)
                        },
                        new
                        {
                            Id = new Guid("60b0f2c4-2964-4bc5-a406-d27e229ffd35"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6642),
                            EnunciatedId = new Guid("54bbd42e-4669-413c-9aaa-76dafd4ec400"),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            Index = 0,
                            SubjectId = new Guid("ff93b51f-d8d3-46fc-b262-f3645f533844"),
                            SupportingTextId = new Guid("03660d32-aa5d-4f66-8e0f-9be692d510b1"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6643)
                        },
                        new
                        {
                            Id = new Guid("dee9b2d2-60c3-4017-9701-6d096567a343"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6657),
                            EnunciatedId = new Guid("cc794069-6ba9-4d1a-b5cf-b432b872c169"),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            Index = 1,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("03660d32-aa5d-4f66-8e0f-9be692d510b1"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6658)
                        },
                        new
                        {
                            Id = new Guid("73f8e4aa-43c5-434c-beb4-037f0b36f72e"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6670),
                            EnunciatedId = new Guid("4b6115cf-55eb-4842-8c09-e4f6059fd3d5"),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            Index = 2,
                            SubjectId = new Guid("1cdd1b5a-aab1-42e3-82cc-9ef176153ea8"),
                            SupportingTextId = new Guid("03660d32-aa5d-4f66-8e0f-9be692d510b1"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6671)
                        },
                        new
                        {
                            Id = new Guid("adadc8ed-c917-4bed-bdbf-d2b8bc706e94"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6718),
                            EnunciatedId = new Guid("b79e22a9-5f43-40b3-b0e5-35e296c353ad"),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            Index = 3,
                            SubjectId = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            SupportingTextId = new Guid("03660d32-aa5d-4f66-8e0f-9be692d510b1"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6719)
                        },
                        new
                        {
                            Id = new Guid("78403676-8950-4996-b797-9b3e08f7bd62"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6733),
                            EnunciatedId = new Guid("b57ec43f-e96d-48b2-afe9-a30046e4b1e3"),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            Index = 4,
                            SubjectId = new Guid("87062c22-b7e9-4790-af16-f072f8100e8a"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 28, DateTimeKind.Local).AddTicks(6734)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d168679-09dd-4bb4-a105-1074e964de8d"),
                            ChosenAlternativeId = new Guid("a50da626-4708-471f-b9f5-3c75d2fe6f34"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(6056),
                            QuestionId = new Guid("3f924aae-1e9b-46c5-8859-555a68b11b8c"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(6076),
                            UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0")
                        },
                        new
                        {
                            Id = new Guid("df5f7090-b66a-42f1-bd4e-9489e44c71eb"),
                            ChosenAlternativeId = new Guid("8139e54a-0549-4edc-b1ee-56fd6295b37a"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7455),
                            QuestionId = new Guid("f1702913-e338-413a-9486-1120d1a5512b"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7460),
                            UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0")
                        },
                        new
                        {
                            Id = new Guid("c4b2ccb5-2900-44ab-a7c9-b6873a5f4f82"),
                            ChosenAlternativeId = new Guid("6f66f472-c3dd-4c4d-b3e5-d12fc03645b7"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7465),
                            QuestionId = new Guid("cf5920b0-68d4-4165-9069-35c6544babc9"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7466),
                            UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0")
                        },
                        new
                        {
                            Id = new Guid("e356307b-14b2-40bc-ac2c-029bb7392809"),
                            ChosenAlternativeId = new Guid("f51afbb7-a1f9-4471-a314-4e2d53679608"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7469),
                            QuestionId = new Guid("42ab70fa-61bf-42b3-8464-90f699cd46ed"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7469),
                            UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0")
                        },
                        new
                        {
                            Id = new Guid("fac37d2c-bb7f-4bc9-9f37-51090caebe1e"),
                            ChosenAlternativeId = new Guid("727caafa-b7d0-421a-ad44-8c8772cca5be"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7481),
                            QuestionId = new Guid("e7aa5548-6876-42aa-a314-b9a74efeb14f"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 45, DateTimeKind.Local).AddTicks(7482),
                            UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff93b51f-d8d3-46fc-b262-f3645f533844"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(783),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(1252)
                        },
                        new
                        {
                            Id = new Guid("1cdd1b5a-aab1-42e3-82cc-9ef176153ea8"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2057),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2061)
                        },
                        new
                        {
                            Id = new Guid("9607414d-2978-4313-899c-9cb44bdb3411"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2063),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("ff93b51f-d8d3-46fc-b262-f3645f533844"),
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2064)
                        },
                        new
                        {
                            Id = new Guid("87062c22-b7e9-4790-af16-f072f8100e8a"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2066),
                            Name = "Polinômios",
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 27, DateTimeKind.Local).AddTicks(2067)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.HasKey("Id")
                        .HasName("pk_supporting_text");

                    b.HasIndex("ContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_supporting_text_content_id");

                    b.ToTable("supporting_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93539b60-04a5-45fb-8876-77eff86e6b89"),
                            ContentId = new Guid("98841233-928d-451b-b841-c63558828b29")
                        },
                        new
                        {
                            Id = new Guid("a4da5405-f2cd-4a77-91bf-8eaa07230fe9"),
                            ContentId = new Guid("edfa9c3c-c485-40bb-a36b-8bcdd798fba1")
                        },
                        new
                        {
                            Id = new Guid("4e1a1989-e73d-4dd1-b1c2-982cd9157f1a"),
                            ContentId = new Guid("6ed4db40-c37f-4abb-821f-81fd3b443a84")
                        },
                        new
                        {
                            Id = new Guid("5028f1ab-0db6-4be3-888b-b217941cd7cf"),
                            ContentId = new Guid("3d04b301-6b78-439b-9155-49b6cd96d2a0")
                        },
                        new
                        {
                            Id = new Guid("adcac88f-c4a3-4807-b17f-768fa55725a9"),
                            ContentId = new Guid("4d25139d-2347-4303-b0c9-62dbfb854856")
                        },
                        new
                        {
                            Id = new Guid("d49f7c2d-78da-485c-9e92-59679df68426"),
                            ContentId = new Guid("13a1cc6f-7ff9-4dbd-907c-2a68df2081a8")
                        },
                        new
                        {
                            Id = new Guid("6620d680-0a9c-4139-89a2-7d9f6b5167d5"),
                            ContentId = new Guid("43feca9b-152b-49a1-9e1c-a7119171e889")
                        },
                        new
                        {
                            Id = new Guid("2d6689a1-b06f-4ccd-b2c9-1b47e0fd9c2d"),
                            ContentId = new Guid("1a0ce7e8-b936-445f-a5a7-795c325af97e")
                        },
                        new
                        {
                            Id = new Guid("03660d32-aa5d-4f66-8e0f-9be692d510b1"),
                            ContentId = new Guid("cb36144d-ec12-4359-88a8-202dd79af0b2")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99700915-c89f-44a0-a7ab-4a54b1273937"),
                            CloseDate = new DateTime(2021, 5, 31, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            OpenDate = new DateTime(2021, 5, 31, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("fe66a1e2-a4f1-416a-a73e-b6fff32a49ad"),
                            CloseDate = new DateTime(2021, 6, 1, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("3fd8b2ce-0a21-4ed0-80a0-169425502d1a"),
                            OpenDate = new DateTime(2021, 6, 1, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("f03f9f43-49d1-4de7-a405-3b09c632ce5a"),
                            CloseDate = new DateTime(2021, 5, 27, 7, 49, 59, 38, DateTimeKind.Local).AddTicks(465),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            OpenDate = new DateTime(2021, 5, 27, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(465)
                        },
                        new
                        {
                            Id = new Guid("aa3a9218-d849-4cf5-9ef0-b1b2f3fc7892"),
                            CloseDate = new DateTime(2021, 5, 28, 5, 49, 59, 38, DateTimeKind.Local).AddTicks(465),
                            ExamId = new Guid("d62d3f84-81e5-4137-8f81-6d61b1885ce3"),
                            OpenDate = new DateTime(2021, 5, 28, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(465)
                        },
                        new
                        {
                            Id = new Guid("c3e27985-8ce3-4734-8576-ad2dc542cf2c"),
                            CloseDate = new DateTime(2021, 5, 25, 5, 49, 59, 38, DateTimeKind.Local).AddTicks(511),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            OpenDate = new DateTime(2021, 5, 25, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(511)
                        },
                        new
                        {
                            Id = new Guid("58d55e42-cee8-456c-9b6e-1ccf894b6e00"),
                            CloseDate = new DateTime(2021, 5, 26, 5, 49, 59, 38, DateTimeKind.Local).AddTicks(511),
                            ExamId = new Guid("256459eb-f100-45f5-adfb-f14791892e4b"),
                            OpenDate = new DateTime(2021, 5, 26, 3, 49, 59, 38, DateTimeKind.Local).AddTicks(511)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e7cd940-932e-4652-80a7-ddb71ffda765"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("7d3601d9-68dd-4e94-9be3-72c7a92664d2"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3b50ebde-8e58-46ea-aa11-826a057054d8"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("51af59ff-76c8-42fd-8776-e8a0692e4178"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d003124e-de3a-4c25-b00d-47d2542de017"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("680b05c8-d55e-4158-aa2c-5a3e30b57738"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("212b160c-11db-4216-9345-1551ce093568"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("d93f896a-5467-4bc1-b8e5-f53600fc027d"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("67fbcd77-5161-490c-8b57-6bdbf0d74f21"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("47e53280-0e26-4c20-891f-0e1cdb39c642"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("54bbd42e-4669-413c-9aaa-76dafd4ec400"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("cc794069-6ba9-4d1a-b5cf-b432b872c169"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("4b6115cf-55eb-4842-8c09-e4f6059fd3d5"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("b79e22a9-5f43-40b3-b0e5-35e296c353ad"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("b57ec43f-e96d-48b2-afe9-a30046e4b1e3"),
                            Content = "Enunciado teste com equacao {0} e imagem:  \r\n{1}\r\n  para teste",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("00e4d373-17c8-4bf6-b186-7209b824ceea"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("2f517b3f-a7e3-4e1a-b5f5-847289ad6211"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("5edcd1d0-7e03-4cff-bf6f-72b3f24ef556"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("35e34ef0-f1fc-4aee-8a76-977d5d22a679"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("b66750ae-2aa2-4ebc-9bfe-47aa51ae838f"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("2ba78eff-a236-466c-8db0-52f94b25e7ff"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("3019402e-63e3-4e8b-b963-972fa7efb819"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("6cbf4a53-16c7-4b51-a6b2-ec44f8fe795a"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("a7b02bd6-5b49-4653-b2c0-128782e0e42f"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("b8e58122-a4b0-40fe-9de4-e5d4aadaa1be"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("9eb48429-40a8-4f64-bca5-d2612f54916b"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("39ee66d8-4bb8-4db6-82e3-845c10748667"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("8b24ddb4-60a2-4139-a722-326a436e37e5"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("b950ba5e-7022-413e-96d6-19acad46a94f"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("46da08c2-82ba-4ae6-b917-670d421dce8e"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("74d94fcd-e6ae-4895-9d2e-921fdbe62802"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("f3bde3d4-c8b1-495b-988a-873502e4a4bf"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("74929738-284a-4740-a7d8-40383caf76eb"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("f84f2d68-311e-4899-ba5b-fca7516bfd10"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("dcdc55d8-ffa5-4172-b429-d8877e34a91b"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("d7edc34b-7fa4-4b9e-8b4b-7cf38f74e8c9"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("fb3741fe-0638-470c-b2f1-f95e7b031eb6"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("4499d1fb-67df-4303-979f-86c0deaccc92"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("110c6e39-3161-43e4-b925-b772591f295f"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("e400e388-734e-4601-9815-97101be04a4c"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("e17727b8-4a3c-4579-a433-a3da1a767dae"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("776b7cfd-cdf3-4de7-95e1-5481b82f87c5"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("91ad4b71-77f0-4d31-9a78-830a87b1ea2a"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("ddec2990-508c-4c8a-b946-fecf393ee8f8"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("a307d237-5bad-45fd-9296-8abc75b52f68"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("36fb6112-ef36-47b7-b80e-05b8f95b6e06"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("e495d620-754a-48ba-b43f-c6b0a4aa6206"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("778f08d3-4666-4996-afc7-9dfad264b4bf"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("e75544f4-060a-40a2-8a49-d098a2c2786a"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("8f212538-c189-49dd-bec4-dada8b8359cc"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("a459fa13-14ff-4c03-9fcf-d44a44b80514"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("a6a3b953-8503-4d24-b7a3-6e4a852ecc32"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("8e11ee0f-3b5f-4865-9082-fd6585b68198"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("a67cad49-67bb-4445-85e7-fec9e63745fb"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("72425863-70b5-46d2-9bf5-2c53be96e0cd"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("e92d1be6-a811-48a7-bfba-0486af76883f"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("f6c54c79-55f8-4128-ab97-b5651d42cd52"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("83e15c73-228b-4e4d-ae39-6305baea650a"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("04cf4cc3-73a7-4d52-b9f7-08ae1ed9c55e"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("9dcf4231-69c5-4e6f-ab31-d29ee357fde6"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("4eba2fb5-76a0-4628-bf8e-f7efe5db16dc"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("96014115-8ada-40e3-8f5b-af3b155b15c9"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("e07304e1-7a45-429a-bdac-c33e9bc7b8c1"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("4b78707f-ddd1-4993-9051-5888516fbf7b"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("e8773e10-5267-40db-9b1c-bfda1a14c434"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("e15a9f23-3538-41d8-bc6c-699f148312cc"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("288d79b0-1e52-4024-b03b-8e1da70dff1a"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("73066766-96c0-40ed-8571-bece989dd87f"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("1cb56608-133c-4815-8a54-d54dbd3a1e48"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("870735da-e5ce-427e-9326-d97e00e2598a"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("70acada8-3109-478f-87c0-34827f3348c3"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("22159b2d-ab10-4ab4-af80-3705a51b3765"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("d65d1575-dee5-4e9d-97cc-67c8c02f8570"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("17860002-e87e-4781-bc65-5f89b42feb4f"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("1bfdcfcf-a547-464e-b591-462c572a70d7"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("dd669d09-afdd-4686-aac9-ff5330490a63"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("fc9ae3ea-9db0-4496-8005-9b5db32b0257"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("3c185e80-892e-4a6d-89b8-937fba5c9253"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("feb0c99c-6c14-47db-bcfe-edf00ce99eee"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("3d3744bd-1c44-4d6f-9125-88811fee9db2"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("ce0f428d-2839-4e38-ac8e-4b47cf70d5ae"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("a31dbd82-c99d-4754-9045-8fa049c49bf1"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("e62321de-51d3-4473-b08e-058ae045e32b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("19fcbc9d-9766-467b-9885-67db54a7b3a6"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("ac600666-6007-406f-96c1-a4035aead50c"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c1a28ac1-1ee3-4240-913f-fee8fa5b073b"),
                            Content = "Teste"
                        },
                        new
                        {
                            Id = new Guid("d1225a70-89cc-4c96-92b5-127b0d912f9d"),
                            Content = "Testeee2"
                        },
                        new
                        {
                            Id = new Guid("f132741f-e052-4e45-90b4-9e870067ac37"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("0a685736-a839-4d82-9391-6c8d82df1584"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("27fe0bd2-5650-4b19-8b4b-082e49c6f51a"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("98841233-928d-451b-b841-c63558828b29"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3d04b301-6b78-439b-9155-49b6cd96d2a0"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("43feca9b-152b-49a1-9e1c-a7119171e889"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("edfa9c3c-c485-40bb-a36b-8bcdd798fba1"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("4d25139d-2347-4303-b0c9-62dbfb854856"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("1a0ce7e8-b936-445f-a5a7-795c325af97e"),
                            Content = "TEXTO DE APOIO DE PORTUGUES COM IMAGEM \r\n {0}",
                            Increments = "[{\"Index\":0,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1}]"
                        },
                        new
                        {
                            Id = new Guid("6ed4db40-c37f-4abb-821f-81fd3b443a84"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("13a1cc6f-7ff9-4dbd-907c-2a68df2081a8"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        },
                        new
                        {
                            Id = new Guid("cb36144d-ec12-4359-88a8-202dd79af0b2"),
                            Content = "TEXTO DE APOIO SIMPLES SEM INCREMENTO"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CognitoUserId")
                        .HasDatabaseName("ix_user_cognito_user_id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = new Guid("6e32ca6c-2a66-4ea6-a0c4-cf655dab5191"),
                            CreatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 36, DateTimeKind.Local).AddTicks(8593),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 27, 3, 49, 59, 36, DateTimeKind.Local).AddTicks(8608)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "SupportingText")
                        .WithMany("Questions")
                        .HasForeignKey("SupportingTextId")
                        .HasConstraintName("fk_question_supporting_text_supporting_text_id");

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Content")
                        .WithOne("SupportingText")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.SupportingText", "ContentId")
                        .HasConstraintName("fk_supporting_text_incremented_texts_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("address.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("char(7)")
                                .HasColumnName("address.number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("address.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("25d00f38-8f06-4b0c-aec3-9f8fc6f39cd0"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.SupportingText", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");

                    b.Navigation("SupportingText");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
