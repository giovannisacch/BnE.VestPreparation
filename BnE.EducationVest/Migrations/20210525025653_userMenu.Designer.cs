// <auto-generated />
using System;
using BnE.EducationVest.Infra.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BnE.EducationVest.API.Migrations
{
    [DbContext(typeof(EducationVestContext))]
    [Migration("20210525025653_userMenu")]
    partial class userMenu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TextContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("text_content_id");

                    b.HasKey("Id")
                        .HasName("pk_alternative");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_alternative_question_id");

                    b.HasIndex("TextContentId")
                        .IsUnique()
                        .HasDatabaseName("ix_alternative_text_content_id");

                    b.ToTable("alternative");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7597b89-bfdf-49db-9061-d5d58a2071d4"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            TextContentId = new Guid("1b2af05d-accf-4d85-be35-13e6e2394023")
                        },
                        new
                        {
                            Id = new Guid("e7f0f68c-75b2-437d-988f-c8961eb9b1b1"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            TextContentId = new Guid("c2c8c696-d441-4968-a68a-13802159fac5")
                        },
                        new
                        {
                            Id = new Guid("173b71ff-2989-4ede-87ac-c6be716f7954"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            TextContentId = new Guid("cf611d53-b8e8-46a3-b0ed-1f2a4a40850e")
                        },
                        new
                        {
                            Id = new Guid("92706258-96ff-4b11-bf37-e62d631825b2"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            TextContentId = new Guid("3301d4a2-d744-43a5-8410-c62d73a09814")
                        },
                        new
                        {
                            Id = new Guid("87fb54ee-a9e9-47e7-a2a6-6089c978ba85"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            TextContentId = new Guid("ae8a4206-4ec3-4c61-b7b5-faa1b853c604")
                        },
                        new
                        {
                            Id = new Guid("91dc7f0a-8a78-4fbd-b605-7086726644ea"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            TextContentId = new Guid("71bee45d-0a88-4786-8372-4f0d8bfd6bf4")
                        },
                        new
                        {
                            Id = new Guid("8bdf2fff-c5de-4c38-8902-579178d33fd6"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            TextContentId = new Guid("466b438a-64a1-4d6f-9e33-613b4c925f33")
                        },
                        new
                        {
                            Id = new Guid("9fb88b39-539f-47bf-aec1-db56a28dbc87"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            TextContentId = new Guid("0ee3b7d7-eba9-4a58-bfad-56badd491f3d")
                        },
                        new
                        {
                            Id = new Guid("5ace7e13-d361-46c5-9cec-75551b6753fb"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            TextContentId = new Guid("ce83445d-7f38-41b2-8218-ac351049374d")
                        },
                        new
                        {
                            Id = new Guid("b2406b54-f437-45dc-8330-ba935cc1cec6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            TextContentId = new Guid("4d7b0037-5a2f-4f41-95a9-a6c8feffc5e5")
                        },
                        new
                        {
                            Id = new Guid("1f68cd1c-e33d-4851-89bf-20adc79854e0"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            TextContentId = new Guid("297fd70d-25c0-4c68-8e63-9df82253af7c")
                        },
                        new
                        {
                            Id = new Guid("0539991b-b098-47a2-88b7-b9b0f0b83a61"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            TextContentId = new Guid("d3bf8366-fc40-48e2-aea7-1d6448033b8c")
                        },
                        new
                        {
                            Id = new Guid("32d3ef8d-cd4f-4fac-815f-dc5429bd7b3f"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            TextContentId = new Guid("7b45700a-e0eb-400e-8cdf-4f56cf0c83b1")
                        },
                        new
                        {
                            Id = new Guid("afbd1925-7767-45f6-acec-97bd0576ac25"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            TextContentId = new Guid("e4e8e565-e3d3-4db5-85c4-aed278420700")
                        },
                        new
                        {
                            Id = new Guid("c058a061-5f62-4448-b2df-08132b24307f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            TextContentId = new Guid("4badf456-168c-43c4-9814-e34fea6b1c59")
                        },
                        new
                        {
                            Id = new Guid("5f325c98-691b-4dd1-9e2d-3f34511f939b"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            TextContentId = new Guid("16b272a5-4d0e-4002-8d1d-2029ad517502")
                        },
                        new
                        {
                            Id = new Guid("9483201f-edf4-4716-adc8-2fdafd1ea29d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            TextContentId = new Guid("3cceb4d9-1fa5-452f-a590-4a8d7d603395")
                        },
                        new
                        {
                            Id = new Guid("4d0e052e-d522-43b7-807b-cd0143d94050"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            TextContentId = new Guid("2c441075-322a-4ba1-bb9d-31b6ec6c529e")
                        },
                        new
                        {
                            Id = new Guid("bbf9ad76-b4a8-4330-b2af-af51277d463d"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            TextContentId = new Guid("e82bc162-0e6a-4066-b83a-71c9f9eea107")
                        },
                        new
                        {
                            Id = new Guid("077a6a40-16b8-4890-b05f-d2cb2d1f4c7a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            TextContentId = new Guid("5def801b-7107-42a2-ac9e-4417c9c112cd")
                        },
                        new
                        {
                            Id = new Guid("130b81c0-e2b6-4055-8373-a9153888fb2a"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            TextContentId = new Guid("c18aa528-c699-49d7-a90e-25d351606765")
                        },
                        new
                        {
                            Id = new Guid("5c654b6c-e4e4-4cd9-a1e3-648462961302"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            TextContentId = new Guid("a7ad7808-4702-48f4-af08-e2b2ffea8cc5")
                        },
                        new
                        {
                            Id = new Guid("ea9538d0-bb1c-4c35-b807-ad7fcd96493b"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            TextContentId = new Guid("9d2c026c-628f-4e1d-93c0-c1f481fa102b")
                        },
                        new
                        {
                            Id = new Guid("35d6af9c-ad17-4f7d-9b99-46990fab744e"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            TextContentId = new Guid("b6ba1f05-5a8f-49f1-b70e-4ee53d40dc91")
                        },
                        new
                        {
                            Id = new Guid("296704b6-8e39-4413-a298-f832a3034c9d"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            TextContentId = new Guid("7f3ca4b3-0bbc-4bf7-99c1-a8a4a66b6b4d")
                        },
                        new
                        {
                            Id = new Guid("73db7ec9-ad25-4ad7-a266-ac9b8defde89"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            TextContentId = new Guid("ca91b769-93b8-4254-b585-e1d8e43f7e11")
                        },
                        new
                        {
                            Id = new Guid("70886b83-7ec3-4d1e-9ca8-4fcd3ba206fc"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            TextContentId = new Guid("94be2b9f-f109-4316-ae10-bd4eefae3327")
                        },
                        new
                        {
                            Id = new Guid("bb5ca68c-82fc-4892-b55b-2566667ea0ab"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            TextContentId = new Guid("db094795-a99c-41d4-b554-9358d709982e")
                        },
                        new
                        {
                            Id = new Guid("2e805490-add3-4a25-8944-ce881219030f"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            TextContentId = new Guid("f2eb0350-5017-41a0-bdd6-139c420f9405")
                        },
                        new
                        {
                            Id = new Guid("e41d30df-b3f7-4900-9733-092b0650dabd"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            TextContentId = new Guid("2bf18ff0-ed0e-49a6-8aca-716865afcc05")
                        },
                        new
                        {
                            Id = new Guid("e8c3e74f-c9f7-4f31-8342-cd6597c1ceaa"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            TextContentId = new Guid("8e63ab04-d386-4d3e-a862-c7ccfd2fcaf1")
                        },
                        new
                        {
                            Id = new Guid("465b02e5-4e4c-49ed-9c28-c70fef764b73"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            TextContentId = new Guid("44523931-f841-44f0-9997-872ebbecfa71")
                        },
                        new
                        {
                            Id = new Guid("cd3ac8ff-8456-4efe-b28a-bb7b41c0c836"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            TextContentId = new Guid("19086ebc-7648-4bcd-abd1-4b714900cc55")
                        },
                        new
                        {
                            Id = new Guid("084b53b7-9898-4c57-99a8-359340141092"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            TextContentId = new Guid("c94fc709-d3fa-4d6c-ad10-66684e3c732b")
                        },
                        new
                        {
                            Id = new Guid("bbea8460-79fb-4f2c-9381-d41c2a682980"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            TextContentId = new Guid("12ae0c46-298e-45c8-b2fb-8d56d2dd58de")
                        },
                        new
                        {
                            Id = new Guid("fab388ec-c367-40d9-ada1-6e56bb77d778"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            TextContentId = new Guid("f631f2e2-d407-4bfa-a69b-3c1c5df5d566")
                        },
                        new
                        {
                            Id = new Guid("daf5c995-bb72-408b-9a05-dfbeb7c973a7"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            TextContentId = new Guid("26fbacf8-e542-4974-a233-482073b43bcb")
                        },
                        new
                        {
                            Id = new Guid("b258a185-2e15-4566-9c4f-6feb09b310dc"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            TextContentId = new Guid("296cb3a8-5a0d-4d4a-95ed-3f4b00012468")
                        },
                        new
                        {
                            Id = new Guid("6c0618c8-f291-4c4c-ab8d-b2d2de05e8c9"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            TextContentId = new Guid("a0c241a7-2873-47f3-a0f3-b60a387912f1")
                        },
                        new
                        {
                            Id = new Guid("3d2cdd52-6ea3-4344-9b2c-02044721690a"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            TextContentId = new Guid("9d2052e6-b70d-48d8-b9c6-66ecf52376ca")
                        },
                        new
                        {
                            Id = new Guid("a6271b3b-d284-42a7-a407-32cf845b0333"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            TextContentId = new Guid("c41201e7-608a-4e3a-bfd6-30f006b25aea")
                        },
                        new
                        {
                            Id = new Guid("c9d7d1bd-ceb8-45cd-aeb5-5e15ca68f7f4"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            TextContentId = new Guid("54b35ce2-eba6-4363-8e71-db558b143bce")
                        },
                        new
                        {
                            Id = new Guid("7bb2dad0-e603-4a17-8300-5dcc39a518b7"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            TextContentId = new Guid("98bef21c-59e1-47f8-bba2-82407ec5efd1")
                        },
                        new
                        {
                            Id = new Guid("14872e3d-81e5-4764-bd2a-c2e70b7a2ac6"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            TextContentId = new Guid("911e6247-2520-4778-965e-d414a7bcef26")
                        },
                        new
                        {
                            Id = new Guid("d1433b00-a03d-4603-b14f-447a04bb8aa6"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            TextContentId = new Guid("22e044e4-4dc3-4b8f-bf20-bc5c4d75ad9c")
                        },
                        new
                        {
                            Id = new Guid("1fecd995-98e4-4cf0-90dd-21c64e13ca81"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            TextContentId = new Guid("0a5f5b3b-27fb-403e-8fcc-bd1bc253442f")
                        },
                        new
                        {
                            Id = new Guid("57ffc53f-f47f-42c7-a291-dee7286d3b5d"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            TextContentId = new Guid("33c1b5c3-b956-4a29-a422-4ba1b73c391c")
                        },
                        new
                        {
                            Id = new Guid("7e96310d-5716-46c7-9e52-ca35e7ab62d5"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            TextContentId = new Guid("ba364874-3676-420e-9b14-4a18f327a08f")
                        },
                        new
                        {
                            Id = new Guid("e06d1b83-8cec-4176-9940-07c6366fa47d"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            TextContentId = new Guid("2903262d-cd9b-468f-81ad-bab7580c5516")
                        },
                        new
                        {
                            Id = new Guid("55dd1e2c-85dd-4f9e-824d-dc405b2be189"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            TextContentId = new Guid("41ba8114-a877-46b9-9393-c818122d05d3")
                        },
                        new
                        {
                            Id = new Guid("d8ed2c43-23a7-45af-bc21-f620b49c7801"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            TextContentId = new Guid("9a61287a-5389-4da5-8826-b4b97055977c")
                        },
                        new
                        {
                            Id = new Guid("ed41419f-9a18-41c1-bde4-05f9f4cc5df0"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            TextContentId = new Guid("7ac061e1-164c-49d4-b26b-0c59eac9be0b")
                        },
                        new
                        {
                            Id = new Guid("32d064f2-8fa3-4b53-b468-d30c0bf0772d"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            TextContentId = new Guid("076f1d4d-a585-4d3e-ab37-f4f8abc65b04")
                        },
                        new
                        {
                            Id = new Guid("b3e9bceb-30e2-4f7a-94d6-da61d7a4913b"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            TextContentId = new Guid("feecf326-8107-4f0c-9265-2d25978c7e62")
                        },
                        new
                        {
                            Id = new Guid("59dfb239-cefd-4b38-8041-60cf9ff52070"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            TextContentId = new Guid("b2e30d8c-8122-47b7-9981-428b6168fc08")
                        },
                        new
                        {
                            Id = new Guid("7ed7524e-0819-4d2c-abcd-8fc3985ba1e3"),
                            Index = 0,
                            IsCorrect = true,
                            QuestionId = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            TextContentId = new Guid("193be851-dc64-4bb6-a210-a9197b446f32")
                        },
                        new
                        {
                            Id = new Guid("b48a34c4-dd26-46d4-9dd9-1e6574c03003"),
                            Index = 1,
                            IsCorrect = false,
                            QuestionId = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            TextContentId = new Guid("cef28e1d-2068-4063-a7db-886a37d97e6d")
                        },
                        new
                        {
                            Id = new Guid("a6640a74-7fc3-4153-aa58-92f083ebca30"),
                            Index = 2,
                            IsCorrect = false,
                            QuestionId = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            TextContentId = new Guid("04619cc6-9b36-42d5-ae53-583ec4de569b")
                        },
                        new
                        {
                            Id = new Guid("0492fda5-7fde-4b14-aa26-62558db957bb"),
                            Index = 3,
                            IsCorrect = false,
                            QuestionId = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            TextContentId = new Guid("51ca8c18-ff6a-468a-b8a7-99c62ff9e00d")
                        },
                        new
                        {
                            Id = new Guid("193c778f-38b8-47a0-a337-de8d7c230e0f"),
                            Index = 4,
                            IsCorrect = false,
                            QuestionId = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            TextContentId = new Guid("2d23c669-99e5-459e-9ba7-ea4990f6f57c")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ExamNumber")
                        .HasColumnType("integer")
                        .HasColumnName("exam_number");

                    b.Property<int>("ExamType")
                        .HasColumnType("integer")
                        .HasColumnName("exam_type");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.ToTable("exam");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(5330),
                            ExamNumber = 1,
                            ExamType = 2,
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(5337)
                        },
                        new
                        {
                            Id = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9245),
                            ExamNumber = 1,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9246)
                        },
                        new
                        {
                            Id = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9258),
                            ExamNumber = 2,
                            ExamType = 1,
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9259)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("EnunciatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("enunciated_id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("EnunciatedId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_enunciated_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_question_exam_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_subject_id");

                    b.ToTable("question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e2a41e2-59ee-42e8-91d8-f7385f6d0acc"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(3053),
                            EnunciatedId = new Guid("4fcf931d-9cae-4b0f-951b-a07e7835ebdf"),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            Index = 0,
                            SubjectId = new Guid("8dc4809d-1f88-480c-bc52-8ae52216d500"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(3060)
                        },
                        new
                        {
                            Id = new Guid("de43bce7-86a1-4c1d-873d-32b520a15d9d"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6628),
                            EnunciatedId = new Guid("90394976-1b20-4af0-9ee1-069560766ce6"),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            Index = 1,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6633)
                        },
                        new
                        {
                            Id = new Guid("ff03a1a3-5960-46c0-b7b9-95fde717c94f"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6654),
                            EnunciatedId = new Guid("56251422-2349-4754-880a-9e5b1c916eed"),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            Index = 2,
                            SubjectId = new Guid("6b96a30f-989f-47ce-87e7-9eaf7f3232a9"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6655)
                        },
                        new
                        {
                            Id = new Guid("a9e6a43a-d579-42b9-bf7b-2af7447fe6dc"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6728),
                            EnunciatedId = new Guid("8dd0865a-a1ee-4a37-826c-dfdf9fa41cf4"),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            Index = 3,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6729)
                        },
                        new
                        {
                            Id = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6747),
                            EnunciatedId = new Guid("1f03b174-9273-4da4-9ebc-b6154f2bb8b8"),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            Index = 0,
                            SubjectId = new Guid("8dc4809d-1f88-480c-bc52-8ae52216d500"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6749)
                        },
                        new
                        {
                            Id = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6774),
                            EnunciatedId = new Guid("dd8b47b4-8bd5-4128-9edb-7fe38c1aa81f"),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            Index = 1,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6777)
                        },
                        new
                        {
                            Id = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6827),
                            EnunciatedId = new Guid("17969a4d-bc17-48fa-8854-c0319c1b5116"),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            Index = 2,
                            SubjectId = new Guid("6b96a30f-989f-47ce-87e7-9eaf7f3232a9"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6828)
                        },
                        new
                        {
                            Id = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6847),
                            EnunciatedId = new Guid("b3ebb548-ef65-4916-8993-91fc2af4cdbd"),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            Index = 3,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6848)
                        },
                        new
                        {
                            Id = new Guid("1310ba47-40b5-41eb-b6c5-2f13835906da"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6868),
                            EnunciatedId = new Guid("3258effd-0364-4453-8bfc-b4620ab531a6"),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            Index = 0,
                            SubjectId = new Guid("8dc4809d-1f88-480c-bc52-8ae52216d500"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6870)
                        },
                        new
                        {
                            Id = new Guid("5c1efdf8-e8cd-4188-9283-8fa0056758a9"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6888),
                            EnunciatedId = new Guid("132d2212-cd94-4530-8962-633519f86d11"),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            Index = 1,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6889)
                        },
                        new
                        {
                            Id = new Guid("a9037552-2b10-48e4-be9c-3e918efb4b4b"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6972),
                            EnunciatedId = new Guid("827e7081-c949-440c-aee3-2eea327f39f2"),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            Index = 2,
                            SubjectId = new Guid("6b96a30f-989f-47ce-87e7-9eaf7f3232a9"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6974)
                        },
                        new
                        {
                            Id = new Guid("f27e13e8-5eeb-46c4-8e70-c7237b137ee2"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6994),
                            EnunciatedId = new Guid("6139f725-5da4-45a5-b319-9fe858f62bbb"),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            Index = 3,
                            SubjectId = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 87, DateTimeKind.Local).AddTicks(6995)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChosenAlternativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("chosen_alternative_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("ChosenAlternativeId")
                        .HasDatabaseName("ix_question_answers_chosen_alternative_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_question_answers_user_id");

                    b.ToTable("question_answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21f6f87f-3606-4aa2-80bf-abdd09c183f6"),
                            ChosenAlternativeId = new Guid("130b81c0-e2b6-4055-8373-a9153888fb2a"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(363),
                            QuestionId = new Guid("4889d6f7-55bc-48de-a65c-3ca9579f3b73"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(375),
                            UserId = new Guid("54de6969-1c58-4435-8052-5675a574f0d7")
                        },
                        new
                        {
                            Id = new Guid("76d390e2-17af-421c-88d2-17bc3f7b8822"),
                            ChosenAlternativeId = new Guid("73db7ec9-ad25-4ad7-a266-ac9b8defde89"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1746),
                            QuestionId = new Guid("3cbe06e2-b430-4007-8c9e-ff26252688ed"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1750),
                            UserId = new Guid("54de6969-1c58-4435-8052-5675a574f0d7")
                        },
                        new
                        {
                            Id = new Guid("4a5e0fb0-e0aa-4234-aa79-fa909cc2f92d"),
                            ChosenAlternativeId = new Guid("e8c3e74f-c9f7-4f31-8342-cd6597c1ceaa"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1756),
                            QuestionId = new Guid("b6872bbe-a9a4-47c7-be0a-7b3913975133"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1756),
                            UserId = new Guid("54de6969-1c58-4435-8052-5675a574f0d7")
                        },
                        new
                        {
                            Id = new Guid("26c0d253-4d2a-4661-bc25-9f1dd492be56"),
                            ChosenAlternativeId = new Guid("fab388ec-c367-40d9-ada1-6e56bb77d778"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1759),
                            QuestionId = new Guid("4d213d6a-f501-489e-970e-9b2534500f81"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 105, DateTimeKind.Local).AddTicks(1760),
                            UserId = new Guid("54de6969-1c58-4435-8052-5675a574f0d7")
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<Guid?>("SubjectFatherId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_father_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.HasIndex("SubjectFatherId")
                        .HasDatabaseName("ix_subject_subject_father_id");

                    b.ToTable("subject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dc4809d-1f88-480c-bc52-8ae52216d500"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 85, DateTimeKind.Local).AddTicks(9195),
                            Name = "Matemática",
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 85, DateTimeKind.Local).AddTicks(9779)
                        },
                        new
                        {
                            Id = new Guid("6b96a30f-989f-47ce-87e7-9eaf7f3232a9"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 86, DateTimeKind.Local).AddTicks(811),
                            Name = "Português",
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 86, DateTimeKind.Local).AddTicks(816)
                        },
                        new
                        {
                            Id = new Guid("0741fdc6-8a3b-4939-9277-a996d6e4d67e"),
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 86, DateTimeKind.Local).AddTicks(819),
                            Name = "Porcentagem",
                            SubjectFatherId = new Guid("8dc4809d-1f88-480c-bc52-8ae52216d500"),
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 86, DateTimeKind.Local).AddTicks(820)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.HasKey("Id")
                        .HasName("pk_exam_period");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_period_exam_id");

                    b.ToTable("exam_period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ce8a066-04f0-49e0-a61c-3a36c137e938"),
                            CloseDate = new DateTime(2021, 5, 28, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            OpenDate = new DateTime(2021, 5, 28, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("8a0a0edf-c20f-486d-b2a5-ad99c5e55f31"),
                            CloseDate = new DateTime(2021, 5, 29, 12, 0, 0, 0, DateTimeKind.Local),
                            ExamId = new Guid("2db779c2-fe02-4b7c-a619-ae4674e787f1"),
                            OpenDate = new DateTime(2021, 5, 29, 10, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("f63f494d-12ce-4cab-8e22-ee59142deac7"),
                            CloseDate = new DateTime(2021, 5, 25, 3, 56, 53, 97, DateTimeKind.Local).AddTicks(9226),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            OpenDate = new DateTime(2021, 5, 24, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9226)
                        },
                        new
                        {
                            Id = new Guid("91bf0f34-9721-4e14-a175-e3f117c1372d"),
                            CloseDate = new DateTime(2021, 5, 26, 1, 56, 53, 97, DateTimeKind.Local).AddTicks(9226),
                            ExamId = new Guid("c8310b8f-d814-4fd7-ad41-9a7d48c1270b"),
                            OpenDate = new DateTime(2021, 5, 25, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9226)
                        },
                        new
                        {
                            Id = new Guid("16e22594-0e23-41b2-95f1-882118a095a5"),
                            CloseDate = new DateTime(2021, 5, 23, 1, 56, 53, 97, DateTimeKind.Local).AddTicks(9248),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            OpenDate = new DateTime(2021, 5, 22, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9248)
                        },
                        new
                        {
                            Id = new Guid("7d3edc05-8f4b-49c4-98bf-0eb9eb3b183d"),
                            CloseDate = new DateTime(2021, 5, 24, 1, 56, 53, 97, DateTimeKind.Local).AddTicks(9248),
                            ExamId = new Guid("5aa12456-65af-4c9c-850a-b48b93f9efa5"),
                            OpenDate = new DateTime(2021, 5, 23, 23, 56, 53, 97, DateTimeKind.Local).AddTicks(9248)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Increments")
                        .HasColumnType("json")
                        .HasColumnName("increments");

                    b.HasKey("Id")
                        .HasName("pk_incremented_text");

                    b.ToTable("incremented_text");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fcf931d-9cae-4b0f-951b-a07e7835ebdf"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("90394976-1b20-4af0-9ee1-069560766ce6"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("56251422-2349-4754-880a-9e5b1c916eed"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("8dd0865a-a1ee-4a37-826c-dfdf9fa41cf4"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1f03b174-9273-4da4-9ebc-b6154f2bb8b8"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("dd8b47b4-8bd5-4128-9edb-7fe38c1aa81f"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("17969a4d-bc17-48fa-8854-c0319c1b5116"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("b3ebb548-ef65-4916-8993-91fc2af4cdbd"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("3258effd-0364-4453-8bfc-b4620ab531a6"),
                            Content = "No país das comunicações, cuja população é x (em milhões de habitantes), uma notícia de interesse nacional foi divulgada e, t horas após a divulgação, o número de pessoas que tomaram conhecimento da notícia é dado por  f(t) = {0}Considere: {1}5{2}2,32 Sabendo que, uma hora pós a divulgação, a metade da população já tinha conhecimento da notícia, é correto afirmar que a população desse país, em milhões de habitantes, é, aproximadamente",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mn>5</mml:mn><mml:mi> </mml:mi><mml:mo>∙</mml:mo><mml:mi> </mml:mi><mml:mn>2</mml:mn><mml:mi> </mml:mi></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mo>-</mml:mo><mml:mi> </mml:mi><mml:mi>x</mml:mi><mml:mi> </mml:mi><mml:mo>.</mml:mo><mml:mi> </mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi> </mml:mi></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>L</mml:mi><mml:mi>o</mml:mi><mml:mi>g</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi> </mml:mi><mml:mo>≅</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("132d2212-cd94-4530-8962-633519f86d11"),
                            Content = "Se {0}, {1}, {2}, ... , {3} são os ângulos internos de um heptágono convexo e se as medidas destes ângulos formam, nesta ordem, uma progressão aritmética, então, a medida, em graus, do ângulo {4}é um número",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("827e7081-c949-440c-aee3-2eea327f39f2"),
                            Content = "Das expressões latinas abaixo, todas de largo uso na linguagem culta, a única que contribui para exprimir corretamente uma afirmação presente no texto ocorre na frase:  "
                        },
                        new
                        {
                            Id = new Guid("6139f725-5da4-45a5-b319-9fe858f62bbb"),
                            Content = "Um objeto é formado por 4 hastes rígidas conectadas em seus extremos por articulações, cujos centros são os vértices de um paralelogramo. As hastes movimentam‐se de tal forma que o paralelogramo permanece sempre no mesmo plano. A cada configuração desse objeto, associa‐se {0}, a medida do menor  ângulo interno do paralelogramo. A área da região delimitada pelo paralelogramo quando {1}90° é A\r\n{2}\r\nPara que a área da região delimitada pelo paralelogramo seja {3} , o valor de {4}necessariamente, igual a",
                            Increments = "[{\"Index\":0,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi></mml:math>\",\"Type\":0},{\"Index\":1,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mo>=</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0},{\"Index\":2,\"Value\":\"https://dev-reports-images.s3-sa-east-1.amazonaws.com/teste/Simulado01-Insper-2.png\",\"Type\":1},{\"Index\":3,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mfrac><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:mfrac></mml:math>\",\"Type\":0},{\"Index\":4,\"Value\":\"<mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi>θ</mml:mi><mml:mi> </mml:mi><mml:mi>é</mml:mi><mml:mo>,</mml:mo><mml:mi> </mml:mi></mml:math>\",\"Type\":0}]"
                        },
                        new
                        {
                            Id = new Guid("1b2af05d-accf-4d85-be35-13e6e2394023"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("c2c8c696-d441-4968-a68a-13802159fac5"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("cf611d53-b8e8-46a3-b0ed-1f2a4a40850e"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("3301d4a2-d744-43a5-8410-c62d73a09814"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("ae8a4206-4ec3-4c61-b7b5-faa1b853c604"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("71bee45d-0a88-4786-8372-4f0d8bfd6bf4"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("466b438a-64a1-4d6f-9e33-613b4c925f33"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("0ee3b7d7-eba9-4a58-bfad-56badd491f3d"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("ce83445d-7f38-41b2-8218-ac351049374d"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("4d7b0037-5a2f-4f41-95a9-a6c8feffc5e5"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("297fd70d-25c0-4c68-8e63-9df82253af7c"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("d3bf8366-fc40-48e2-aea7-1d6448033b8c"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("7b45700a-e0eb-400e-8cdf-4f56cf0c83b1"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("e4e8e565-e3d3-4db5-85c4-aed278420700"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("4badf456-168c-43c4-9814-e34fea6b1c59"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("16b272a5-4d0e-4002-8d1d-2029ad517502"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("3cceb4d9-1fa5-452f-a590-4a8d7d603395"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("2c441075-322a-4ba1-bb9d-31b6ec6c529e"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("e82bc162-0e6a-4066-b83a-71c9f9eea107"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("5def801b-7107-42a2-ac9e-4417c9c112cd"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c18aa528-c699-49d7-a90e-25d351606765"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("a7ad7808-4702-48f4-af08-e2b2ffea8cc5"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("9d2c026c-628f-4e1d-93c0-c1f481fa102b"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("b6ba1f05-5a8f-49f1-b70e-4ee53d40dc91"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("7f3ca4b3-0bbc-4bf7-99c1-a8a4a66b6b4d"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("ca91b769-93b8-4254-b585-e1d8e43f7e11"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("94be2b9f-f109-4316-ae10-bd4eefae3327"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("db094795-a99c-41d4-b554-9358d709982e"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("f2eb0350-5017-41a0-bdd6-139c420f9405"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("2bf18ff0-ed0e-49a6-8aca-716865afcc05"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("8e63ab04-d386-4d3e-a862-c7ccfd2fcaf1"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("44523931-f841-44f0-9997-872ebbecfa71"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("19086ebc-7648-4bcd-abd1-4b714900cc55"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("c94fc709-d3fa-4d6c-ad10-66684e3c732b"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("12ae0c46-298e-45c8-b2fb-8d56d2dd58de"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("f631f2e2-d407-4bfa-a69b-3c1c5df5d566"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("26fbacf8-e542-4974-a233-482073b43bcb"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("296cb3a8-5a0d-4d4a-95ed-3f4b00012468"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("a0c241a7-2873-47f3-a0f3-b60a387912f1"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("9d2052e6-b70d-48d8-b9c6-66ecf52376ca"),
                            Content = "60°"
                        },
                        new
                        {
                            Id = new Guid("c41201e7-608a-4e3a-bfd6-30f006b25aea"),
                            Content = "menor do que 128."
                        },
                        new
                        {
                            Id = new Guid("54b35ce2-eba6-4363-8e71-db558b143bce"),
                            Content = "entre 128 e 129."
                        },
                        new
                        {
                            Id = new Guid("98bef21c-59e1-47f8-bba2-82407ec5efd1"),
                            Content = "entre 129 e 130."
                        },
                        new
                        {
                            Id = new Guid("911e6247-2520-4778-965e-d414a7bcef26"),
                            Content = "entre 130 e 131."
                        },
                        new
                        {
                            Id = new Guid("22e044e4-4dc3-4b8f-bf20-bc5c4d75ad9c"),
                            Content = "maior que 131"
                        },
                        new
                        {
                            Id = new Guid("0a5f5b3b-27fb-403e-8fcc-bd1bc253442f"),
                            Content = "4,64"
                        },
                        new
                        {
                            Id = new Guid("33c1b5c3-b956-4a29-a422-4ba1b73c391c"),
                            Content = "8,32"
                        },
                        new
                        {
                            Id = new Guid("ba364874-3676-420e-9b14-4a18f327a08f"),
                            Content = "6.62"
                        },
                        new
                        {
                            Id = new Guid("2903262d-cd9b-468f-81ad-bab7580c5516"),
                            Content = "3,68"
                        },
                        new
                        {
                            Id = new Guid("41ba8114-a877-46b9-9393-c818122d05d3"),
                            Content = "5,34"
                        },
                        new
                        {
                            Id = new Guid("9a61287a-5389-4da5-8826-b4b97055977c"),
                            Content = "O debate é uma condição sine qua non para que da tese e da antítese resulte uma síntese."
                        },
                        new
                        {
                            Id = new Guid("7ac061e1-164c-49d4-b26b-0c59eac9be0b"),
                            Content = "O principal objetivo do terrorismo contemporâneo é manter o status quo por meio de mensagens falsas."
                        },
                        new
                        {
                            Id = new Guid("076f1d4d-a585-4d3e-ab37-f4f8abc65b04"),
                            Content = "As pessoas devem replicar, ipsis litteris, relatos pré-concebidos que circulam na rede."
                        },
                        new
                        {
                            Id = new Guid("feecf326-8107-4f0c-9265-2d25978c7e62"),
                            Content = "Ao repercutir na internet fatos que causam grande comoção, os internautas devem checá-los a posteriori."
                        },
                        new
                        {
                            Id = new Guid("b2e30d8c-8122-47b7-9981-428b6168fc08"),
                            Content = "E Recomenda-se seguir a intuição, ao divulgar informações pelas redes sociais ou, lato sensu, ao retuitá-las."
                        },
                        new
                        {
                            Id = new Guid("193be851-dc64-4bb6-a210-a9197b446f32"),
                            Content = "15°"
                        },
                        new
                        {
                            Id = new Guid("cef28e1d-2068-4063-a7db-886a37d97e6d"),
                            Content = "22,5°"
                        },
                        new
                        {
                            Id = new Guid("04619cc6-9b36-42d5-ae53-583ec4de569b"),
                            Content = "45°"
                        },
                        new
                        {
                            Id = new Guid("51ca8c18-ff6a-468a-b8a7-99c62ff9e00d"),
                            Content = "30°"
                        },
                        new
                        {
                            Id = new Guid("2d23c669-99e5-459e-9ba7-ea4990f6f57c"),
                            Content = "60°"
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("CognitoUserId")
                        .HasColumnType("text")
                        .HasColumnName("cognito_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54de6969-1c58-4435-8052-5675a574f0d7"),
                            BirthDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CognitoUserId = "6e32ca6c-2a66-4ea6-a0c4-cf655dab5191",
                            CreatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 96, DateTimeKind.Local).AddTicks(8870),
                            Email = "sacchitiellogiovanni@gmail.com",
                            Gender = "Masculino",
                            IsTeacher = false,
                            Name = "Giovanni Sacchitiello",
                            PhoneNumber = "11991392711",
                            UpdatedDate = new DateTime(2021, 5, 24, 23, 56, 53, 96, DateTimeKind.Local).AddTicks(8883)
                        });
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_date");

                    b.Property<bool>("ToStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("to_student");

                    b.Property<bool>("ToTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("to_teacher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_menu");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_alternative_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "TextContent")
                        .WithOne("Alternative")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Alternative", "TextContentId")
                        .HasConstraintName("fk_alternative_incremented_texts_text_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", "Enunciated")
                        .WithOne("Question")
                        .HasForeignKey("BnE.EducationVest.Domain.Exam.Entities.Question", "EnunciatedId")
                        .HasConstraintName("fk_question_incremented_texts_enunciated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_question_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_subjects_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enunciated");

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Alternative", "ChosenAlternative")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ChosenAlternativeId")
                        .HasConstraintName("fk_question_answers_alternative_chosen_alternative_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_question_answers_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BnE.EducationVest.Domain.Users.Entities.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_question_answers_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenAlternative");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Subject", "SubjectFather")
                        .WithMany("SubjectChild")
                        .HasForeignKey("SubjectFatherId")
                        .HasConstraintName("fk_subject_subject_subject_father_id");

                    b.Navigation("SubjectFather");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.ExamPeriodVO", b =>
                {
                    b.HasOne("BnE.EducationVest.Domain.Exam.Entities.Exam", "Exam")
                        .WithMany("Periods")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_exam_period_exam_exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("BnE.EducationVest.Domain.Users.ValueObjects.AddressVO", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CEP")
                                .HasColumnType("char(9)")
                                .HasColumnName("address.cep");

                            b1.Property<string>("City")
                                .HasColumnType("char(50)")
                                .HasColumnName("adress.city");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("address.neighborhood");

                            b1.Property<string>("Number")
                                .HasColumnType("text")
                                .HasColumnName("address_number");

                            b1.Property<string>("State")
                                .HasColumnType("char(2)")
                                .HasColumnName("adress.state");

                            b1.Property<string>("Street")
                                .HasColumnType("varchar(150)")
                                .HasColumnName("address.street");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("54de6969-1c58-4435-8052-5675a574f0d7"),
                                    CEP = "03320020",
                                    City = "São Paulo",
                                    Neighborhood = "Carrão",
                                    Number = "148",
                                    State = "SP",
                                    Street = "Rua antonio ciucio"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Alternative", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Exam", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Question", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SubjectChild");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Exam.ValueObjects.IncrementedTextVO", b =>
                {
                    b.Navigation("Alternative");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BnE.EducationVest.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
